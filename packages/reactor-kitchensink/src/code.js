export default {
	"ActionSheet": [
		{
			"file": "ActionSheet.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, ActionSheet, Button } from '@extjs/reactor/modern';\n\nexport default class ActionSheetExample extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            showActionSheet: false\n        };\n    }\n\n    hideActionSheet() {\n        this.setState({ showActionSheet: false })\n    }\n\n    showActionSheet() {\n        this.setState({ showActionSheet: true })\n    }\n\n    render() {\n        const { showActionSheet } = this.state;\n\n        return (\n            <Container>\n                <Panel shadow>\n                    <Button handler={this.showActionSheet.bind(this)}>Show Action Sheet</Button>\n                </Panel>\n                <ActionSheet hidden={!showActionSheet}>\n                    <Button ui=\"decline\" handler={this.hideActionSheet.bind(this)}>Delete Draft</Button>\n                    <Button handler={this.hideActionSheet.bind(this)}>Save Draft</Button>\n                    <Button handler={this.hideActionSheet.bind(this)}>Cancel</Button>\n                </ActionSheet>\n            </Container>\n        )\n    }\n\n}"
		}
	],
	"Animations": [
		{
			"file": "Animations.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, Button } from '@extjs/reactor/modern';\n\nexport default class Animations extends Component {\n\n    constructor() {\n        super();\n        this.state = { activeCard: 0 };\n    }\n\n    switchCards(animation) {\n        this.refs.cards.getLayout().setAnimation(animation);\n        this.setState({ activeCard: this.state.activeCard === 0 ? 1 : 0 });\n    }\n\n    createCardContents() {\n        return [\n            { name: 'Slide Left', animation: { type: 'slide', direction: 'left', duration: 500 } },\n            { name: 'Slide Right', animation: { type: 'slide', direction: 'right', duration: 500 } },\n            { name: 'Slide Up', animation: { type: 'slide', direction: 'up', duration: 500 } },\n            { name: 'Slide Down', animation: { type: 'slide', direction: 'down', duration: 500 } },\n            { name: 'Cover Left', animation: { type: 'cover', direction: 'left', duration: 500 } },\n            { name: 'Cover Right', animation: { type: 'cover', direction: 'right', duration: 500 } },\n            { name: 'Cover Up', animation: { type: 'cover', direction: 'up', duration: 500 } },\n            { name: 'Cover Down', animation: { type: 'cover', direction: 'down', duration: 500 } },\n            { name: 'Reveal Left', animation: { type: 'reveal', direction: 'left', duration: 500 } },\n            { name: 'Reveal Right', animation: { type: 'reveal', direction: 'right', duration: 500 } },\n            { name: 'Reveal Up', animation: { type: 'reveal', direction: 'up', duration: 500 } },\n            { name: 'Reveal Down', animation: { type: 'reveal', direction: 'down', duration: 500 } },\n            { name: 'Fade', animation: { type: 'fade', duration: 500 } },\n            { name: 'Pop', animation: { type: 'pop', duration: 500 } },\n            { name: 'Flip', animation: { type: 'flip', duration: 500 } }\n        ].map(({name, animation}, i) => <Button key={i} onTap={this.switchCards.bind(this, animation)} text={name}/>);\n    }\n\n    render() {\n        return (\n            <Container ref=\"cards\" layout=\"card\" activeItem={this.state.activeCard} shadow={true}>\n                <Panel title=\"Card 1\" layout=\"vbox\">\n                    {this.createCardContents()}\n                </Panel>\n                <Panel title=\"Card 2\" layout=\"vbox\">\n                    {this.createCardContents()}\n                </Panel>\n            </Container>\n        )\n    }\n\n}\n"
		}
	],
	"Audio": [
		{
			"file": "Audio.js",
			"content": "import React, { Component } from 'react'\nimport { Panel, Audio, Button, Container } from '@extjs/reactor/modern';\n\nexport default class AudioExample extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            playing: false\n        };\n    }\n\n    toggleAudioAndroid() {\n        const { audio } = this.refs;\n        const { playing } = this.state;\n\n        if (playing) {\n            audio.pause();\n        } else {\n            audio.play();\n        }        \n\n        this.setState({ playing: !playing });\n    }\n\n    render() {\n        const { playing } = this.state;\n\n        return (\n            <Container layout={{ type: 'vbox', align: 'stretch', pack: 'center' }}>\n                <Container \n                    shadow={true} \n                    layout={Ext.os.is.Android ? { type: 'vbox', align: 'center', pack: 'center' } : 'fit'}\n                >\n                    <Audio\n                        ref=\"audio\"\n                        loop={true} \n                        url=\"resources/audio/crash.mp3\"\n                        posterUrl=\"resources/images/cover.jpg\"\n                        enableControls={!Ext.os.is.Android}\n                    />\n                    { Ext.os.is.Android && (\n                        <Button text={playing ? 'Play Audio' : 'Pause Audio'} margin={20} handler={this.toggleAudioAndroid.bind(this)}/>\n                    )}\n                </Container>\n            </Container>\n        );\n    }\n\n}"
		}
	],
	"Basic3DColumn": [
		{
			"file": "Basic3DColumn.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport ChartToolbar from '../Charts/ChartToolbar';\nimport createData from './createData';\n\nExt.require([\n    'Ext.chart.interactions.PanZoom',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category',\n    'Ext.chart.axis.Numeric3D',\n    'Ext.chart.grid.HorizontalGrid3D',\n    'Ext.chart.series.Bar3D',\n    'Ext.chart.axis.Category3D'\n]);\n\nexport default class Basic3DColumnChartExample extends Component {\n\n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g0', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name']\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    refresh = () => {\n        this.store.loadData(createData());\n    }\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    toggleZoomOnPan = (zoomOnPan) => {\n        this.refs.chart.getInteraction('panzoom').setZoomOnPan(zoomOnPan);\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onToggleZoomOnPan={this.toggleZoomOnPan}\n                    onRefreshClick={this.refresh}\n                    theme={theme}\n                />\n                <Cartesian\n                    ref=\"chart\"\n                    store={this.store}\n                    theme={theme}\n                    interactions={[{\n                        type: 'panzoom',\n                        axes: {\n                            left: {\n                                allowPan: false,\n                                allowZoom: false\n                            },\n                            bottom: {\n                                allowPan: true,\n                                allowZoom: true\n                            }\n                        }\n                    }]}\n                    series={{\n                        type: 'bar3d',\n                        xField: 'name',\n                        yField: ['g1', 'g2', 'g3']\n                    }}\n                    axes={[{\n                        type: 'numeric3d',\n                        position: 'left',\n                        fields: ['g1', 'g2', 'g3'],\n                        grid: true,\n                        label: {\n                            rotate: {\n                                degrees: -30\n                            }\n                        }\n                    }, {\n                        type: 'category3d',\n                        position: 'bottom',\n                        fields: 'name',\n                        visibleRange: [0, 0.2]\n                    }]}\n                />\n            </Panel>            \n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    let data = [],\n        record = {\n            id: 0,\n            g0: 300,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'Item-0'\n        }, i;\n\n    data.push(record);\n\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g0: record.g0 + 30 * random(),\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: 'Item-' + i\n        };\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"BasicArea": [
		{
			"file": "BasicArea.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport ChartToolbar from '../Charts/ChartToolbar';\nimport createData from './createData';\n\nExt.require([\n    'Ext.chart.series.Area',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category'\n]);\n\nexport default class BasicAreaChartExample extends Component {\n\n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g0', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name'],\n    });\n\n    refresh = () => {\n        this.store.loadData(createData(25));\n    }\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onRefreshClick={this.refresh}\n                    theme={theme}\n                />\n                <Cartesian\n                    store={this.store}\n                    theme={theme}\n                    insetPadding=\"25 35 0 10\"\n                    platformConfig={{\n                        phone: {\n                            insetPadding: '15 5 0 0'\n                        }\n                    }}\n                    legend={{\n                        type: 'sprite',\n                        position: 'bottom'\n                    }}\n                    interactions={[{\n                        type: 'panzoom',\n                        axes: {\n                            left: {\n                                allowPan: false,\n                                allowZoom: false\n                            },\n                            bottom: {\n                                allowPan: true,\n                                allowZoom: true\n                            }\n                        }\n                    }]}\n                    series={[{\n                        type: 'area',\n                        xField: 'name',\n                        yField: ['g1', 'g2', 'g3', 'g4', 'g5'],\n                        title: ['G1', 'G2', 'G3', 'G4', 'G5'],\n                        style: {\n                            stroke: 'black',\n                            lineWidth: 2,\n                            fillOpacity: 0.8\n                        }\n                    }]}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'left',\n                        fields: ['g1', 'g2', 'g3', 'g4', 'g5', 'g6'],\n                        label: {\n                            rotate: {\n                                degrees: -30\n                            }\n                        },\n                        grid: {\n                            odd: {\n                                fill: '#e8e8e8'\n                            }\n                        },\n                        title: {\n                            text: 'Summation of Data',\n                            fontSize: 20\n                        }\n                    }, {\n                        type: 'category',\n                        position: 'bottom',\n                        fields: 'name',\n                        grid: true,\n                        visibleRange: [0, 0.25],\n                        title: {\n                            text: 'Item Names',\n                            fontSize: 20\n                        }\n                    }]}\n                />\n            </Panel>            \n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    let data = [],\n        record = {\n            id: 0,\n            g0: 300,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'Item-0'\n        }, i;\n\n    data.push(record);\n\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g0: record.g0 + 30 * random(),\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: 'Item-' + i\n        };\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"BasicBar": [
		{
			"file": "BasicBar.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Bar',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category'\n]);\n\nexport default class BasicBarChartExample extends Component {\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['country', 'agr', 'ind', 'ser'],\n        data: [\n            { country: 'USA',     agr: 188217, ind: 2995787, ser: 12500746},\n            { country: 'China',   agr: 918138, ind: 3611671, ser: 3792665},\n            { country: 'Japan',   agr: 71568,  ind: 1640091, ser: 4258274},\n            { country: 'UK',      agr: 17084,  ind: 512506,  ser: 1910915},\n            { country: 'Russia',  agr: 78856,  ind: 727906,  ser: 1215198}\n        ]\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    onAxisLabelRender = (axis, label, layoutContext) => {\n        return Ext.util.Format.number(layoutContext.renderer(label) / 1000, '0,000');\n    }\n\n    onSeriesLabelRender = (v) => {\n        return Ext.util.Format.number(v / 1000, '0,000');\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    theme={theme}\n                />\n                <Cartesian\n                    insetPadding=\"70 40 0\"\n                    platformConfig={{\n                        phone: {\n                            insetPadding: '50 0 0'\n                        }\n                    }}\n                    flipXY\n                    store={this.store}\n                    theme={theme}\n                    series={[{\n                        type: 'bar',\n                        xField: 'country',\n                        yField: 'ind',\n                        style: {\n                            opacity: 0.80,\n                            minGapWidth: 10\n                        },\n                        label: {\n                            field: 'ind',\n                            display: 'insideEnd',\n                            renderer: this.onSeriesLabelRender\n                        }\n                    }]}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'bottom',\n                        fields: 'ind',\n                        grid: true,\n                        maximum: 4000000,\n                        majorTickSteps: 10,\n                        title: 'Billions of USD',\n                        renderer: this.onAxisLabelRender\n                    }, {\n                        type: 'category',\n                        position: 'left',\n                        fields: 'country',\n                        grid: true\n                    }]}\n                    sprites={[{\n                        type: 'text',\n                        text: '2011 Industry size in major economies',\n                        fontSize: 21,\n                        width: 100,\n                        height: 30,\n                        x: 40, // the sprite x position\n                        y: 35  // the sprite y position\n                    }, {\n                        type: 'text',\n                        text: 'Source: http://en.wikipedia.org/wiki/List_of_countries_by_GDP_sector_composition',\n                        fontSize: 10,\n                        x: 40,\n                        y: 50\n                    }]}\n                />\n            </Panel>            \n        )\n    }\n}"
		}
	],
	"BasicColumn": [
		{
			"file": "BasicColumn.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport ChartToolbar from '../Charts/ChartToolbar';\nimport createData from './createData';\n\nExt.require([\n    'Ext.chart.series.Bar',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category'\n]);\n\nexport default class BasicColumnChartExample extends Component {\n\n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: [\n            'month',\n            'high',\n            'low',\n            {\n                name: 'highF',\n                calculate: function (data) {\n                    return data.high * 1.8 + 32;\n                }\n            },\n            {\n                name: 'lowF',\n                calculate: function (data) {\n                    return data.low * 1.8 + 32;\n                }\n            }\n        ]\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    refresh = () => {\n        this.store.loadData(createData());\n    }\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    toggleZoomOnPan = (zoomOnPan) => {\n        this.refs.chart.getInteraction('panzoom').setZoomOnPan(zoomOnPan);\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onToggleZoomOnPan={this.toggleZoomOnPan}\n                    onRefreshClick={this.refresh}\n                    theme={theme}\n                />\n                <Cartesian\n                    ref=\"chart\"\n                    insetPadding=\"50 10 0 10\"\n                    platformConfig={{\n                        desktop: {\n                            insetPadding: '50 40 20 40'\n                        }\n                    }}\n                    store={this.store}\n                    theme={theme}\n                    interactions={[{\n                        type: 'itemedit',\n                        tooltip: {\n                            renderer: this.onEditTipRender\n                        },\n                        renderer: this.onColumnEdit\n                    }, {\n                        type: 'panzoom',\n                        axes: {\n                            left: {\n                                allowPan: false,\n                                allowZoom: false\n                            },\n                            bottom: {\n                                allowPan: true,\n                                allowZoom: true\n                            }\n                        }\n                    }]}\n                    series={{\n                        type: 'bar',\n                        xField: 'month',\n                        yField: 'highF',\n                        style: {\n                            minGapWidth: 15\n                        },\n                        highlight: {\n                            strokeStyle: 'black',\n                            fillStyle: 'gold'\n                        },\n                        label: {\n                            field: 'highF',\n                            display: 'insideEnd',\n                            renderer: value => value.toFixed(1)\n                        }\n                    }}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'left',\n                        minimum: 30,\n                        titleMargin: 20,\n                        title: {\n                            text: 'Temperature in °F'\n                        },\n                        listeners: {\n                            rangechange: this.onAxisRangeChange\n                        }\n                    }, {\n                        type: 'category',\n                        position: 'bottom',\n                        visibleRange: [0, 0.5],\n                        platformConfig: {\n                            desktop: {\n                                visibleRange: [0, 1]\n                            }\n                        }\n                    }]}\n                    sprites={{\n                        type: 'text',\n                        text: 'Redwood City Climate Data',\n                        fontSize: 22,\n                        width: 100,\n                        height: 30,\n                        x: 30, // the sprite x position\n                        y: 30  // the sprite y position\n                    }}\n                    onAfterRender={this.onAfterRender}\n                    onBeginItemEdit={this.onBeginItemEdit}\n                    onEndItemEdit={this.onEndItemEdit}\n                />\n            </Panel>            \n        )\n    }\n\n    onAxisRangeChange = (axis, range) => {\n        var chart = axis.getChart(),\n            store = chart.getStore(),\n            sum = 0,\n            mean;\n\n        store.each(function (rec) {\n            sum += rec.get('highF');\n        });\n\n        mean = sum / store.getCount();\n\n        axis.setLimits({\n            value: mean,\n            line: {\n                title: {\n                    text: 'Average high: ' + mean.toFixed(2) + '°F'\n                },\n                lineDash: [2,2]\n            }\n        });\n    }\n\n    itemAnimationDuration = 0\n\n    onColumnEdit = (chart, data) => {\n        var threshold = 65,\n            delta = 20,\n            yValue = data.target.yValue,\n            coldness;\n\n        if (yValue < threshold) {\n            coldness = Ext.Number.constrain((threshold - yValue) / delta, 0, 1);\n            return {\n                fillStyle: 'rgba(133, 231, 252, ' + coldness.toString() + ')'\n            };\n        } else {\n            return {\n                fillStyle: 'none'\n            };\n        }\n    }\n\n    // Disable item's animaton for editing.\n    onBeginItemEdit = (chart, interaction, item) => {\n        var itemsMarker = item.sprite.getMarker(item.category),\n            fx = itemsMarker.getTemplate().fx; // animation modifier\n\n        this.itemAnimationDuration = fx.getDuration();\n        fx.setDuration(0);\n    }\n\n    // Restore item's animation when editing is done.\n    onEndItemEdit = (chart, interaction, item, target) => {\n        var itemsMarker = item.sprite.getMarker(item.category),\n            fx = itemsMarker.getTemplate().fx;\n\n        fx.setDuration(this.itemAnimationDuration);\n    }\n\n    // The 'target' here is an object that contains information\n    // about the target value when the drag operation on the column ends.\n    onEditTipRender = (tooltip, item, target, e) => {\n        tooltip.setHtml('Temperature °F: ' + target.yValue.toFixed(1));\n    }\n\n    onAfterRender = () => {\n        var me = this,\n            chart = me.refs.chart,\n            axis = chart.getAxis(0),\n            store = chart.getStore();\n\n        function onAxisRangeChange() {\n            me.onAxisRangeChange(axis);\n        }\n\n        store.on({\n            datachanged: onAxisRangeChange,\n            update: onAxisRangeChange\n        });\n\n        Ext.Viewport.on('orientationchange', me.updateChartTitle, me);\n        me.updateChartTitle();\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "const data = [\n    { month: 'Jan', high: 14.7, low: 5.6  },\n    { month: 'Feb', high: 16.5, low: 6.6  },\n    { month: 'Mar', high: 18.6, low: 7.3  },\n    { month: 'Apr', high: 20.8, low: 8.1  },\n    { month: 'May', high: 23.3, low: 9.9  },\n    { month: 'Jun', high: 26.2, low: 11.9 },\n    { month: 'Jul', high: 27.7, low: 13.3 },\n    { month: 'Aug', high: 27.6, low: 13.2 },\n    { month: 'Sep', high: 26.4, low: 12.1 },\n    { month: 'Oct', high: 23.6, low: 9.9  },\n    { month: 'Nov', high: 17  , low: 6.8  },\n    { month: 'Dec', high: 14.7, low: 5.8  }\n];\n\nlet counter = 0;\n\nexport default function createData() {\n    let i, \n        result = [],\n        temp = 15,\n        min = counter % 2 === 1 ? 0 : temp;\n\n    for (i = 0; i < data.length; i++) {\n        result.push({\n            month: data[i].month,\n            high: min + temp + Math.random() * temp,\n            low: min + Math.random() * temp\n        });\n    }\n\n    counter++;\n    return result;\n}\n"
		}
	],
	"BasicGauge": [
		{
			"file": "BasicGauge.js",
			"content": "import React, { Component } from 'react';\nimport { Polar, Panel } from '@extjs/reactor/modern';\nimport createData from './createData';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Gauge'\n]);\n\nexport default class BasicGaugeChartExample extends Component {\n    \n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name'],\n    });\n\n    refresh = () => {\n        this.store.loadData(createData(5));\n    }\n\n    render() {\n        return (\n            <Panel shadow layout={{type: 'vbox', align: 'stretch'}}>\n                <ChartToolbar\n                    onRefreshClick={this.refresh}\n                />\n                <Polar\n                    innerPadding={20}\n                    store={this.store}\n                    flex={1}\n                    animate={{\n                        easing: 'elasticIn',\n                        duration: 1000\n                    }}\n                    series={[{\n                        type: 'gauge',\n                        angleField: 'g1',\n                        minimum: 100,\n                        maximum: 800,\n                        donut: 30,\n                        colors: [\"#115fa6\", \"lightgrey\"]\n                    }]}\n                />\n                <Polar\n                    innerPadding={20}\n                    store={this.store}\n                    flex={1}\n                    animate={{\n                        easing: 'elasticIn',\n                        duration: 1000\n                    }}\n                    series={[{\n                        type: 'gauge',\n                        angleField: 'g1',\n                        donut: 30,\n                        value: 60,\n                        minimum: 100,\n                        maximum: 800,\n                        needle: true,\n                        needleLength: 95,\n                        needleWidth: 8,\n                        totalAngle: Math.PI,\n                        label: {\n                            fontSize: 12,\n                            fontWeight: 'bold'\n                        },\n                        colors: ['maroon', 'blue', 'lightgray', 'red'],\n                        sectors: [{\n                            end: 300,\n                            label: 'Cold',\n                            color: 'dodgerblue'\n                        }, {\n                            end: 300,\n                            style: {\n                                strokeStyle: 'black',\n                                strokeOpacity: 1,\n                                lineWidth: 4\n                            }\n                        }, {\n                            end: 600,\n                            label: 'Temp.',\n                            color: 'lightgray'\n                        }, {\n                            end: 600,\n                            style: {\n                                strokeStyle: 'black',\n                                strokeOpacity: 1,\n                                lineWidth: 4\n                            }\n                        }, {\n                            end: 800,\n                            label: 'Hot',\n                            color: 'tomato'\n                        }, {\n                            start: 0,\n                            style: {\n                                strokeStyle: 'gray',\n                                strokeOpacity: 1,\n                                lineWidth: 4,\n                                fillOpacity: 0\n                            }\n                        }],\n                        renderer: this.chartRenderer\n                    }]}\n                />                \n            </Panel>\n        )\n    }\n\n    chartRenderer = (sprite, config, rendererData, spriteIndex) => {\n        let surface = sprite.getParent(),\n            chart = rendererData.series.getChart(),\n            mainRect = chart.getMainRect(),\n            width = mainRect[2],\n            height = mainRect[3],\n            bigChart = (width >= 250 && height >= 150),\n            changes, fontSize;\n        // This renderer function draws the \"Temp.\" label in big white letters,\n        // the \"Cold\" label in blue, and the \"Hot\" label in red.\n        if (config.type == \"label\") {\n            changes = {\n                x: config.x + 10,\n                y: config.y + 10\n            };\n            if (spriteIndex == 3) {\n                Ext.apply(changes, {\n                    fontSize: (bigChart ? 32 : 16),\n                    strokeStyle: 'black'\n                });\n            } else {\n                Ext.apply(changes, {\n                    fontSize: (bigChart ? 24 : 12)\n                });\n            }\n            switch (spriteIndex) {\n                case 1:\n                    Ext.apply(changes, {\n                        color: 'blue'\n                    });\n                    break;\n                case 3:\n                    Ext.apply(changes, {\n                        color: 'white'\n                    });\n                    break;\n                case 5:\n                    Ext.apply(changes, {\n                        color: 'darkred'\n                    });\n                    break;\n            }\n            return changes;\n        }\n    }    \n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    let data = [], \n        record = {\n            id: 0,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'A'\n        }, i;\n\n    data.push(record);\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: String.fromCharCode(65 + i)\n        };\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"BasicGaugeChart": [
		{
			"file": "BasicGaugeChart.js",
			"content": "import React, { Component } from 'react';\nimport { Polar, Panel } from '@extjs/reactor/modern';\nimport createData from './createData';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Gauge'\n]);\n\nexport default class BasicGaugeChartExample extends Component {\n    \n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name'],\n    });\n\n    refresh = () => {\n        this.store.loadData(createData(5));\n    }\n\n    render() {\n        return (\n            <Panel shadow layout={{type: 'vbox', align: 'stretch'}}>\n                <ChartToolbar\n                    onRefreshClick={this.refresh}\n                />\n                <Polar\n                    innerPadding={20}\n                    store={this.store}\n                    flex={1}\n                    animate={{\n                        easing: 'elasticIn',\n                        duration: 1000\n                    }}\n                    series={[{\n                        type: 'gauge',\n                        angleField: 'g1',\n                        minimum: 100,\n                        maximum: 800,\n                        donut: 30,\n                        colors: [\"#115fa6\", \"lightgrey\"]\n                    }]}\n                />\n                <Polar\n                    innerPadding={20}\n                    store={this.store}\n                    flex={1}\n                    animate={{\n                        easing: 'elasticIn',\n                        duration: 1000\n                    }}\n                    series={[{\n                        type: 'gauge',\n                        angleField: 'g1',\n                        donut: 30,\n                        value: 60,\n                        minimum: 100,\n                        maximum: 800,\n                        needle: true,\n                        needleLength: 95,\n                        needleWidth: 8,\n                        totalAngle: Math.PI,\n                        label: {\n                            fontSize: 12,\n                            fontWeight: 'bold'\n                        },\n                        colors: ['maroon', 'blue', 'lightgray', 'red'],\n                        sectors: [{\n                            end: 300,\n                            label: 'Cold',\n                            color: 'dodgerblue'\n                        }, {\n                            end: 300,\n                            style: {\n                                strokeStyle: 'black',\n                                strokeOpacity: 1,\n                                lineWidth: 4\n                            }\n                        }, {\n                            end: 600,\n                            label: 'Temp.',\n                            color: 'lightgray'\n                        }, {\n                            end: 600,\n                            style: {\n                                strokeStyle: 'black',\n                                strokeOpacity: 1,\n                                lineWidth: 4\n                            }\n                        }, {\n                            end: 800,\n                            label: 'Hot',\n                            color: 'tomato'\n                        }, {\n                            start: 0,\n                            style: {\n                                strokeStyle: 'gray',\n                                strokeOpacity: 1,\n                                lineWidth: 4,\n                                fillOpacity: 0\n                            }\n                        }],\n                        renderer: this.chartRenderer\n                    }]}\n                />                \n            </Panel>\n        )\n    }\n\n    chartRenderer = (sprite, config, rendererData, spriteIndex) => {\n        let surface = sprite.getParent(),\n            chart = rendererData.series.getChart(),\n            mainRect = chart.getMainRect(),\n            width = mainRect[2],\n            height = mainRect[3],\n            bigChart = (width >= 250 && height >= 150),\n            changes, fontSize;\n        // This renderer function draws the \"Temp.\" label in big white letters,\n        // the \"Cold\" label in blue, and the \"Hot\" label in red.\n        if (config.type == \"label\") {\n            changes = {\n                x: config.x + 10,\n                y: config.y + 10\n            };\n            if (spriteIndex == 3) {\n                Ext.apply(changes, {\n                    fontSize: (bigChart ? 32 : 16),\n                    strokeStyle: 'black'\n                });\n            } else {\n                Ext.apply(changes, {\n                    fontSize: (bigChart ? 24 : 12)\n                });\n            }\n            switch (spriteIndex) {\n                case 1:\n                    Ext.apply(changes, {\n                        color: 'blue'\n                    });\n                    break;\n                case 3:\n                    Ext.apply(changes, {\n                        color: 'white'\n                    });\n                    break;\n                case 5:\n                    Ext.apply(changes, {\n                        color: 'darkred'\n                    });\n                    break;\n            }\n            return changes;\n        }\n    }    \n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    let data = [], \n        record = {\n            id: 0,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'A'\n        }, i;\n\n    data.push(record);\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: String.fromCharCode(65 + i)\n        };\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"BasicLine": [
		{
			"file": "BasicLine.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport data from './data';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Line',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Time'\n]);\n\nexport default class BasicScatterChartExample extends Component {\n    \n    store = Ext.create('Ext.data.Store', {\n        data\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    theme={theme}\n                />\n                <Cartesian\n                    insetPadding=\"40 40 60 40\"\n                    store={this.store}\n                    theme={theme}\n                    series={{\n                        type: 'line',\n                        xField: 'time',\n                        yField: 'value'\n                    }}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'left',\n                        fields: 'value',\n                        title: 'USD to Euro'\n                    }, {\n                        type: 'time',\n                        dateFormat: 'Y-m-d',\n                        position: 'bottom',\n                        fields: 'time',\n                        title: 'Date'\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default [\n    {\"time\": 1136073600000, \"value\": 0.8446},\n    {\"time\": 1136160000000, \"value\": 0.8445},\n    {\"time\": 1136246400000, \"value\": 0.8444},\n    {\"time\": 1136332800000, \"value\": 0.8451},\n    {\"time\": 1136419200000, \"value\": 0.8418},\n    {\"time\": 1136505600000, \"value\": 0.8264},\n    {\"time\": 1136592000000, \"value\": 0.8258},\n    {\"time\": 1136678400000, \"value\": 0.8232},\n    {\"time\": 1136764800000, \"value\": 0.8233},\n    {\"time\": 1136851200000, \"value\": 0.8258},\n    {\"time\": 1136937600000, \"value\": 0.8283},\n    {\"time\": 1137024000000, \"value\": 0.8278},\n    {\"time\": 1137110400000, \"value\": 0.8256},\n    {\"time\": 1137196800000, \"value\": 0.8292},\n    {\"time\": 1137283200000, \"value\": 0.8239},\n    {\"time\": 1137369600000, \"value\": 0.8239},\n    {\"time\": 1137456000000, \"value\": 0.8245},\n    {\"time\": 1137542400000, \"value\": 0.8265},\n    {\"time\": 1137628800000, \"value\": 0.8261},\n    {\"time\": 1137715200000, \"value\": 0.8269},\n    {\"time\": 1137801600000, \"value\": 0.8273},\n    {\"time\": 1137888000000, \"value\": 0.8244},\n    {\"time\": 1137974400000, \"value\": 0.8244},\n    {\"time\": 1138060800000, \"value\": 0.8172},\n    {\"time\": 1138147200000, \"value\": 0.8139},\n    {\"time\": 1138233600000, \"value\": 0.8146},\n    {\"time\": 1138320000000, \"value\": 0.8164},\n    {\"time\": 1138406400000, \"value\": 0.82},\n    {\"time\": 1138492800000, \"value\": 0.8269},\n    {\"time\": 1138579200000, \"value\": 0.8269},\n    {\"time\": 1138665600000, \"value\": 0.8269},\n    {\"time\": 1138752000000, \"value\": 0.8258},\n    {\"time\": 1138838400000, \"value\": 0.8247},\n    {\"time\": 1138924800000, \"value\": 0.8286},\n    {\"time\": 1139011200000, \"value\": 0.8289},\n    {\"time\": 1139097600000, \"value\": 0.8316},\n    {\"time\": 1139184000000, \"value\": 0.832},\n    {\"time\": 1139270400000, \"value\": 0.8333},\n    {\"time\": 1139356800000, \"value\": 0.8352},\n    {\"time\": 1139443200000, \"value\": 0.8357},\n    {\"time\": 1139529600000, \"value\": 0.8355},\n    {\"time\": 1139616000000, \"value\": 0.8354},\n    {\"time\": 1139702400000, \"value\": 0.8403},\n    {\"time\": 1139788800000, \"value\": 0.8403},\n    {\"time\": 1139875200000, \"value\": 0.8406},\n    {\"time\": 1139961600000, \"value\": 0.8403},\n    {\"time\": 1140048000000, \"value\": 0.8396},\n    {\"time\": 1140134400000, \"value\": 0.8418},\n    {\"time\": 1140220800000, \"value\": 0.8409},\n    {\"time\": 1140307200000, \"value\": 0.8384},\n    {\"time\": 1140393600000, \"value\": 0.8386},\n    {\"time\": 1140480000000, \"value\": 0.8372},\n    {\"time\": 1140566400000, \"value\": 0.839},\n    {\"time\": 1140652800000, \"value\": 0.84},\n    {\"time\": 1140739200000, \"value\": 0.8389},\n    {\"time\": 1140825600000, \"value\": 0.84},\n    {\"time\": 1140912000000, \"value\": 0.8423},\n    {\"time\": 1140998400000, \"value\": 0.8423},\n    {\"time\": 1141084800000, \"value\": 0.8435},\n    {\"time\": 1141171200000, \"value\": 0.8422},\n    {\"time\": 1141257600000, \"value\": 0.838},\n    {\"time\": 1141344000000, \"value\": 0.8373},\n    {\"time\": 1141430400000, \"value\": 0.8316},\n    {\"time\": 1141516800000, \"value\": 0.8303},\n    {\"time\": 1141603200000, \"value\": 0.8303},\n    {\"time\": 1141689600000, \"value\": 0.8302},\n    {\"time\": 1141776000000, \"value\": 0.8369},\n    {\"time\": 1141862400000, \"value\": 0.84},\n    {\"time\": 1141948800000, \"value\": 0.8385},\n    {\"time\": 1142035200000, \"value\": 0.84},\n    {\"time\": 1142121600000, \"value\": 0.8401},\n    {\"time\": 1142208000000, \"value\": 0.8402},\n    {\"time\": 1142294400000, \"value\": 0.8381},\n    {\"time\": 1142380800000, \"value\": 0.8351},\n    {\"time\": 1142467200000, \"value\": 0.8314},\n    {\"time\": 1142553600000, \"value\": 0.8273},\n    {\"time\": 1142640000000, \"value\": 0.8213},\n    {\"time\": 1142726400000, \"value\": 0.8207},\n    {\"time\": 1142812800000, \"value\": 0.8207},\n    {\"time\": 1142899200000, \"value\": 0.8215},\n    {\"time\": 1142985600000, \"value\": 0.8242},\n    {\"time\": 1143072000000, \"value\": 0.8273},\n    {\"time\": 1143158400000, \"value\": 0.8301},\n    {\"time\": 1143244800000, \"value\": 0.8346},\n    {\"time\": 1143331200000, \"value\": 0.8312},\n    {\"time\": 1143417600000, \"value\": 0.8312},\n    {\"time\": 1143504000000, \"value\": 0.8312},\n    {\"time\": 1143590400000, \"value\": 0.8306},\n    {\"time\": 1143676800000, \"value\": 0.8327},\n    {\"time\": 1143763200000, \"value\": 0.8282},\n    {\"time\": 1143849600000, \"value\": 0.824},\n    {\"time\": 1143936000000, \"value\": 0.8255},\n    {\"time\": 1144022400000, \"value\": 0.8256},\n    {\"time\": 1144108800000, \"value\": 0.8273},\n    {\"time\": 1144195200000, \"value\": 0.8209},\n    {\"time\": 1144281600000, \"value\": 0.8151},\n    {\"time\": 1144368000000, \"value\": 0.8149},\n    {\"time\": 1144454400000, \"value\": 0.8213},\n    {\"time\": 1144540800000, \"value\": 0.8273},\n    {\"time\": 1144627200000, \"value\": 0.8273},\n    {\"time\": 1144713600000, \"value\": 0.8261},\n    {\"time\": 1144800000000, \"value\": 0.8252},\n    {\"time\": 1144886400000, \"value\": 0.824},\n    {\"time\": 1144972800000, \"value\": 0.8262},\n    {\"time\": 1145059200000, \"value\": 0.8258},\n    {\"time\": 1145145600000, \"value\": 0.8261},\n    {\"time\": 1145232000000, \"value\": 0.826},\n    {\"time\": 1145318400000, \"value\": 0.8199},\n    {\"time\": 1145404800000, \"value\": 0.8153},\n    {\"time\": 1145491200000, \"value\": 0.8097},\n    {\"time\": 1145577600000, \"value\": 0.8101},\n    {\"time\": 1145664000000, \"value\": 0.8119},\n    {\"time\": 1145750400000, \"value\": 0.8107},\n    {\"time\": 1145836800000, \"value\": 0.8105},\n    {\"time\": 1145923200000, \"value\": 0.8084},\n    {\"time\": 1146009600000, \"value\": 0.8069},\n    {\"time\": 1146096000000, \"value\": 0.8047},\n    {\"time\": 1146182400000, \"value\": 0.8023},\n    {\"time\": 1146268800000, \"value\": 0.7965},\n    {\"time\": 1146355200000, \"value\": 0.7919},\n    {\"time\": 1146441600000, \"value\": 0.7921},\n    {\"time\": 1146528000000, \"value\": 0.7922},\n    {\"time\": 1146614400000, \"value\": 0.7934},\n    {\"time\": 1146700800000, \"value\": 0.7918},\n    {\"time\": 1146787200000, \"value\": 0.7915},\n    {\"time\": 1146873600000, \"value\": 0.787},\n    {\"time\": 1146960000000, \"value\": 0.7861},\n    {\"time\": 1147046400000, \"value\": 0.7861},\n    {\"time\": 1147132800000, \"value\": 0.7853},\n    {\"time\": 1147219200000, \"value\": 0.7867},\n    {\"time\": 1147305600000, \"value\": 0.7827},\n    {\"time\": 1147392000000, \"value\": 0.7834},\n    {\"time\": 1147478400000, \"value\": 0.7766},\n    {\"time\": 1147564800000, \"value\": 0.7751},\n    {\"time\": 1147651200000, \"value\": 0.7739},\n    {\"time\": 1147737600000, \"value\": 0.7767},\n    {\"time\": 1147824000000, \"value\": 0.7802},\n    {\"time\": 1147910400000, \"value\": 0.7788},\n    {\"time\": 1147996800000, \"value\": 0.7828},\n    {\"time\": 1148083200000, \"value\": 0.7816},\n    {\"time\": 1148169600000, \"value\": 0.7829},\n    {\"time\": 1148256000000, \"value\": 0.783},\n    {\"time\": 1148342400000, \"value\": 0.7829},\n    {\"time\": 1148428800000, \"value\": 0.7781},\n    {\"time\": 1148515200000, \"value\": 0.7811},\n    {\"time\": 1148601600000, \"value\": 0.7831},\n    {\"time\": 1148688000000, \"value\": 0.7826},\n    {\"time\": 1148774400000, \"value\": 0.7855},\n    {\"time\": 1148860800000, \"value\": 0.7855},\n    {\"time\": 1148947200000, \"value\": 0.7845},\n    {\"time\": 1149033600000, \"value\": 0.7798},\n    {\"time\": 1149120000000, \"value\": 0.7777},\n    {\"time\": 1149206400000, \"value\": 0.7822},\n    {\"time\": 1149292800000, \"value\": 0.7785},\n    {\"time\": 1149379200000, \"value\": 0.7744},\n    {\"time\": 1149465600000, \"value\": 0.7743},\n    {\"time\": 1149552000000, \"value\": 0.7726},\n    {\"time\": 1149638400000, \"value\": 0.7766},\n    {\"time\": 1149724800000, \"value\": 0.7806},\n    {\"time\": 1149811200000, \"value\": 0.785},\n    {\"time\": 1149897600000, \"value\": 0.7907},\n    {\"time\": 1149984000000, \"value\": 0.7912},\n    {\"time\": 1150070400000, \"value\": 0.7913},\n    {\"time\": 1150156800000, \"value\": 0.7931},\n    {\"time\": 1150243200000, \"value\": 0.7952},\n    {\"time\": 1150329600000, \"value\": 0.7951},\n    {\"time\": 1150416000000, \"value\": 0.7928},\n    {\"time\": 1150502400000, \"value\": 0.791},\n    {\"time\": 1150588800000, \"value\": 0.7913},\n    {\"time\": 1150675200000, \"value\": 0.7912},\n    {\"time\": 1150761600000, \"value\": 0.7941},\n    {\"time\": 1150848000000, \"value\": 0.7953},\n    {\"time\": 1150934400000, \"value\": 0.7921},\n    {\"time\": 1151020800000, \"value\": 0.7919},\n    {\"time\": 1151107200000, \"value\": 0.7968},\n    {\"time\": 1151193600000, \"value\": 0.7999},\n    {\"time\": 1151280000000, \"value\": 0.7999},\n    {\"time\": 1151366400000, \"value\": 0.7974},\n    {\"time\": 1151452800000, \"value\": 0.7942},\n    {\"time\": 1151539200000, \"value\": 0.796},\n    {\"time\": 1151625600000, \"value\": 0.7969},\n    {\"time\": 1151712000000, \"value\": 0.7862},\n    {\"time\": 1151798400000, \"value\": 0.7821},\n    {\"time\": 1151884800000, \"value\": 0.7821},\n    {\"time\": 1151971200000, \"value\": 0.7821},\n    {\"time\": 1152057600000, \"value\": 0.7811},\n    {\"time\": 1152144000000, \"value\": 0.7833},\n    {\"time\": 1152230400000, \"value\": 0.7849},\n    {\"time\": 1152316800000, \"value\": 0.7819},\n    {\"time\": 1152403200000, \"value\": 0.7809},\n    {\"time\": 1152489600000, \"value\": 0.7809},\n    {\"time\": 1152576000000, \"value\": 0.7827},\n    {\"time\": 1152662400000, \"value\": 0.7848},\n    {\"time\": 1152748800000, \"value\": 0.785},\n    {\"time\": 1152835200000, \"value\": 0.7873},\n    {\"time\": 1152921600000, \"value\": 0.7894},\n    {\"time\": 1153008000000, \"value\": 0.7907},\n    {\"time\": 1153094400000, \"value\": 0.7909},\n    {\"time\": 1153180800000, \"value\": 0.7947},\n    {\"time\": 1153267200000, \"value\": 0.7987},\n    {\"time\": 1153353600000, \"value\": 0.799},\n    {\"time\": 1153440000000, \"value\": 0.7927},\n    {\"time\": 1153526400000, \"value\": 0.79},\n    {\"time\": 1153612800000, \"value\": 0.7878},\n    {\"time\": 1153699200000, \"value\": 0.7878},\n    {\"time\": 1153785600000, \"value\": 0.7907},\n    {\"time\": 1153872000000, \"value\": 0.7922},\n    {\"time\": 1153958400000, \"value\": 0.7937},\n    {\"time\": 1154044800000, \"value\": 0.786},\n    {\"time\": 1154131200000, \"value\": 0.787},\n    {\"time\": 1154217600000, \"value\": 0.7838},\n    {\"time\": 1154304000000, \"value\": 0.7838},\n    {\"time\": 1154390400000, \"value\": 0.7837},\n    {\"time\": 1154476800000, \"value\": 0.7836},\n    {\"time\": 1154563200000, \"value\": 0.7806},\n    {\"time\": 1154649600000, \"value\": 0.7825},\n    {\"time\": 1154736000000, \"value\": 0.7798},\n    {\"time\": 1154822400000, \"value\": 0.777},\n    {\"time\": 1154908800000, \"value\": 0.777},\n    {\"time\": 1154995200000, \"value\": 0.7772},\n    {\"time\": 1155081600000, \"value\": 0.7793},\n    {\"time\": 1155168000000, \"value\": 0.7788},\n    {\"time\": 1155254400000, \"value\": 0.7785},\n    {\"time\": 1155340800000, \"value\": 0.7832},\n    {\"time\": 1155427200000, \"value\": 0.7865},\n    {\"time\": 1155513600000, \"value\": 0.7865},\n    {\"time\": 1155600000000, \"value\": 0.7853},\n    {\"time\": 1155686400000, \"value\": 0.7847},\n    {\"time\": 1155772800000, \"value\": 0.7809},\n    {\"time\": 1155859200000, \"value\": 0.778},\n    {\"time\": 1155945600000, \"value\": 0.7799},\n    {\"time\": 1156032000000, \"value\": 0.78},\n    {\"time\": 1156118400000, \"value\": 0.7801},\n    {\"time\": 1156204800000, \"value\": 0.7765},\n    {\"time\": 1156291200000, \"value\": 0.7785},\n    {\"time\": 1156377600000, \"value\": 0.7811},\n    {\"time\": 1156464000000, \"value\": 0.782},\n    {\"time\": 1156550400000, \"value\": 0.7835},\n    {\"time\": 1156636800000, \"value\": 0.7845},\n    {\"time\": 1156723200000, \"value\": 0.7844},\n    {\"time\": 1156809600000, \"value\": 0.782},\n    {\"time\": 1156896000000, \"value\": 0.7811},\n    {\"time\": 1156982400000, \"value\": 0.7795},\n    {\"time\": 1157068800000, \"value\": 0.7794},\n    {\"time\": 1157155200000, \"value\": 0.7806},\n    {\"time\": 1157241600000, \"value\": 0.7794},\n    {\"time\": 1157328000000, \"value\": 0.7794},\n    {\"time\": 1157414400000, \"value\": 0.7778},\n    {\"time\": 1157500800000, \"value\": 0.7793},\n    {\"time\": 1157587200000, \"value\": 0.7808},\n    {\"time\": 1157673600000, \"value\": 0.7824},\n    {\"time\": 1157760000000, \"value\": 0.787},\n    {\"time\": 1157846400000, \"value\": 0.7894},\n    {\"time\": 1157932800000, \"value\": 0.7893},\n    {\"time\": 1158019200000, \"value\": 0.7882},\n    {\"time\": 1158105600000, \"value\": 0.7871},\n    {\"time\": 1158192000000, \"value\": 0.7882},\n    {\"time\": 1158278400000, \"value\": 0.7871},\n    {\"time\": 1158364800000, \"value\": 0.7878},\n    {\"time\": 1158451200000, \"value\": 0.79},\n    {\"time\": 1158537600000, \"value\": 0.7901},\n    {\"time\": 1158624000000, \"value\": 0.7898},\n    {\"time\": 1158710400000, \"value\": 0.7879},\n    {\"time\": 1158796800000, \"value\": 0.7886},\n    {\"time\": 1158883200000, \"value\": 0.7858},\n    {\"time\": 1158969600000, \"value\": 0.7814},\n    {\"time\": 1159056000000, \"value\": 0.7825},\n    {\"time\": 1159142400000, \"value\": 0.7826},\n    {\"time\": 1159228800000, \"value\": 0.7826},\n    {\"time\": 1159315200000, \"value\": 0.786},\n    {\"time\": 1159401600000, \"value\": 0.7878},\n    {\"time\": 1159488000000, \"value\": 0.7868},\n    {\"time\": 1159574400000, \"value\": 0.7883},\n    {\"time\": 1159660800000, \"value\": 0.7893},\n    {\"time\": 1159747200000, \"value\": 0.7892},\n    {\"time\": 1159833600000, \"value\": 0.7876},\n    {\"time\": 1159920000000, \"value\": 0.785},\n    {\"time\": 1160006400000, \"value\": 0.787},\n    {\"time\": 1160092800000, \"value\": 0.7873},\n    {\"time\": 1160179200000, \"value\": 0.7901},\n    {\"time\": 1160265600000, \"value\": 0.7936},\n    {\"time\": 1160352000000, \"value\": 0.7939},\n    {\"time\": 1160438400000, \"value\": 0.7938},\n    {\"time\": 1160524800000, \"value\": 0.7956},\n    {\"time\": 1160611200000, \"value\": 0.7975},\n    {\"time\": 1160697600000, \"value\": 0.7978},\n    {\"time\": 1160784000000, \"value\": 0.7972},\n    {\"time\": 1160870400000, \"value\": 0.7995},\n    {\"time\": 1160956800000, \"value\": 0.7995},\n    {\"time\": 1161043200000, \"value\": 0.7994},\n    {\"time\": 1161129600000, \"value\": 0.7976},\n    {\"time\": 1161216000000, \"value\": 0.7977},\n    {\"time\": 1161302400000, \"value\": 0.796},\n    {\"time\": 1161388800000, \"value\": 0.7922},\n    {\"time\": 1161475200000, \"value\": 0.7928},\n    {\"time\": 1161561600000, \"value\": 0.7929},\n    {\"time\": 1161648000000, \"value\": 0.7948},\n    {\"time\": 1161734400000, \"value\": 0.797},\n    {\"time\": 1161820800000, \"value\": 0.7953},\n    {\"time\": 1161907200000, \"value\": 0.7907},\n    {\"time\": 1161993600000, \"value\": 0.7872},\n    {\"time\": 1162080000000, \"value\": 0.7852},\n    {\"time\": 1162166400000, \"value\": 0.7852},\n    {\"time\": 1162252800000, \"value\": 0.786},\n    {\"time\": 1162339200000, \"value\": 0.7862},\n    {\"time\": 1162425600000, \"value\": 0.7836},\n    {\"time\": 1162512000000, \"value\": 0.7837},\n    {\"time\": 1162598400000, \"value\": 0.784},\n    {\"time\": 1162684800000, \"value\": 0.7867},\n    {\"time\": 1162771200000, \"value\": 0.7867},\n    {\"time\": 1162857600000, \"value\": 0.7869},\n    {\"time\": 1162944000000, \"value\": 0.7837},\n    {\"time\": 1163030400000, \"value\": 0.7827},\n    {\"time\": 1163116800000, \"value\": 0.7825},\n    {\"time\": 1163203200000, \"value\": 0.7779},\n    {\"time\": 1163289600000, \"value\": 0.7791},\n    {\"time\": 1163376000000, \"value\": 0.779},\n    {\"time\": 1163462400000, \"value\": 0.7787},\n    {\"time\": 1163548800000, \"value\": 0.78},\n    {\"time\": 1163635200000, \"value\": 0.7807},\n    {\"time\": 1163721600000, \"value\": 0.7803},\n    {\"time\": 1163808000000, \"value\": 0.7817},\n    {\"time\": 1163894400000, \"value\": 0.7799},\n    {\"time\": 1163980800000, \"value\": 0.7799},\n    {\"time\": 1164067200000, \"value\": 0.7795},\n    {\"time\": 1164153600000, \"value\": 0.7801},\n    {\"time\": 1164240000000, \"value\": 0.7765},\n    {\"time\": 1164326400000, \"value\": 0.7725},\n    {\"time\": 1164412800000, \"value\": 0.7683},\n    {\"time\": 1164499200000, \"value\": 0.7641},\n    {\"time\": 1164585600000, \"value\": 0.7639},\n    {\"time\": 1164672000000, \"value\": 0.7616},\n    {\"time\": 1164758400000, \"value\": 0.7608},\n    {\"time\": 1164844800000, \"value\": 0.759},\n    {\"time\": 1164931200000, \"value\": 0.7582},\n    {\"time\": 1165017600000, \"value\": 0.7539},\n    {\"time\": 1165104000000, \"value\": 0.75},\n    {\"time\": 1165190400000, \"value\": 0.75},\n    {\"time\": 1165276800000, \"value\": 0.7507},\n    {\"time\": 1165363200000, \"value\": 0.7505},\n    {\"time\": 1165449600000, \"value\": 0.7516},\n    {\"time\": 1165536000000, \"value\": 0.7522},\n    {\"time\": 1165622400000, \"value\": 0.7531},\n    {\"time\": 1165708800000, \"value\": 0.7577},\n    {\"time\": 1165795200000, \"value\": 0.7577},\n    {\"time\": 1165881600000, \"value\": 0.7582},\n    {\"time\": 1165968000000, \"value\": 0.755},\n    {\"time\": 1166054400000, \"value\": 0.7542},\n    {\"time\": 1166140800000, \"value\": 0.7576},\n    {\"time\": 1166227200000, \"value\": 0.7616},\n    {\"time\": 1166313600000, \"value\": 0.7648},\n    {\"time\": 1166400000000, \"value\": 0.7648},\n    {\"time\": 1166486400000, \"value\": 0.7641},\n    {\"time\": 1166572800000, \"value\": 0.7614},\n    {\"time\": 1166659200000, \"value\": 0.757},\n    {\"time\": 1166745600000, \"value\": 0.7587},\n    {\"time\": 1166832000000, \"value\": 0.7588},\n    {\"time\": 1166918400000, \"value\": 0.762},\n    {\"time\": 1167004800000, \"value\": 0.762},\n    {\"time\": 1167091200000, \"value\": 0.7617},\n    {\"time\": 1167177600000, \"value\": 0.7618},\n    {\"time\": 1167264000000, \"value\": 0.7615},\n    {\"time\": 1167350400000, \"value\": 0.7612},\n    {\"time\": 1167436800000, \"value\": 0.7596},\n    {\"time\": 1167523200000, \"value\": 0.758},\n    {\"time\": 1167609600000, \"value\": 0.758},\n    {\"time\": 1167696000000, \"value\": 0.758},\n    {\"time\": 1167782400000, \"value\": 0.7547},\n    {\"time\": 1167868800000, \"value\": 0.7549},\n    {\"time\": 1167955200000, \"value\": 0.7613},\n    {\"time\": 1168041600000, \"value\": 0.7655},\n    {\"time\": 1168128000000, \"value\": 0.7693},\n    {\"time\": 1168214400000, \"value\": 0.7694},\n    {\"time\": 1168300800000, \"value\": 0.7688},\n    {\"time\": 1168387200000, \"value\": 0.7678},\n    {\"time\": 1168473600000, \"value\": 0.7708},\n    {\"time\": 1168560000000, \"value\": 0.7727},\n    {\"time\": 1168646400000, \"value\": 0.7749},\n    {\"time\": 1168732800000, \"value\": 0.7741},\n    {\"time\": 1168819200000, \"value\": 0.7741},\n    {\"time\": 1168905600000, \"value\": 0.7732},\n    {\"time\": 1168992000000, \"value\": 0.7727},\n    {\"time\": 1169078400000, \"value\": 0.7737},\n    {\"time\": 1169164800000, \"value\": 0.7724},\n    {\"time\": 1169251200000, \"value\": 0.7712},\n    {\"time\": 1169337600000, \"value\": 0.772},\n    {\"time\": 1169424000000, \"value\": 0.7721},\n    {\"time\": 1169510400000, \"value\": 0.7717},\n    {\"time\": 1169596800000, \"value\": 0.7704},\n    {\"time\": 1169683200000, \"value\": 0.769},\n    {\"time\": 1169769600000, \"value\": 0.7711},\n    {\"time\": 1169856000000, \"value\": 0.774},\n    {\"time\": 1169942400000, \"value\": 0.7745},\n    {\"time\": 1170028800000, \"value\": 0.7745},\n    {\"time\": 1170115200000, \"value\": 0.774},\n    {\"time\": 1170201600000, \"value\": 0.7716},\n    {\"time\": 1170288000000, \"value\": 0.7713},\n    {\"time\": 1170374400000, \"value\": 0.7678},\n    {\"time\": 1170460800000, \"value\": 0.7688},\n    {\"time\": 1170547200000, \"value\": 0.7718},\n    {\"time\": 1170633600000, \"value\": 0.7718},\n    {\"time\": 1170720000000, \"value\": 0.7728},\n    {\"time\": 1170806400000, \"value\": 0.7729},\n    {\"time\": 1170892800000, \"value\": 0.7698},\n    {\"time\": 1170979200000, \"value\": 0.7685},\n    {\"time\": 1171065600000, \"value\": 0.7681},\n    {\"time\": 1171152000000, \"value\": 0.769},\n    {\"time\": 1171238400000, \"value\": 0.769},\n    {\"time\": 1171324800000, \"value\": 0.7698},\n    {\"time\": 1171411200000, \"value\": 0.7699},\n    {\"time\": 1171497600000, \"value\": 0.7651},\n    {\"time\": 1171584000000, \"value\": 0.7613},\n    {\"time\": 1171670400000, \"value\": 0.7616},\n    {\"time\": 1171756800000, \"value\": 0.7614},\n    {\"time\": 1171843200000, \"value\": 0.7614},\n    {\"time\": 1171929600000, \"value\": 0.7607},\n    {\"time\": 1172016000000, \"value\": 0.7602},\n    {\"time\": 1172102400000, \"value\": 0.7611},\n    {\"time\": 1172188800000, \"value\": 0.7622},\n    {\"time\": 1172275200000, \"value\": 0.7615},\n    {\"time\": 1172361600000, \"value\": 0.7598},\n    {\"time\": 1172448000000, \"value\": 0.7598},\n    {\"time\": 1172534400000, \"value\": 0.7592},\n    {\"time\": 1172620800000, \"value\": 0.7573},\n    {\"time\": 1172707200000, \"value\": 0.7566},\n    {\"time\": 1172793600000, \"value\": 0.7567},\n    {\"time\": 1172880000000, \"value\": 0.7591},\n    {\"time\": 1172966400000, \"value\": 0.7582},\n    {\"time\": 1173052800000, \"value\": 0.7585},\n    {\"time\": 1173139200000, \"value\": 0.7613},\n    {\"time\": 1173225600000, \"value\": 0.7631},\n    {\"time\": 1173312000000, \"value\": 0.7615},\n    {\"time\": 1173398400000, \"value\": 0.76},\n    {\"time\": 1173484800000, \"value\": 0.7613},\n    {\"time\": 1173571200000, \"value\": 0.7627},\n    {\"time\": 1173657600000, \"value\": 0.7627},\n    {\"time\": 1173744000000, \"value\": 0.7608},\n    {\"time\": 1173830400000, \"value\": 0.7583},\n    {\"time\": 1173916800000, \"value\": 0.7575},\n    {\"time\": 1174003200000, \"value\": 0.7562},\n    {\"time\": 1174089600000, \"value\": 0.752},\n    {\"time\": 1174176000000, \"value\": 0.7512},\n    {\"time\": 1174262400000, \"value\": 0.7512},\n    {\"time\": 1174348800000, \"value\": 0.7517},\n    {\"time\": 1174435200000, \"value\": 0.752},\n    {\"time\": 1174521600000, \"value\": 0.7511},\n    {\"time\": 1174608000000, \"value\": 0.748},\n    {\"time\": 1174694400000, \"value\": 0.7509},\n    {\"time\": 1174780800000, \"value\": 0.7531},\n    {\"time\": 1174867200000, \"value\": 0.7531},\n    {\"time\": 1174953600000, \"value\": 0.7527},\n    {\"time\": 1175040000000, \"value\": 0.7498},\n    {\"time\": 1175126400000, \"value\": 0.7493},\n    {\"time\": 1175212800000, \"value\": 0.7504},\n    {\"time\": 1175299200000, \"value\": 0.75},\n    {\"time\": 1175385600000, \"value\": 0.7491},\n    {\"time\": 1175472000000, \"value\": 0.7491},\n    {\"time\": 1175558400000, \"value\": 0.7485},\n    {\"time\": 1175644800000, \"value\": 0.7484},\n    {\"time\": 1175731200000, \"value\": 0.7492},\n    {\"time\": 1175817600000, \"value\": 0.7471},\n    {\"time\": 1175904000000, \"value\": 0.7459},\n    {\"time\": 1175990400000, \"value\": 0.7477},\n    {\"time\": 1176076800000, \"value\": 0.7477},\n    {\"time\": 1176163200000, \"value\": 0.7483},\n    {\"time\": 1176249600000, \"value\": 0.7458},\n    {\"time\": 1176336000000, \"value\": 0.7448},\n    {\"time\": 1176422400000, \"value\": 0.743},\n    {\"time\": 1176508800000, \"value\": 0.7399},\n    {\"time\": 1176595200000, \"value\": 0.7395},\n    {\"time\": 1176681600000, \"value\": 0.7395},\n    {\"time\": 1176768000000, \"value\": 0.7378},\n    {\"time\": 1176854400000, \"value\": 0.7382},\n    {\"time\": 1176940800000, \"value\": 0.7362},\n    {\"time\": 1177027200000, \"value\": 0.7355},\n    {\"time\": 1177113600000, \"value\": 0.7348},\n    {\"time\": 1177200000000, \"value\": 0.7361},\n    {\"time\": 1177286400000, \"value\": 0.7361},\n    {\"time\": 1177372800000, \"value\": 0.7365},\n    {\"time\": 1177459200000, \"value\": 0.7362},\n    {\"time\": 1177545600000, \"value\": 0.7331},\n    {\"time\": 1177632000000, \"value\": 0.7339},\n    {\"time\": 1177718400000, \"value\": 0.7344},\n    {\"time\": 1177804800000, \"value\": 0.7327},\n    {\"time\": 1177891200000, \"value\": 0.7327},\n    {\"time\": 1177977600000, \"value\": 0.7336},\n    {\"time\": 1178064000000, \"value\": 0.7333},\n    {\"time\": 1178150400000, \"value\": 0.7359},\n    {\"time\": 1178236800000, \"value\": 0.7359},\n    {\"time\": 1178323200000, \"value\": 0.7372},\n    {\"time\": 1178409600000, \"value\": 0.736},\n    {\"time\": 1178496000000, \"value\": 0.736},\n    {\"time\": 1178582400000, \"value\": 0.735},\n    {\"time\": 1178668800000, \"value\": 0.7365},\n    {\"time\": 1178755200000, \"value\": 0.7384},\n    {\"time\": 1178841600000, \"value\": 0.7395},\n    {\"time\": 1178928000000, \"value\": 0.7413},\n    {\"time\": 1179014400000, \"value\": 0.7397},\n    {\"time\": 1179100800000, \"value\": 0.7396},\n    {\"time\": 1179187200000, \"value\": 0.7385},\n    {\"time\": 1179273600000, \"value\": 0.7378},\n    {\"time\": 1179360000000, \"value\": 0.7366},\n    {\"time\": 1179446400000, \"value\": 0.74},\n    {\"time\": 1179532800000, \"value\": 0.7411},\n    {\"time\": 1179619200000, \"value\": 0.7406},\n    {\"time\": 1179705600000, \"value\": 0.7405},\n    {\"time\": 1179792000000, \"value\": 0.7414},\n    {\"time\": 1179878400000, \"value\": 0.7431},\n    {\"time\": 1179964800000, \"value\": 0.7431},\n    {\"time\": 1180051200000, \"value\": 0.7438},\n    {\"time\": 1180137600000, \"value\": 0.7443},\n    {\"time\": 1180224000000, \"value\": 0.7443},\n    {\"time\": 1180310400000, \"value\": 0.7443},\n    {\"time\": 1180396800000, \"value\": 0.7434},\n    {\"time\": 1180483200000, \"value\": 0.7429},\n    {\"time\": 1180569600000, \"value\": 0.7442},\n    {\"time\": 1180656000000, \"value\": 0.744},\n    {\"time\": 1180742400000, \"value\": 0.7439},\n    {\"time\": 1180828800000, \"value\": 0.7437},\n    {\"time\": 1180915200000, \"value\": 0.7437},\n    {\"time\": 1181001600000, \"value\": 0.7429},\n    {\"time\": 1181088000000, \"value\": 0.7403},\n    {\"time\": 1181174400000, \"value\": 0.7399},\n    {\"time\": 1181260800000, \"value\": 0.7418},\n    {\"time\": 1181347200000, \"value\": 0.7468},\n    {\"time\": 1181433600000, \"value\": 0.748},\n    {\"time\": 1181520000000, \"value\": 0.748},\n    {\"time\": 1181606400000, \"value\": 0.749},\n    {\"time\": 1181692800000, \"value\": 0.7494},\n    {\"time\": 1181779200000, \"value\": 0.7522},\n    {\"time\": 1181865600000, \"value\": 0.7515},\n    {\"time\": 1181952000000, \"value\": 0.7502},\n    {\"time\": 1182038400000, \"value\": 0.7472},\n    {\"time\": 1182124800000, \"value\": 0.7472},\n    {\"time\": 1182211200000, \"value\": 0.7462},\n    {\"time\": 1182297600000, \"value\": 0.7455},\n    {\"time\": 1182384000000, \"value\": 0.7449},\n    {\"time\": 1182470400000, \"value\": 0.7467},\n    {\"time\": 1182556800000, \"value\": 0.7458},\n    {\"time\": 1182643200000, \"value\": 0.7427},\n    {\"time\": 1182729600000, \"value\": 0.7427},\n    {\"time\": 1182816000000, \"value\": 0.743},\n    {\"time\": 1182902400000, \"value\": 0.7429},\n    {\"time\": 1182988800000, \"value\": 0.744},\n    {\"time\": 1183075200000, \"value\": 0.743},\n    {\"time\": 1183161600000, \"value\": 0.7422},\n    {\"time\": 1183248000000, \"value\": 0.7388},\n    {\"time\": 1183334400000, \"value\": 0.7388},\n    {\"time\": 1183420800000, \"value\": 0.7369},\n    {\"time\": 1183507200000, \"value\": 0.7345},\n    {\"time\": 1183593600000, \"value\": 0.7345},\n    {\"time\": 1183680000000, \"value\": 0.7345},\n    {\"time\": 1183766400000, \"value\": 0.7352},\n    {\"time\": 1183852800000, \"value\": 0.7341},\n    {\"time\": 1183939200000, \"value\": 0.7341},\n    {\"time\": 1184025600000, \"value\": 0.734},\n    {\"time\": 1184112000000, \"value\": 0.7324},\n    {\"time\": 1184198400000, \"value\": 0.7272},\n    {\"time\": 1184284800000, \"value\": 0.7264},\n    {\"time\": 1184371200000, \"value\": 0.7255},\n    {\"time\": 1184457600000, \"value\": 0.7258},\n    {\"time\": 1184544000000, \"value\": 0.7258},\n    {\"time\": 1184630400000, \"value\": 0.7256},\n    {\"time\": 1184716800000, \"value\": 0.7257},\n    {\"time\": 1184803200000, \"value\": 0.7247},\n    {\"time\": 1184889600000, \"value\": 0.7243},\n    {\"time\": 1184976000000, \"value\": 0.7244},\n    {\"time\": 1185062400000, \"value\": 0.7235},\n    {\"time\": 1185148800000, \"value\": 0.7235},\n    {\"time\": 1185235200000, \"value\": 0.7235},\n    {\"time\": 1185321600000, \"value\": 0.7235},\n    {\"time\": 1185408000000, \"value\": 0.7262},\n    {\"time\": 1185494400000, \"value\": 0.7288},\n    {\"time\": 1185580800000, \"value\": 0.7301},\n    {\"time\": 1185667200000, \"value\": 0.7337},\n    {\"time\": 1185753600000, \"value\": 0.7337},\n    {\"time\": 1185840000000, \"value\": 0.7324},\n    {\"time\": 1185926400000, \"value\": 0.7297},\n    {\"time\": 1186012800000, \"value\": 0.7317},\n    {\"time\": 1186099200000, \"value\": 0.7315},\n    {\"time\": 1186185600000, \"value\": 0.7288},\n    {\"time\": 1186272000000, \"value\": 0.7263},\n    {\"time\": 1186358400000, \"value\": 0.7263},\n    {\"time\": 1186444800000, \"value\": 0.7242},\n    {\"time\": 1186531200000, \"value\": 0.7253},\n    {\"time\": 1186617600000, \"value\": 0.7264},\n    {\"time\": 1186704000000, \"value\": 0.727},\n    {\"time\": 1186790400000, \"value\": 0.7312},\n    {\"time\": 1186876800000, \"value\": 0.7305},\n    {\"time\": 1186963200000, \"value\": 0.7305},\n    {\"time\": 1187049600000, \"value\": 0.7318},\n    {\"time\": 1187136000000, \"value\": 0.7358},\n    {\"time\": 1187222400000, \"value\": 0.7409},\n    {\"time\": 1187308800000, \"value\": 0.7454},\n    {\"time\": 1187395200000, \"value\": 0.7437},\n    {\"time\": 1187481600000, \"value\": 0.7424},\n    {\"time\": 1187568000000, \"value\": 0.7424},\n    {\"time\": 1187654400000, \"value\": 0.7415},\n    {\"time\": 1187740800000, \"value\": 0.7419},\n    {\"time\": 1187827200000, \"value\": 0.7414},\n    {\"time\": 1187913600000, \"value\": 0.7377},\n    {\"time\": 1188000000000, \"value\": 0.7355},\n    {\"time\": 1188086400000, \"value\": 0.7315},\n    {\"time\": 1188172800000, \"value\": 0.7315},\n    {\"time\": 1188259200000, \"value\": 0.732},\n    {\"time\": 1188345600000, \"value\": 0.7332},\n    {\"time\": 1188432000000, \"value\": 0.7346},\n    {\"time\": 1188518400000, \"value\": 0.7328},\n    {\"time\": 1188604800000, \"value\": 0.7323},\n    {\"time\": 1188691200000, \"value\": 0.734},\n    {\"time\": 1188777600000, \"value\": 0.734},\n    {\"time\": 1188864000000, \"value\": 0.7336},\n    {\"time\": 1188950400000, \"value\": 0.7351},\n    {\"time\": 1189036800000, \"value\": 0.7346},\n    {\"time\": 1189123200000, \"value\": 0.7321},\n    {\"time\": 1189209600000, \"value\": 0.7294},\n    {\"time\": 1189296000000, \"value\": 0.7266},\n    {\"time\": 1189382400000, \"value\": 0.7266},\n    {\"time\": 1189468800000, \"value\": 0.7254},\n    {\"time\": 1189555200000, \"value\": 0.7242},\n    {\"time\": 1189641600000, \"value\": 0.7213},\n    {\"time\": 1189728000000, \"value\": 0.7197},\n    {\"time\": 1189814400000, \"value\": 0.7209},\n    {\"time\": 1189900800000, \"value\": 0.721},\n    {\"time\": 1189987200000, \"value\": 0.721},\n    {\"time\": 1190073600000, \"value\": 0.721},\n    {\"time\": 1190160000000, \"value\": 0.7209},\n    {\"time\": 1190246400000, \"value\": 0.7159},\n    {\"time\": 1190332800000, \"value\": 0.7133},\n    {\"time\": 1190419200000, \"value\": 0.7105},\n    {\"time\": 1190505600000, \"value\": 0.7099},\n    {\"time\": 1190592000000, \"value\": 0.7099},\n    {\"time\": 1190678400000, \"value\": 0.7093},\n    {\"time\": 1190764800000, \"value\": 0.7093},\n    {\"time\": 1190851200000, \"value\": 0.7076},\n    {\"time\": 1190937600000, \"value\": 0.707},\n    {\"time\": 1191024000000, \"value\": 0.7049},\n    {\"time\": 1191110400000, \"value\": 0.7012},\n    {\"time\": 1191196800000, \"value\": 0.7011},\n    {\"time\": 1191283200000, \"value\": 0.7019},\n    {\"time\": 1191369600000, \"value\": 0.7046},\n    {\"time\": 1191456000000, \"value\": 0.7063},\n    {\"time\": 1191542400000, \"value\": 0.7089},\n    {\"time\": 1191628800000, \"value\": 0.7077},\n    {\"time\": 1191715200000, \"value\": 0.7077},\n    {\"time\": 1191801600000, \"value\": 0.7077},\n    {\"time\": 1191888000000, \"value\": 0.7091},\n    {\"time\": 1191974400000, \"value\": 0.7118},\n    {\"time\": 1192060800000, \"value\": 0.7079},\n    {\"time\": 1192147200000, \"value\": 0.7053},\n    {\"time\": 1192233600000, \"value\": 0.705},\n    {\"time\": 1192320000000, \"value\": 0.7055},\n    {\"time\": 1192406400000, \"value\": 0.7055},\n    {\"time\": 1192492800000, \"value\": 0.7045},\n    {\"time\": 1192579200000, \"value\": 0.7051},\n    {\"time\": 1192665600000, \"value\": 0.7051},\n    {\"time\": 1192752000000, \"value\": 0.7017},\n    {\"time\": 1192838400000, \"value\": 0.7},\n    {\"time\": 1192924800000, \"value\": 0.6995},\n    {\"time\": 1193011200000, \"value\": 0.6994},\n    {\"time\": 1193097600000, \"value\": 0.7014},\n    {\"time\": 1193184000000, \"value\": 0.7036},\n    {\"time\": 1193270400000, \"value\": 0.7021},\n    {\"time\": 1193356800000, \"value\": 0.7002},\n    {\"time\": 1193443200000, \"value\": 0.6967},\n    {\"time\": 1193529600000, \"value\": 0.695},\n    {\"time\": 1193616000000, \"value\": 0.695},\n    {\"time\": 1193702400000, \"value\": 0.6939},\n    {\"time\": 1193788800000, \"value\": 0.694},\n    {\"time\": 1193875200000, \"value\": 0.6922},\n    {\"time\": 1193961600000, \"value\": 0.6919},\n    {\"time\": 1194048000000, \"value\": 0.6914},\n    {\"time\": 1194134400000, \"value\": 0.6894},\n    {\"time\": 1194220800000, \"value\": 0.6891},\n    {\"time\": 1194307200000, \"value\": 0.6904},\n    {\"time\": 1194393600000, \"value\": 0.689},\n    {\"time\": 1194480000000, \"value\": 0.6834},\n    {\"time\": 1194566400000, \"value\": 0.6823},\n    {\"time\": 1194652800000, \"value\": 0.6807},\n    {\"time\": 1194739200000, \"value\": 0.6815},\n    {\"time\": 1194825600000, \"value\": 0.6815},\n    {\"time\": 1194912000000, \"value\": 0.6847},\n    {\"time\": 1194998400000, \"value\": 0.6859},\n    {\"time\": 1195084800000, \"value\": 0.6822},\n    {\"time\": 1195171200000, \"value\": 0.6827},\n    {\"time\": 1195257600000, \"value\": 0.6837},\n    {\"time\": 1195344000000, \"value\": 0.6823},\n    {\"time\": 1195430400000, \"value\": 0.6822},\n    {\"time\": 1195516800000, \"value\": 0.6822},\n    {\"time\": 1195603200000, \"value\": 0.6792},\n    {\"time\": 1195689600000, \"value\": 0.6746},\n    {\"time\": 1195776000000, \"value\": 0.6735},\n    {\"time\": 1195862400000, \"value\": 0.6731},\n    {\"time\": 1195948800000, \"value\": 0.6742},\n    {\"time\": 1196035200000, \"value\": 0.6744},\n    {\"time\": 1196121600000, \"value\": 0.6739},\n    {\"time\": 1196208000000, \"value\": 0.6731},\n    {\"time\": 1196294400000, \"value\": 0.6761},\n    {\"time\": 1196380800000, \"value\": 0.6761},\n    {\"time\": 1196467200000, \"value\": 0.6785},\n    {\"time\": 1196553600000, \"value\": 0.6818},\n    {\"time\": 1196640000000, \"value\": 0.6836},\n    {\"time\": 1196726400000, \"value\": 0.6823},\n    {\"time\": 1196812800000, \"value\": 0.6805},\n    {\"time\": 1196899200000, \"value\": 0.6793},\n    {\"time\": 1196985600000, \"value\": 0.6849},\n    {\"time\": 1197072000000, \"value\": 0.6833},\n    {\"time\": 1197158400000, \"value\": 0.6825},\n    {\"time\": 1197244800000, \"value\": 0.6825},\n    {\"time\": 1197331200000, \"value\": 0.6816},\n    {\"time\": 1197417600000, \"value\": 0.6799},\n    {\"time\": 1197504000000, \"value\": 0.6813},\n    {\"time\": 1197590400000, \"value\": 0.6809},\n    {\"time\": 1197676800000, \"value\": 0.6868},\n    {\"time\": 1197763200000, \"value\": 0.6933},\n    {\"time\": 1197849600000, \"value\": 0.6933},\n    {\"time\": 1197936000000, \"value\": 0.6945},\n    {\"time\": 1198022400000, \"value\": 0.6944},\n    {\"time\": 1198108800000, \"value\": 0.6946},\n    {\"time\": 1198195200000, \"value\": 0.6964},\n    {\"time\": 1198281600000, \"value\": 0.6965},\n    {\"time\": 1198368000000, \"value\": 0.6956},\n    {\"time\": 1198454400000, \"value\": 0.6956},\n    {\"time\": 1198540800000, \"value\": 0.695},\n    {\"time\": 1198627200000, \"value\": 0.6948},\n    {\"time\": 1198713600000, \"value\": 0.6928},\n    {\"time\": 1198800000000, \"value\": 0.6887},\n    {\"time\": 1198886400000, \"value\": 0.6824},\n    {\"time\": 1198972800000, \"value\": 0.6794},\n    {\"time\": 1199059200000, \"value\": 0.6794},\n    {\"time\": 1199145600000, \"value\": 0.6803},\n    {\"time\": 1199232000000, \"value\": 0.6855},\n    {\"time\": 1199318400000, \"value\": 0.6824},\n    {\"time\": 1199404800000, \"value\": 0.6791},\n    {\"time\": 1199491200000, \"value\": 0.6783},\n    {\"time\": 1199577600000, \"value\": 0.6785},\n    {\"time\": 1199664000000, \"value\": 0.6785},\n    {\"time\": 1199750400000, \"value\": 0.6797},\n    {\"time\": 1199836800000, \"value\": 0.68},\n    {\"time\": 1199923200000, \"value\": 0.6803},\n    {\"time\": 1200009600000, \"value\": 0.6805},\n    {\"time\": 1200096000000, \"value\": 0.676},\n    {\"time\": 1200182400000, \"value\": 0.677},\n    {\"time\": 1200268800000, \"value\": 0.677},\n    {\"time\": 1200355200000, \"value\": 0.6736},\n    {\"time\": 1200441600000, \"value\": 0.6726},\n    {\"time\": 1200528000000, \"value\": 0.6764},\n    {\"time\": 1200614400000, \"value\": 0.6821},\n    {\"time\": 1200700800000, \"value\": 0.6831},\n    {\"time\": 1200787200000, \"value\": 0.6842},\n    {\"time\": 1200873600000, \"value\": 0.6842},\n    {\"time\": 1200960000000, \"value\": 0.6887},\n    {\"time\": 1201046400000, \"value\": 0.6903},\n    {\"time\": 1201132800000, \"value\": 0.6848},\n    {\"time\": 1201219200000, \"value\": 0.6824},\n    {\"time\": 1201305600000, \"value\": 0.6788},\n    {\"time\": 1201392000000, \"value\": 0.6814},\n    {\"time\": 1201478400000, \"value\": 0.6814},\n    {\"time\": 1201564800000, \"value\": 0.6797},\n    {\"time\": 1201651200000, \"value\": 0.6769},\n    {\"time\": 1201737600000, \"value\": 0.6765},\n    {\"time\": 1201824000000, \"value\": 0.6733},\n    {\"time\": 1201910400000, \"value\": 0.6729},\n    {\"time\": 1201996800000, \"value\": 0.6758},\n    {\"time\": 1202083200000, \"value\": 0.6758},\n    {\"time\": 1202169600000, \"value\": 0.675},\n    {\"time\": 1202256000000, \"value\": 0.678},\n    {\"time\": 1202342400000, \"value\": 0.6833},\n    {\"time\": 1202428800000, \"value\": 0.6856},\n    {\"time\": 1202515200000, \"value\": 0.6903},\n    {\"time\": 1202601600000, \"value\": 0.6896},\n    {\"time\": 1202688000000, \"value\": 0.6896},\n    {\"time\": 1202774400000, \"value\": 0.6882},\n    {\"time\": 1202860800000, \"value\": 0.6879},\n    {\"time\": 1202947200000, \"value\": 0.6862},\n    {\"time\": 1203033600000, \"value\": 0.6852},\n    {\"time\": 1203120000000, \"value\": 0.6823},\n    {\"time\": 1203206400000, \"value\": 0.6813},\n    {\"time\": 1203292800000, \"value\": 0.6813},\n    {\"time\": 1203379200000, \"value\": 0.6822},\n    {\"time\": 1203465600000, \"value\": 0.6802},\n    {\"time\": 1203552000000, \"value\": 0.6802},\n    {\"time\": 1203638400000, \"value\": 0.6784},\n    {\"time\": 1203724800000, \"value\": 0.6748},\n    {\"time\": 1203811200000, \"value\": 0.6747},\n    {\"time\": 1203897600000, \"value\": 0.6747},\n    {\"time\": 1203984000000, \"value\": 0.6748},\n    {\"time\": 1204070400000, \"value\": 0.6733},\n    {\"time\": 1204156800000, \"value\": 0.665},\n    {\"time\": 1204243200000, \"value\": 0.6611},\n    {\"time\": 1204329600000, \"value\": 0.6583},\n    {\"time\": 1204416000000, \"value\": 0.659},\n    {\"time\": 1204502400000, \"value\": 0.659},\n    {\"time\": 1204588800000, \"value\": 0.6581},\n    {\"time\": 1204675200000, \"value\": 0.6578},\n    {\"time\": 1204761600000, \"value\": 0.6574},\n    {\"time\": 1204848000000, \"value\": 0.6532},\n    {\"time\": 1204934400000, \"value\": 0.6502},\n    {\"time\": 1205020800000, \"value\": 0.6514},\n    {\"time\": 1205107200000, \"value\": 0.6514},\n    {\"time\": 1205193600000, \"value\": 0.6507},\n    {\"time\": 1205280000000, \"value\": 0.651},\n    {\"time\": 1205366400000, \"value\": 0.6489},\n    {\"time\": 1205452800000, \"value\": 0.6424},\n    {\"time\": 1205539200000, \"value\": 0.6406},\n    {\"time\": 1205625600000, \"value\": 0.6382},\n    {\"time\": 1205712000000, \"value\": 0.6382},\n    {\"time\": 1205798400000, \"value\": 0.6341},\n    {\"time\": 1205884800000, \"value\": 0.6344},\n    {\"time\": 1205971200000, \"value\": 0.6378},\n    {\"time\": 1206057600000, \"value\": 0.6439},\n    {\"time\": 1206144000000, \"value\": 0.6478},\n    {\"time\": 1206230400000, \"value\": 0.6481},\n    {\"time\": 1206316800000, \"value\": 0.6481},\n    {\"time\": 1206403200000, \"value\": 0.6494},\n    {\"time\": 1206489600000, \"value\": 0.6438},\n    {\"time\": 1206576000000, \"value\": 0.6377},\n    {\"time\": 1206662400000, \"value\": 0.6329},\n    {\"time\": 1206748800000, \"value\": 0.6336},\n    {\"time\": 1206835200000, \"value\": 0.6333},\n    {\"time\": 1206921600000, \"value\": 0.6333},\n    {\"time\": 1207008000000, \"value\": 0.633},\n    {\"time\": 1207094400000, \"value\": 0.6371},\n    {\"time\": 1207180800000, \"value\": 0.6403},\n    {\"time\": 1207267200000, \"value\": 0.6396},\n    {\"time\": 1207353600000, \"value\": 0.6364},\n    {\"time\": 1207440000000, \"value\": 0.6356},\n    {\"time\": 1207526400000, \"value\": 0.6356},\n    {\"time\": 1207612800000, \"value\": 0.6368},\n    {\"time\": 1207699200000, \"value\": 0.6357},\n    {\"time\": 1207785600000, \"value\": 0.6354},\n    {\"time\": 1207872000000, \"value\": 0.632},\n    {\"time\": 1207958400000, \"value\": 0.6332},\n    {\"time\": 1208044800000, \"value\": 0.6328},\n    {\"time\": 1208131200000, \"value\": 0.6331},\n    {\"time\": 1208217600000, \"value\": 0.6342},\n    {\"time\": 1208304000000, \"value\": 0.6321},\n    {\"time\": 1208390400000, \"value\": 0.6302},\n    {\"time\": 1208476800000, \"value\": 0.6278},\n    {\"time\": 1208563200000, \"value\": 0.6308},\n    {\"time\": 1208649600000, \"value\": 0.6324},\n    {\"time\": 1208736000000, \"value\": 0.6324},\n    {\"time\": 1208822400000, \"value\": 0.6307},\n    {\"time\": 1208908800000, \"value\": 0.6277},\n    {\"time\": 1208995200000, \"value\": 0.6269},\n    {\"time\": 1209081600000, \"value\": 0.6335},\n    {\"time\": 1209168000000, \"value\": 0.6392},\n    {\"time\": 1209254400000, \"value\": 0.64},\n    {\"time\": 1209340800000, \"value\": 0.6401},\n    {\"time\": 1209427200000, \"value\": 0.6396},\n    {\"time\": 1209513600000, \"value\": 0.6407},\n    {\"time\": 1209600000000, \"value\": 0.6423},\n    {\"time\": 1209686400000, \"value\": 0.6429},\n    {\"time\": 1209772800000, \"value\": 0.6472},\n    {\"time\": 1209859200000, \"value\": 0.6485},\n    {\"time\": 1209945600000, \"value\": 0.6486},\n    {\"time\": 1210032000000, \"value\": 0.6467},\n    {\"time\": 1210118400000, \"value\": 0.6444},\n    {\"time\": 1210204800000, \"value\": 0.6467},\n    {\"time\": 1210291200000, \"value\": 0.6509},\n    {\"time\": 1210377600000, \"value\": 0.6478},\n    {\"time\": 1210464000000, \"value\": 0.6461},\n    {\"time\": 1210550400000, \"value\": 0.6461},\n    {\"time\": 1210636800000, \"value\": 0.6468},\n    {\"time\": 1210723200000, \"value\": 0.6449},\n    {\"time\": 1210809600000, \"value\": 0.647},\n    {\"time\": 1210896000000, \"value\": 0.6461},\n    {\"time\": 1210982400000, \"value\": 0.6452},\n    {\"time\": 1211068800000, \"value\": 0.6422},\n    {\"time\": 1211155200000, \"value\": 0.6422},\n    {\"time\": 1211241600000, \"value\": 0.6425},\n    {\"time\": 1211328000000, \"value\": 0.6414},\n    {\"time\": 1211414400000, \"value\": 0.6366},\n    {\"time\": 1211500800000, \"value\": 0.6346},\n    {\"time\": 1211587200000, \"value\": 0.635},\n    {\"time\": 1211673600000, \"value\": 0.6346},\n    {\"time\": 1211760000000, \"value\": 0.6346},\n    {\"time\": 1211846400000, \"value\": 0.6343},\n    {\"time\": 1211932800000, \"value\": 0.6346},\n    {\"time\": 1212019200000, \"value\": 0.6379},\n    {\"time\": 1212105600000, \"value\": 0.6416},\n    {\"time\": 1212192000000, \"value\": 0.6442},\n    {\"time\": 1212278400000, \"value\": 0.6431},\n    {\"time\": 1212364800000, \"value\": 0.6431},\n    {\"time\": 1212451200000, \"value\": 0.6435},\n    {\"time\": 1212537600000, \"value\": 0.644},\n    {\"time\": 1212624000000, \"value\": 0.6473},\n    {\"time\": 1212710400000, \"value\": 0.6469},\n    {\"time\": 1212796800000, \"value\": 0.6386},\n    {\"time\": 1212883200000, \"value\": 0.6356},\n    {\"time\": 1212969600000, \"value\": 0.634},\n    {\"time\": 1213056000000, \"value\": 0.6346},\n    {\"time\": 1213142400000, \"value\": 0.643},\n    {\"time\": 1213228800000, \"value\": 0.6452},\n    {\"time\": 1213315200000, \"value\": 0.6467},\n    {\"time\": 1213401600000, \"value\": 0.6506},\n    {\"time\": 1213488000000, \"value\": 0.6504},\n    {\"time\": 1213574400000, \"value\": 0.6503},\n    {\"time\": 1213660800000, \"value\": 0.6481},\n    {\"time\": 1213747200000, \"value\": 0.6451},\n    {\"time\": 1213833600000, \"value\": 0.645},\n    {\"time\": 1213920000000, \"value\": 0.6441},\n    {\"time\": 1214006400000, \"value\": 0.6414},\n    {\"time\": 1214092800000, \"value\": 0.6409},\n    {\"time\": 1214179200000, \"value\": 0.6409},\n    {\"time\": 1214265600000, \"value\": 0.6428},\n    {\"time\": 1214352000000, \"value\": 0.6431},\n    {\"time\": 1214438400000, \"value\": 0.6418},\n    {\"time\": 1214524800000, \"value\": 0.6371},\n    {\"time\": 1214611200000, \"value\": 0.6349},\n    {\"time\": 1214697600000, \"value\": 0.6333},\n    {\"time\": 1214784000000, \"value\": 0.6334},\n    {\"time\": 1214870400000, \"value\": 0.6338},\n    {\"time\": 1214956800000, \"value\": 0.6342},\n    {\"time\": 1215043200000, \"value\": 0.632},\n    {\"time\": 1215129600000, \"value\": 0.6318},\n    {\"time\": 1215216000000, \"value\": 0.637},\n    {\"time\": 1215302400000, \"value\": 0.6368},\n    {\"time\": 1215388800000, \"value\": 0.6368},\n    {\"time\": 1215475200000, \"value\": 0.6383},\n    {\"time\": 1215561600000, \"value\": 0.6371},\n    {\"time\": 1215648000000, \"value\": 0.6371},\n    {\"time\": 1215734400000, \"value\": 0.6355},\n    {\"time\": 1215820800000, \"value\": 0.632},\n    {\"time\": 1215907200000, \"value\": 0.6277},\n    {\"time\": 1215993600000, \"value\": 0.6276},\n    {\"time\": 1216080000000, \"value\": 0.6291},\n    {\"time\": 1216166400000, \"value\": 0.6274},\n    {\"time\": 1216252800000, \"value\": 0.6293},\n    {\"time\": 1216339200000, \"value\": 0.6311},\n    {\"time\": 1216425600000, \"value\": 0.631},\n    {\"time\": 1216512000000, \"value\": 0.6312},\n    {\"time\": 1216598400000, \"value\": 0.6312},\n    {\"time\": 1216684800000, \"value\": 0.6304},\n    {\"time\": 1216771200000, \"value\": 0.6294},\n    {\"time\": 1216857600000, \"value\": 0.6348},\n    {\"time\": 1216944000000, \"value\": 0.6378},\n    {\"time\": 1217030400000, \"value\": 0.6368},\n    {\"time\": 1217116800000, \"value\": 0.6368},\n    {\"time\": 1217203200000, \"value\": 0.6368},\n    {\"time\": 1217289600000, \"value\": 0.636},\n    {\"time\": 1217376000000, \"value\": 0.637},\n    {\"time\": 1217462400000, \"value\": 0.6418},\n    {\"time\": 1217548800000, \"value\": 0.6411},\n    {\"time\": 1217635200000, \"value\": 0.6435},\n    {\"time\": 1217721600000, \"value\": 0.6427},\n    {\"time\": 1217808000000, \"value\": 0.6427},\n    {\"time\": 1217894400000, \"value\": 0.6419},\n    {\"time\": 1217980800000, \"value\": 0.6446},\n    {\"time\": 1218067200000, \"value\": 0.6468},\n    {\"time\": 1218153600000, \"value\": 0.6487},\n    {\"time\": 1218240000000, \"value\": 0.6594},\n    {\"time\": 1218326400000, \"value\": 0.6666},\n    {\"time\": 1218412800000, \"value\": 0.6666},\n    {\"time\": 1218499200000, \"value\": 0.6678},\n    {\"time\": 1218585600000, \"value\": 0.6712},\n    {\"time\": 1218672000000, \"value\": 0.6705},\n    {\"time\": 1218758400000, \"value\": 0.6718},\n    {\"time\": 1218844800000, \"value\": 0.6784},\n    {\"time\": 1218931200000, \"value\": 0.6811},\n    {\"time\": 1219017600000, \"value\": 0.6811},\n    {\"time\": 1219104000000, \"value\": 0.6794},\n    {\"time\": 1219190400000, \"value\": 0.6804},\n    {\"time\": 1219276800000, \"value\": 0.6781},\n    {\"time\": 1219363200000, \"value\": 0.6756},\n    {\"time\": 1219449600000, \"value\": 0.6735},\n    {\"time\": 1219536000000, \"value\": 0.6763},\n    {\"time\": 1219622400000, \"value\": 0.6762},\n    {\"time\": 1219708800000, \"value\": 0.6777},\n    {\"time\": 1219795200000, \"value\": 0.6815},\n    {\"time\": 1219881600000, \"value\": 0.6802},\n    {\"time\": 1219968000000, \"value\": 0.678},\n    {\"time\": 1220054400000, \"value\": 0.6796},\n    {\"time\": 1220140800000, \"value\": 0.6817},\n    {\"time\": 1220227200000, \"value\": 0.6817},\n    {\"time\": 1220313600000, \"value\": 0.6832},\n    {\"time\": 1220400000000, \"value\": 0.6877},\n    {\"time\": 1220486400000, \"value\": 0.6912},\n    {\"time\": 1220572800000, \"value\": 0.6914},\n    {\"time\": 1220659200000, \"value\": 0.7009},\n    {\"time\": 1220745600000, \"value\": 0.7012},\n    {\"time\": 1220832000000, \"value\": 0.701},\n    {\"time\": 1220918400000, \"value\": 0.7005},\n    {\"time\": 1221004800000, \"value\": 0.7076},\n    {\"time\": 1221091200000, \"value\": 0.7087},\n    {\"time\": 1221177600000, \"value\": 0.717},\n    {\"time\": 1221264000000, \"value\": 0.7105},\n    {\"time\": 1221350400000, \"value\": 0.7031},\n    {\"time\": 1221436800000, \"value\": 0.7029},\n    {\"time\": 1221523200000, \"value\": 0.7006},\n    {\"time\": 1221609600000, \"value\": 0.7035},\n    {\"time\": 1221696000000, \"value\": 0.7045},\n    {\"time\": 1221782400000, \"value\": 0.6956},\n    {\"time\": 1221868800000, \"value\": 0.6988},\n    {\"time\": 1221955200000, \"value\": 0.6915},\n    {\"time\": 1222041600000, \"value\": 0.6914},\n    {\"time\": 1222128000000, \"value\": 0.6859},\n    {\"time\": 1222214400000, \"value\": 0.6778},\n    {\"time\": 1222300800000, \"value\": 0.6815},\n    {\"time\": 1222387200000, \"value\": 0.6815},\n    {\"time\": 1222473600000, \"value\": 0.6843},\n    {\"time\": 1222560000000, \"value\": 0.6846},\n    {\"time\": 1222646400000, \"value\": 0.6846},\n    {\"time\": 1222732800000, \"value\": 0.6923},\n    {\"time\": 1222819200000, \"value\": 0.6997},\n    {\"time\": 1222905600000, \"value\": 0.7098},\n    {\"time\": 1222992000000, \"value\": 0.7188},\n    {\"time\": 1223078400000, \"value\": 0.7232},\n    {\"time\": 1223164800000, \"value\": 0.7262},\n    {\"time\": 1223251200000, \"value\": 0.7266},\n    {\"time\": 1223337600000, \"value\": 0.7359},\n    {\"time\": 1223424000000, \"value\": 0.7368},\n    {\"time\": 1223510400000, \"value\": 0.7337},\n    {\"time\": 1223596800000, \"value\": 0.7317},\n    {\"time\": 1223683200000, \"value\": 0.7387},\n    {\"time\": 1223769600000, \"value\": 0.7467},\n    {\"time\": 1223856000000, \"value\": 0.7461},\n    {\"time\": 1223942400000, \"value\": 0.7366},\n    {\"time\": 1224028800000, \"value\": 0.7319},\n    {\"time\": 1224115200000, \"value\": 0.7361},\n    {\"time\": 1224201600000, \"value\": 0.7437},\n    {\"time\": 1224288000000, \"value\": 0.7432},\n    {\"time\": 1224374400000, \"value\": 0.7461},\n    {\"time\": 1224460800000, \"value\": 0.7461},\n    {\"time\": 1224547200000, \"value\": 0.7454},\n    {\"time\": 1224633600000, \"value\": 0.7549},\n    {\"time\": 1224720000000, \"value\": 0.7742},\n    {\"time\": 1224806400000, \"value\": 0.7801},\n    {\"time\": 1224892800000, \"value\": 0.7903},\n    {\"time\": 1224979200000, \"value\": 0.7876},\n    {\"time\": 1225065600000, \"value\": 0.7928},\n    {\"time\": 1225152000000, \"value\": 0.7991},\n    {\"time\": 1225238400000, \"value\": 0.8007},\n    {\"time\": 1225324800000, \"value\": 0.7823},\n    {\"time\": 1225411200000, \"value\": 0.7661},\n    {\"time\": 1225497600000, \"value\": 0.785},\n    {\"time\": 1225584000000, \"value\": 0.7863},\n    {\"time\": 1225670400000, \"value\": 0.7862},\n    {\"time\": 1225756800000, \"value\": 0.7821},\n    {\"time\": 1225843200000, \"value\": 0.7858},\n    {\"time\": 1225929600000, \"value\": 0.7731},\n    {\"time\": 1226016000000, \"value\": 0.7779},\n    {\"time\": 1226102400000, \"value\": 0.7844},\n    {\"time\": 1226188800000, \"value\": 0.7866},\n    {\"time\": 1226275200000, \"value\": 0.7864},\n    {\"time\": 1226361600000, \"value\": 0.7788},\n    {\"time\": 1226448000000, \"value\": 0.7875},\n    {\"time\": 1226534400000, \"value\": 0.7971},\n    {\"time\": 1226620800000, \"value\": 0.8004},\n    {\"time\": 1226707200000, \"value\": 0.7857},\n    {\"time\": 1226793600000, \"value\": 0.7932},\n    {\"time\": 1226880000000, \"value\": 0.7938},\n    {\"time\": 1226966400000, \"value\": 0.7927},\n    {\"time\": 1227052800000, \"value\": 0.7918},\n    {\"time\": 1227139200000, \"value\": 0.7919},\n    {\"time\": 1227225600000, \"value\": 0.7989},\n    {\"time\": 1227312000000, \"value\": 0.7988},\n    {\"time\": 1227398400000, \"value\": 0.7949},\n    {\"time\": 1227484800000, \"value\": 0.7948},\n    {\"time\": 1227571200000, \"value\": 0.7882},\n    {\"time\": 1227657600000, \"value\": 0.7745},\n    {\"time\": 1227744000000, \"value\": 0.771},\n    {\"time\": 1227830400000, \"value\": 0.775},\n    {\"time\": 1227916800000, \"value\": 0.7791},\n    {\"time\": 1228003200000, \"value\": 0.7882},\n    {\"time\": 1228089600000, \"value\": 0.7882},\n    {\"time\": 1228176000000, \"value\": 0.7899},\n    {\"time\": 1228262400000, \"value\": 0.7905},\n    {\"time\": 1228348800000, \"value\": 0.7889},\n    {\"time\": 1228435200000, \"value\": 0.7879},\n    {\"time\": 1228521600000, \"value\": 0.7855},\n    {\"time\": 1228608000000, \"value\": 0.7866},\n    {\"time\": 1228694400000, \"value\": 0.7865},\n    {\"time\": 1228780800000, \"value\": 0.7795},\n    {\"time\": 1228867200000, \"value\": 0.7758},\n    {\"time\": 1228953600000, \"value\": 0.7717},\n    {\"time\": 1229040000000, \"value\": 0.761},\n    {\"time\": 1229126400000, \"value\": 0.7497},\n    {\"time\": 1229212800000, \"value\": 0.7471},\n    {\"time\": 1229299200000, \"value\": 0.7473},\n    {\"time\": 1229385600000, \"value\": 0.7407},\n    {\"time\": 1229472000000, \"value\": 0.7288},\n    {\"time\": 1229558400000, \"value\": 0.7074},\n    {\"time\": 1229644800000, \"value\": 0.6927},\n    {\"time\": 1229731200000, \"value\": 0.7083},\n    {\"time\": 1229817600000, \"value\": 0.7191},\n    {\"time\": 1229904000000, \"value\": 0.719},\n    {\"time\": 1229990400000, \"value\": 0.7153},\n    {\"time\": 1230076800000, \"value\": 0.7156},\n    {\"time\": 1230163200000, \"value\": 0.7158},\n    {\"time\": 1230249600000, \"value\": 0.714},\n    {\"time\": 1230336000000, \"value\": 0.7119},\n    {\"time\": 1230422400000, \"value\": 0.7129},\n    {\"time\": 1230508800000, \"value\": 0.7129},\n    {\"time\": 1230595200000, \"value\": 0.7049},\n    {\"time\": 1230681600000, \"value\": 0.7095}\n]"
		}
	],
	"BasicLineChart": [
		{
			"file": "BasicLineChart.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport data from './data';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Line',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Time'\n]);\n\nexport default class BasicScatterChartExample extends Component {\n    \n    store = Ext.create('Ext.data.Store', {\n        data\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    theme={theme}\n                />\n                <Cartesian\n                    insetPadding=\"40 40 60 40\"\n                    store={this.store}\n                    theme={theme}\n                    series={{\n                        type: 'line',\n                        xField: 'time',\n                        yField: 'value'\n                    }}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'left',\n                        fields: 'value',\n                        title: 'USD to Euro'\n                    }, {\n                        type: 'time',\n                        dateFormat: 'Y-m-d',\n                        position: 'bottom',\n                        fields: 'time',\n                        title: 'Date'\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default [\n    {\"time\": 1136073600000, \"value\": 0.8446},\n    {\"time\": 1136160000000, \"value\": 0.8445},\n    {\"time\": 1136246400000, \"value\": 0.8444},\n    {\"time\": 1136332800000, \"value\": 0.8451},\n    {\"time\": 1136419200000, \"value\": 0.8418},\n    {\"time\": 1136505600000, \"value\": 0.8264},\n    {\"time\": 1136592000000, \"value\": 0.8258},\n    {\"time\": 1136678400000, \"value\": 0.8232},\n    {\"time\": 1136764800000, \"value\": 0.8233},\n    {\"time\": 1136851200000, \"value\": 0.8258},\n    {\"time\": 1136937600000, \"value\": 0.8283},\n    {\"time\": 1137024000000, \"value\": 0.8278},\n    {\"time\": 1137110400000, \"value\": 0.8256},\n    {\"time\": 1137196800000, \"value\": 0.8292},\n    {\"time\": 1137283200000, \"value\": 0.8239},\n    {\"time\": 1137369600000, \"value\": 0.8239},\n    {\"time\": 1137456000000, \"value\": 0.8245},\n    {\"time\": 1137542400000, \"value\": 0.8265},\n    {\"time\": 1137628800000, \"value\": 0.8261},\n    {\"time\": 1137715200000, \"value\": 0.8269},\n    {\"time\": 1137801600000, \"value\": 0.8273},\n    {\"time\": 1137888000000, \"value\": 0.8244},\n    {\"time\": 1137974400000, \"value\": 0.8244},\n    {\"time\": 1138060800000, \"value\": 0.8172},\n    {\"time\": 1138147200000, \"value\": 0.8139},\n    {\"time\": 1138233600000, \"value\": 0.8146},\n    {\"time\": 1138320000000, \"value\": 0.8164},\n    {\"time\": 1138406400000, \"value\": 0.82},\n    {\"time\": 1138492800000, \"value\": 0.8269},\n    {\"time\": 1138579200000, \"value\": 0.8269},\n    {\"time\": 1138665600000, \"value\": 0.8269},\n    {\"time\": 1138752000000, \"value\": 0.8258},\n    {\"time\": 1138838400000, \"value\": 0.8247},\n    {\"time\": 1138924800000, \"value\": 0.8286},\n    {\"time\": 1139011200000, \"value\": 0.8289},\n    {\"time\": 1139097600000, \"value\": 0.8316},\n    {\"time\": 1139184000000, \"value\": 0.832},\n    {\"time\": 1139270400000, \"value\": 0.8333},\n    {\"time\": 1139356800000, \"value\": 0.8352},\n    {\"time\": 1139443200000, \"value\": 0.8357},\n    {\"time\": 1139529600000, \"value\": 0.8355},\n    {\"time\": 1139616000000, \"value\": 0.8354},\n    {\"time\": 1139702400000, \"value\": 0.8403},\n    {\"time\": 1139788800000, \"value\": 0.8403},\n    {\"time\": 1139875200000, \"value\": 0.8406},\n    {\"time\": 1139961600000, \"value\": 0.8403},\n    {\"time\": 1140048000000, \"value\": 0.8396},\n    {\"time\": 1140134400000, \"value\": 0.8418},\n    {\"time\": 1140220800000, \"value\": 0.8409},\n    {\"time\": 1140307200000, \"value\": 0.8384},\n    {\"time\": 1140393600000, \"value\": 0.8386},\n    {\"time\": 1140480000000, \"value\": 0.8372},\n    {\"time\": 1140566400000, \"value\": 0.839},\n    {\"time\": 1140652800000, \"value\": 0.84},\n    {\"time\": 1140739200000, \"value\": 0.8389},\n    {\"time\": 1140825600000, \"value\": 0.84},\n    {\"time\": 1140912000000, \"value\": 0.8423},\n    {\"time\": 1140998400000, \"value\": 0.8423},\n    {\"time\": 1141084800000, \"value\": 0.8435},\n    {\"time\": 1141171200000, \"value\": 0.8422},\n    {\"time\": 1141257600000, \"value\": 0.838},\n    {\"time\": 1141344000000, \"value\": 0.8373},\n    {\"time\": 1141430400000, \"value\": 0.8316},\n    {\"time\": 1141516800000, \"value\": 0.8303},\n    {\"time\": 1141603200000, \"value\": 0.8303},\n    {\"time\": 1141689600000, \"value\": 0.8302},\n    {\"time\": 1141776000000, \"value\": 0.8369},\n    {\"time\": 1141862400000, \"value\": 0.84},\n    {\"time\": 1141948800000, \"value\": 0.8385},\n    {\"time\": 1142035200000, \"value\": 0.84},\n    {\"time\": 1142121600000, \"value\": 0.8401},\n    {\"time\": 1142208000000, \"value\": 0.8402},\n    {\"time\": 1142294400000, \"value\": 0.8381},\n    {\"time\": 1142380800000, \"value\": 0.8351},\n    {\"time\": 1142467200000, \"value\": 0.8314},\n    {\"time\": 1142553600000, \"value\": 0.8273},\n    {\"time\": 1142640000000, \"value\": 0.8213},\n    {\"time\": 1142726400000, \"value\": 0.8207},\n    {\"time\": 1142812800000, \"value\": 0.8207},\n    {\"time\": 1142899200000, \"value\": 0.8215},\n    {\"time\": 1142985600000, \"value\": 0.8242},\n    {\"time\": 1143072000000, \"value\": 0.8273},\n    {\"time\": 1143158400000, \"value\": 0.8301},\n    {\"time\": 1143244800000, \"value\": 0.8346},\n    {\"time\": 1143331200000, \"value\": 0.8312},\n    {\"time\": 1143417600000, \"value\": 0.8312},\n    {\"time\": 1143504000000, \"value\": 0.8312},\n    {\"time\": 1143590400000, \"value\": 0.8306},\n    {\"time\": 1143676800000, \"value\": 0.8327},\n    {\"time\": 1143763200000, \"value\": 0.8282},\n    {\"time\": 1143849600000, \"value\": 0.824},\n    {\"time\": 1143936000000, \"value\": 0.8255},\n    {\"time\": 1144022400000, \"value\": 0.8256},\n    {\"time\": 1144108800000, \"value\": 0.8273},\n    {\"time\": 1144195200000, \"value\": 0.8209},\n    {\"time\": 1144281600000, \"value\": 0.8151},\n    {\"time\": 1144368000000, \"value\": 0.8149},\n    {\"time\": 1144454400000, \"value\": 0.8213},\n    {\"time\": 1144540800000, \"value\": 0.8273},\n    {\"time\": 1144627200000, \"value\": 0.8273},\n    {\"time\": 1144713600000, \"value\": 0.8261},\n    {\"time\": 1144800000000, \"value\": 0.8252},\n    {\"time\": 1144886400000, \"value\": 0.824},\n    {\"time\": 1144972800000, \"value\": 0.8262},\n    {\"time\": 1145059200000, \"value\": 0.8258},\n    {\"time\": 1145145600000, \"value\": 0.8261},\n    {\"time\": 1145232000000, \"value\": 0.826},\n    {\"time\": 1145318400000, \"value\": 0.8199},\n    {\"time\": 1145404800000, \"value\": 0.8153},\n    {\"time\": 1145491200000, \"value\": 0.8097},\n    {\"time\": 1145577600000, \"value\": 0.8101},\n    {\"time\": 1145664000000, \"value\": 0.8119},\n    {\"time\": 1145750400000, \"value\": 0.8107},\n    {\"time\": 1145836800000, \"value\": 0.8105},\n    {\"time\": 1145923200000, \"value\": 0.8084},\n    {\"time\": 1146009600000, \"value\": 0.8069},\n    {\"time\": 1146096000000, \"value\": 0.8047},\n    {\"time\": 1146182400000, \"value\": 0.8023},\n    {\"time\": 1146268800000, \"value\": 0.7965},\n    {\"time\": 1146355200000, \"value\": 0.7919},\n    {\"time\": 1146441600000, \"value\": 0.7921},\n    {\"time\": 1146528000000, \"value\": 0.7922},\n    {\"time\": 1146614400000, \"value\": 0.7934},\n    {\"time\": 1146700800000, \"value\": 0.7918},\n    {\"time\": 1146787200000, \"value\": 0.7915},\n    {\"time\": 1146873600000, \"value\": 0.787},\n    {\"time\": 1146960000000, \"value\": 0.7861},\n    {\"time\": 1147046400000, \"value\": 0.7861},\n    {\"time\": 1147132800000, \"value\": 0.7853},\n    {\"time\": 1147219200000, \"value\": 0.7867},\n    {\"time\": 1147305600000, \"value\": 0.7827},\n    {\"time\": 1147392000000, \"value\": 0.7834},\n    {\"time\": 1147478400000, \"value\": 0.7766},\n    {\"time\": 1147564800000, \"value\": 0.7751},\n    {\"time\": 1147651200000, \"value\": 0.7739},\n    {\"time\": 1147737600000, \"value\": 0.7767},\n    {\"time\": 1147824000000, \"value\": 0.7802},\n    {\"time\": 1147910400000, \"value\": 0.7788},\n    {\"time\": 1147996800000, \"value\": 0.7828},\n    {\"time\": 1148083200000, \"value\": 0.7816},\n    {\"time\": 1148169600000, \"value\": 0.7829},\n    {\"time\": 1148256000000, \"value\": 0.783},\n    {\"time\": 1148342400000, \"value\": 0.7829},\n    {\"time\": 1148428800000, \"value\": 0.7781},\n    {\"time\": 1148515200000, \"value\": 0.7811},\n    {\"time\": 1148601600000, \"value\": 0.7831},\n    {\"time\": 1148688000000, \"value\": 0.7826},\n    {\"time\": 1148774400000, \"value\": 0.7855},\n    {\"time\": 1148860800000, \"value\": 0.7855},\n    {\"time\": 1148947200000, \"value\": 0.7845},\n    {\"time\": 1149033600000, \"value\": 0.7798},\n    {\"time\": 1149120000000, \"value\": 0.7777},\n    {\"time\": 1149206400000, \"value\": 0.7822},\n    {\"time\": 1149292800000, \"value\": 0.7785},\n    {\"time\": 1149379200000, \"value\": 0.7744},\n    {\"time\": 1149465600000, \"value\": 0.7743},\n    {\"time\": 1149552000000, \"value\": 0.7726},\n    {\"time\": 1149638400000, \"value\": 0.7766},\n    {\"time\": 1149724800000, \"value\": 0.7806},\n    {\"time\": 1149811200000, \"value\": 0.785},\n    {\"time\": 1149897600000, \"value\": 0.7907},\n    {\"time\": 1149984000000, \"value\": 0.7912},\n    {\"time\": 1150070400000, \"value\": 0.7913},\n    {\"time\": 1150156800000, \"value\": 0.7931},\n    {\"time\": 1150243200000, \"value\": 0.7952},\n    {\"time\": 1150329600000, \"value\": 0.7951},\n    {\"time\": 1150416000000, \"value\": 0.7928},\n    {\"time\": 1150502400000, \"value\": 0.791},\n    {\"time\": 1150588800000, \"value\": 0.7913},\n    {\"time\": 1150675200000, \"value\": 0.7912},\n    {\"time\": 1150761600000, \"value\": 0.7941},\n    {\"time\": 1150848000000, \"value\": 0.7953},\n    {\"time\": 1150934400000, \"value\": 0.7921},\n    {\"time\": 1151020800000, \"value\": 0.7919},\n    {\"time\": 1151107200000, \"value\": 0.7968},\n    {\"time\": 1151193600000, \"value\": 0.7999},\n    {\"time\": 1151280000000, \"value\": 0.7999},\n    {\"time\": 1151366400000, \"value\": 0.7974},\n    {\"time\": 1151452800000, \"value\": 0.7942},\n    {\"time\": 1151539200000, \"value\": 0.796},\n    {\"time\": 1151625600000, \"value\": 0.7969},\n    {\"time\": 1151712000000, \"value\": 0.7862},\n    {\"time\": 1151798400000, \"value\": 0.7821},\n    {\"time\": 1151884800000, \"value\": 0.7821},\n    {\"time\": 1151971200000, \"value\": 0.7821},\n    {\"time\": 1152057600000, \"value\": 0.7811},\n    {\"time\": 1152144000000, \"value\": 0.7833},\n    {\"time\": 1152230400000, \"value\": 0.7849},\n    {\"time\": 1152316800000, \"value\": 0.7819},\n    {\"time\": 1152403200000, \"value\": 0.7809},\n    {\"time\": 1152489600000, \"value\": 0.7809},\n    {\"time\": 1152576000000, \"value\": 0.7827},\n    {\"time\": 1152662400000, \"value\": 0.7848},\n    {\"time\": 1152748800000, \"value\": 0.785},\n    {\"time\": 1152835200000, \"value\": 0.7873},\n    {\"time\": 1152921600000, \"value\": 0.7894},\n    {\"time\": 1153008000000, \"value\": 0.7907},\n    {\"time\": 1153094400000, \"value\": 0.7909},\n    {\"time\": 1153180800000, \"value\": 0.7947},\n    {\"time\": 1153267200000, \"value\": 0.7987},\n    {\"time\": 1153353600000, \"value\": 0.799},\n    {\"time\": 1153440000000, \"value\": 0.7927},\n    {\"time\": 1153526400000, \"value\": 0.79},\n    {\"time\": 1153612800000, \"value\": 0.7878},\n    {\"time\": 1153699200000, \"value\": 0.7878},\n    {\"time\": 1153785600000, \"value\": 0.7907},\n    {\"time\": 1153872000000, \"value\": 0.7922},\n    {\"time\": 1153958400000, \"value\": 0.7937},\n    {\"time\": 1154044800000, \"value\": 0.786},\n    {\"time\": 1154131200000, \"value\": 0.787},\n    {\"time\": 1154217600000, \"value\": 0.7838},\n    {\"time\": 1154304000000, \"value\": 0.7838},\n    {\"time\": 1154390400000, \"value\": 0.7837},\n    {\"time\": 1154476800000, \"value\": 0.7836},\n    {\"time\": 1154563200000, \"value\": 0.7806},\n    {\"time\": 1154649600000, \"value\": 0.7825},\n    {\"time\": 1154736000000, \"value\": 0.7798},\n    {\"time\": 1154822400000, \"value\": 0.777},\n    {\"time\": 1154908800000, \"value\": 0.777},\n    {\"time\": 1154995200000, \"value\": 0.7772},\n    {\"time\": 1155081600000, \"value\": 0.7793},\n    {\"time\": 1155168000000, \"value\": 0.7788},\n    {\"time\": 1155254400000, \"value\": 0.7785},\n    {\"time\": 1155340800000, \"value\": 0.7832},\n    {\"time\": 1155427200000, \"value\": 0.7865},\n    {\"time\": 1155513600000, \"value\": 0.7865},\n    {\"time\": 1155600000000, \"value\": 0.7853},\n    {\"time\": 1155686400000, \"value\": 0.7847},\n    {\"time\": 1155772800000, \"value\": 0.7809},\n    {\"time\": 1155859200000, \"value\": 0.778},\n    {\"time\": 1155945600000, \"value\": 0.7799},\n    {\"time\": 1156032000000, \"value\": 0.78},\n    {\"time\": 1156118400000, \"value\": 0.7801},\n    {\"time\": 1156204800000, \"value\": 0.7765},\n    {\"time\": 1156291200000, \"value\": 0.7785},\n    {\"time\": 1156377600000, \"value\": 0.7811},\n    {\"time\": 1156464000000, \"value\": 0.782},\n    {\"time\": 1156550400000, \"value\": 0.7835},\n    {\"time\": 1156636800000, \"value\": 0.7845},\n    {\"time\": 1156723200000, \"value\": 0.7844},\n    {\"time\": 1156809600000, \"value\": 0.782},\n    {\"time\": 1156896000000, \"value\": 0.7811},\n    {\"time\": 1156982400000, \"value\": 0.7795},\n    {\"time\": 1157068800000, \"value\": 0.7794},\n    {\"time\": 1157155200000, \"value\": 0.7806},\n    {\"time\": 1157241600000, \"value\": 0.7794},\n    {\"time\": 1157328000000, \"value\": 0.7794},\n    {\"time\": 1157414400000, \"value\": 0.7778},\n    {\"time\": 1157500800000, \"value\": 0.7793},\n    {\"time\": 1157587200000, \"value\": 0.7808},\n    {\"time\": 1157673600000, \"value\": 0.7824},\n    {\"time\": 1157760000000, \"value\": 0.787},\n    {\"time\": 1157846400000, \"value\": 0.7894},\n    {\"time\": 1157932800000, \"value\": 0.7893},\n    {\"time\": 1158019200000, \"value\": 0.7882},\n    {\"time\": 1158105600000, \"value\": 0.7871},\n    {\"time\": 1158192000000, \"value\": 0.7882},\n    {\"time\": 1158278400000, \"value\": 0.7871},\n    {\"time\": 1158364800000, \"value\": 0.7878},\n    {\"time\": 1158451200000, \"value\": 0.79},\n    {\"time\": 1158537600000, \"value\": 0.7901},\n    {\"time\": 1158624000000, \"value\": 0.7898},\n    {\"time\": 1158710400000, \"value\": 0.7879},\n    {\"time\": 1158796800000, \"value\": 0.7886},\n    {\"time\": 1158883200000, \"value\": 0.7858},\n    {\"time\": 1158969600000, \"value\": 0.7814},\n    {\"time\": 1159056000000, \"value\": 0.7825},\n    {\"time\": 1159142400000, \"value\": 0.7826},\n    {\"time\": 1159228800000, \"value\": 0.7826},\n    {\"time\": 1159315200000, \"value\": 0.786},\n    {\"time\": 1159401600000, \"value\": 0.7878},\n    {\"time\": 1159488000000, \"value\": 0.7868},\n    {\"time\": 1159574400000, \"value\": 0.7883},\n    {\"time\": 1159660800000, \"value\": 0.7893},\n    {\"time\": 1159747200000, \"value\": 0.7892},\n    {\"time\": 1159833600000, \"value\": 0.7876},\n    {\"time\": 1159920000000, \"value\": 0.785},\n    {\"time\": 1160006400000, \"value\": 0.787},\n    {\"time\": 1160092800000, \"value\": 0.7873},\n    {\"time\": 1160179200000, \"value\": 0.7901},\n    {\"time\": 1160265600000, \"value\": 0.7936},\n    {\"time\": 1160352000000, \"value\": 0.7939},\n    {\"time\": 1160438400000, \"value\": 0.7938},\n    {\"time\": 1160524800000, \"value\": 0.7956},\n    {\"time\": 1160611200000, \"value\": 0.7975},\n    {\"time\": 1160697600000, \"value\": 0.7978},\n    {\"time\": 1160784000000, \"value\": 0.7972},\n    {\"time\": 1160870400000, \"value\": 0.7995},\n    {\"time\": 1160956800000, \"value\": 0.7995},\n    {\"time\": 1161043200000, \"value\": 0.7994},\n    {\"time\": 1161129600000, \"value\": 0.7976},\n    {\"time\": 1161216000000, \"value\": 0.7977},\n    {\"time\": 1161302400000, \"value\": 0.796},\n    {\"time\": 1161388800000, \"value\": 0.7922},\n    {\"time\": 1161475200000, \"value\": 0.7928},\n    {\"time\": 1161561600000, \"value\": 0.7929},\n    {\"time\": 1161648000000, \"value\": 0.7948},\n    {\"time\": 1161734400000, \"value\": 0.797},\n    {\"time\": 1161820800000, \"value\": 0.7953},\n    {\"time\": 1161907200000, \"value\": 0.7907},\n    {\"time\": 1161993600000, \"value\": 0.7872},\n    {\"time\": 1162080000000, \"value\": 0.7852},\n    {\"time\": 1162166400000, \"value\": 0.7852},\n    {\"time\": 1162252800000, \"value\": 0.786},\n    {\"time\": 1162339200000, \"value\": 0.7862},\n    {\"time\": 1162425600000, \"value\": 0.7836},\n    {\"time\": 1162512000000, \"value\": 0.7837},\n    {\"time\": 1162598400000, \"value\": 0.784},\n    {\"time\": 1162684800000, \"value\": 0.7867},\n    {\"time\": 1162771200000, \"value\": 0.7867},\n    {\"time\": 1162857600000, \"value\": 0.7869},\n    {\"time\": 1162944000000, \"value\": 0.7837},\n    {\"time\": 1163030400000, \"value\": 0.7827},\n    {\"time\": 1163116800000, \"value\": 0.7825},\n    {\"time\": 1163203200000, \"value\": 0.7779},\n    {\"time\": 1163289600000, \"value\": 0.7791},\n    {\"time\": 1163376000000, \"value\": 0.779},\n    {\"time\": 1163462400000, \"value\": 0.7787},\n    {\"time\": 1163548800000, \"value\": 0.78},\n    {\"time\": 1163635200000, \"value\": 0.7807},\n    {\"time\": 1163721600000, \"value\": 0.7803},\n    {\"time\": 1163808000000, \"value\": 0.7817},\n    {\"time\": 1163894400000, \"value\": 0.7799},\n    {\"time\": 1163980800000, \"value\": 0.7799},\n    {\"time\": 1164067200000, \"value\": 0.7795},\n    {\"time\": 1164153600000, \"value\": 0.7801},\n    {\"time\": 1164240000000, \"value\": 0.7765},\n    {\"time\": 1164326400000, \"value\": 0.7725},\n    {\"time\": 1164412800000, \"value\": 0.7683},\n    {\"time\": 1164499200000, \"value\": 0.7641},\n    {\"time\": 1164585600000, \"value\": 0.7639},\n    {\"time\": 1164672000000, \"value\": 0.7616},\n    {\"time\": 1164758400000, \"value\": 0.7608},\n    {\"time\": 1164844800000, \"value\": 0.759},\n    {\"time\": 1164931200000, \"value\": 0.7582},\n    {\"time\": 1165017600000, \"value\": 0.7539},\n    {\"time\": 1165104000000, \"value\": 0.75},\n    {\"time\": 1165190400000, \"value\": 0.75},\n    {\"time\": 1165276800000, \"value\": 0.7507},\n    {\"time\": 1165363200000, \"value\": 0.7505},\n    {\"time\": 1165449600000, \"value\": 0.7516},\n    {\"time\": 1165536000000, \"value\": 0.7522},\n    {\"time\": 1165622400000, \"value\": 0.7531},\n    {\"time\": 1165708800000, \"value\": 0.7577},\n    {\"time\": 1165795200000, \"value\": 0.7577},\n    {\"time\": 1165881600000, \"value\": 0.7582},\n    {\"time\": 1165968000000, \"value\": 0.755},\n    {\"time\": 1166054400000, \"value\": 0.7542},\n    {\"time\": 1166140800000, \"value\": 0.7576},\n    {\"time\": 1166227200000, \"value\": 0.7616},\n    {\"time\": 1166313600000, \"value\": 0.7648},\n    {\"time\": 1166400000000, \"value\": 0.7648},\n    {\"time\": 1166486400000, \"value\": 0.7641},\n    {\"time\": 1166572800000, \"value\": 0.7614},\n    {\"time\": 1166659200000, \"value\": 0.757},\n    {\"time\": 1166745600000, \"value\": 0.7587},\n    {\"time\": 1166832000000, \"value\": 0.7588},\n    {\"time\": 1166918400000, \"value\": 0.762},\n    {\"time\": 1167004800000, \"value\": 0.762},\n    {\"time\": 1167091200000, \"value\": 0.7617},\n    {\"time\": 1167177600000, \"value\": 0.7618},\n    {\"time\": 1167264000000, \"value\": 0.7615},\n    {\"time\": 1167350400000, \"value\": 0.7612},\n    {\"time\": 1167436800000, \"value\": 0.7596},\n    {\"time\": 1167523200000, \"value\": 0.758},\n    {\"time\": 1167609600000, \"value\": 0.758},\n    {\"time\": 1167696000000, \"value\": 0.758},\n    {\"time\": 1167782400000, \"value\": 0.7547},\n    {\"time\": 1167868800000, \"value\": 0.7549},\n    {\"time\": 1167955200000, \"value\": 0.7613},\n    {\"time\": 1168041600000, \"value\": 0.7655},\n    {\"time\": 1168128000000, \"value\": 0.7693},\n    {\"time\": 1168214400000, \"value\": 0.7694},\n    {\"time\": 1168300800000, \"value\": 0.7688},\n    {\"time\": 1168387200000, \"value\": 0.7678},\n    {\"time\": 1168473600000, \"value\": 0.7708},\n    {\"time\": 1168560000000, \"value\": 0.7727},\n    {\"time\": 1168646400000, \"value\": 0.7749},\n    {\"time\": 1168732800000, \"value\": 0.7741},\n    {\"time\": 1168819200000, \"value\": 0.7741},\n    {\"time\": 1168905600000, \"value\": 0.7732},\n    {\"time\": 1168992000000, \"value\": 0.7727},\n    {\"time\": 1169078400000, \"value\": 0.7737},\n    {\"time\": 1169164800000, \"value\": 0.7724},\n    {\"time\": 1169251200000, \"value\": 0.7712},\n    {\"time\": 1169337600000, \"value\": 0.772},\n    {\"time\": 1169424000000, \"value\": 0.7721},\n    {\"time\": 1169510400000, \"value\": 0.7717},\n    {\"time\": 1169596800000, \"value\": 0.7704},\n    {\"time\": 1169683200000, \"value\": 0.769},\n    {\"time\": 1169769600000, \"value\": 0.7711},\n    {\"time\": 1169856000000, \"value\": 0.774},\n    {\"time\": 1169942400000, \"value\": 0.7745},\n    {\"time\": 1170028800000, \"value\": 0.7745},\n    {\"time\": 1170115200000, \"value\": 0.774},\n    {\"time\": 1170201600000, \"value\": 0.7716},\n    {\"time\": 1170288000000, \"value\": 0.7713},\n    {\"time\": 1170374400000, \"value\": 0.7678},\n    {\"time\": 1170460800000, \"value\": 0.7688},\n    {\"time\": 1170547200000, \"value\": 0.7718},\n    {\"time\": 1170633600000, \"value\": 0.7718},\n    {\"time\": 1170720000000, \"value\": 0.7728},\n    {\"time\": 1170806400000, \"value\": 0.7729},\n    {\"time\": 1170892800000, \"value\": 0.7698},\n    {\"time\": 1170979200000, \"value\": 0.7685},\n    {\"time\": 1171065600000, \"value\": 0.7681},\n    {\"time\": 1171152000000, \"value\": 0.769},\n    {\"time\": 1171238400000, \"value\": 0.769},\n    {\"time\": 1171324800000, \"value\": 0.7698},\n    {\"time\": 1171411200000, \"value\": 0.7699},\n    {\"time\": 1171497600000, \"value\": 0.7651},\n    {\"time\": 1171584000000, \"value\": 0.7613},\n    {\"time\": 1171670400000, \"value\": 0.7616},\n    {\"time\": 1171756800000, \"value\": 0.7614},\n    {\"time\": 1171843200000, \"value\": 0.7614},\n    {\"time\": 1171929600000, \"value\": 0.7607},\n    {\"time\": 1172016000000, \"value\": 0.7602},\n    {\"time\": 1172102400000, \"value\": 0.7611},\n    {\"time\": 1172188800000, \"value\": 0.7622},\n    {\"time\": 1172275200000, \"value\": 0.7615},\n    {\"time\": 1172361600000, \"value\": 0.7598},\n    {\"time\": 1172448000000, \"value\": 0.7598},\n    {\"time\": 1172534400000, \"value\": 0.7592},\n    {\"time\": 1172620800000, \"value\": 0.7573},\n    {\"time\": 1172707200000, \"value\": 0.7566},\n    {\"time\": 1172793600000, \"value\": 0.7567},\n    {\"time\": 1172880000000, \"value\": 0.7591},\n    {\"time\": 1172966400000, \"value\": 0.7582},\n    {\"time\": 1173052800000, \"value\": 0.7585},\n    {\"time\": 1173139200000, \"value\": 0.7613},\n    {\"time\": 1173225600000, \"value\": 0.7631},\n    {\"time\": 1173312000000, \"value\": 0.7615},\n    {\"time\": 1173398400000, \"value\": 0.76},\n    {\"time\": 1173484800000, \"value\": 0.7613},\n    {\"time\": 1173571200000, \"value\": 0.7627},\n    {\"time\": 1173657600000, \"value\": 0.7627},\n    {\"time\": 1173744000000, \"value\": 0.7608},\n    {\"time\": 1173830400000, \"value\": 0.7583},\n    {\"time\": 1173916800000, \"value\": 0.7575},\n    {\"time\": 1174003200000, \"value\": 0.7562},\n    {\"time\": 1174089600000, \"value\": 0.752},\n    {\"time\": 1174176000000, \"value\": 0.7512},\n    {\"time\": 1174262400000, \"value\": 0.7512},\n    {\"time\": 1174348800000, \"value\": 0.7517},\n    {\"time\": 1174435200000, \"value\": 0.752},\n    {\"time\": 1174521600000, \"value\": 0.7511},\n    {\"time\": 1174608000000, \"value\": 0.748},\n    {\"time\": 1174694400000, \"value\": 0.7509},\n    {\"time\": 1174780800000, \"value\": 0.7531},\n    {\"time\": 1174867200000, \"value\": 0.7531},\n    {\"time\": 1174953600000, \"value\": 0.7527},\n    {\"time\": 1175040000000, \"value\": 0.7498},\n    {\"time\": 1175126400000, \"value\": 0.7493},\n    {\"time\": 1175212800000, \"value\": 0.7504},\n    {\"time\": 1175299200000, \"value\": 0.75},\n    {\"time\": 1175385600000, \"value\": 0.7491},\n    {\"time\": 1175472000000, \"value\": 0.7491},\n    {\"time\": 1175558400000, \"value\": 0.7485},\n    {\"time\": 1175644800000, \"value\": 0.7484},\n    {\"time\": 1175731200000, \"value\": 0.7492},\n    {\"time\": 1175817600000, \"value\": 0.7471},\n    {\"time\": 1175904000000, \"value\": 0.7459},\n    {\"time\": 1175990400000, \"value\": 0.7477},\n    {\"time\": 1176076800000, \"value\": 0.7477},\n    {\"time\": 1176163200000, \"value\": 0.7483},\n    {\"time\": 1176249600000, \"value\": 0.7458},\n    {\"time\": 1176336000000, \"value\": 0.7448},\n    {\"time\": 1176422400000, \"value\": 0.743},\n    {\"time\": 1176508800000, \"value\": 0.7399},\n    {\"time\": 1176595200000, \"value\": 0.7395},\n    {\"time\": 1176681600000, \"value\": 0.7395},\n    {\"time\": 1176768000000, \"value\": 0.7378},\n    {\"time\": 1176854400000, \"value\": 0.7382},\n    {\"time\": 1176940800000, \"value\": 0.7362},\n    {\"time\": 1177027200000, \"value\": 0.7355},\n    {\"time\": 1177113600000, \"value\": 0.7348},\n    {\"time\": 1177200000000, \"value\": 0.7361},\n    {\"time\": 1177286400000, \"value\": 0.7361},\n    {\"time\": 1177372800000, \"value\": 0.7365},\n    {\"time\": 1177459200000, \"value\": 0.7362},\n    {\"time\": 1177545600000, \"value\": 0.7331},\n    {\"time\": 1177632000000, \"value\": 0.7339},\n    {\"time\": 1177718400000, \"value\": 0.7344},\n    {\"time\": 1177804800000, \"value\": 0.7327},\n    {\"time\": 1177891200000, \"value\": 0.7327},\n    {\"time\": 1177977600000, \"value\": 0.7336},\n    {\"time\": 1178064000000, \"value\": 0.7333},\n    {\"time\": 1178150400000, \"value\": 0.7359},\n    {\"time\": 1178236800000, \"value\": 0.7359},\n    {\"time\": 1178323200000, \"value\": 0.7372},\n    {\"time\": 1178409600000, \"value\": 0.736},\n    {\"time\": 1178496000000, \"value\": 0.736},\n    {\"time\": 1178582400000, \"value\": 0.735},\n    {\"time\": 1178668800000, \"value\": 0.7365},\n    {\"time\": 1178755200000, \"value\": 0.7384},\n    {\"time\": 1178841600000, \"value\": 0.7395},\n    {\"time\": 1178928000000, \"value\": 0.7413},\n    {\"time\": 1179014400000, \"value\": 0.7397},\n    {\"time\": 1179100800000, \"value\": 0.7396},\n    {\"time\": 1179187200000, \"value\": 0.7385},\n    {\"time\": 1179273600000, \"value\": 0.7378},\n    {\"time\": 1179360000000, \"value\": 0.7366},\n    {\"time\": 1179446400000, \"value\": 0.74},\n    {\"time\": 1179532800000, \"value\": 0.7411},\n    {\"time\": 1179619200000, \"value\": 0.7406},\n    {\"time\": 1179705600000, \"value\": 0.7405},\n    {\"time\": 1179792000000, \"value\": 0.7414},\n    {\"time\": 1179878400000, \"value\": 0.7431},\n    {\"time\": 1179964800000, \"value\": 0.7431},\n    {\"time\": 1180051200000, \"value\": 0.7438},\n    {\"time\": 1180137600000, \"value\": 0.7443},\n    {\"time\": 1180224000000, \"value\": 0.7443},\n    {\"time\": 1180310400000, \"value\": 0.7443},\n    {\"time\": 1180396800000, \"value\": 0.7434},\n    {\"time\": 1180483200000, \"value\": 0.7429},\n    {\"time\": 1180569600000, \"value\": 0.7442},\n    {\"time\": 1180656000000, \"value\": 0.744},\n    {\"time\": 1180742400000, \"value\": 0.7439},\n    {\"time\": 1180828800000, \"value\": 0.7437},\n    {\"time\": 1180915200000, \"value\": 0.7437},\n    {\"time\": 1181001600000, \"value\": 0.7429},\n    {\"time\": 1181088000000, \"value\": 0.7403},\n    {\"time\": 1181174400000, \"value\": 0.7399},\n    {\"time\": 1181260800000, \"value\": 0.7418},\n    {\"time\": 1181347200000, \"value\": 0.7468},\n    {\"time\": 1181433600000, \"value\": 0.748},\n    {\"time\": 1181520000000, \"value\": 0.748},\n    {\"time\": 1181606400000, \"value\": 0.749},\n    {\"time\": 1181692800000, \"value\": 0.7494},\n    {\"time\": 1181779200000, \"value\": 0.7522},\n    {\"time\": 1181865600000, \"value\": 0.7515},\n    {\"time\": 1181952000000, \"value\": 0.7502},\n    {\"time\": 1182038400000, \"value\": 0.7472},\n    {\"time\": 1182124800000, \"value\": 0.7472},\n    {\"time\": 1182211200000, \"value\": 0.7462},\n    {\"time\": 1182297600000, \"value\": 0.7455},\n    {\"time\": 1182384000000, \"value\": 0.7449},\n    {\"time\": 1182470400000, \"value\": 0.7467},\n    {\"time\": 1182556800000, \"value\": 0.7458},\n    {\"time\": 1182643200000, \"value\": 0.7427},\n    {\"time\": 1182729600000, \"value\": 0.7427},\n    {\"time\": 1182816000000, \"value\": 0.743},\n    {\"time\": 1182902400000, \"value\": 0.7429},\n    {\"time\": 1182988800000, \"value\": 0.744},\n    {\"time\": 1183075200000, \"value\": 0.743},\n    {\"time\": 1183161600000, \"value\": 0.7422},\n    {\"time\": 1183248000000, \"value\": 0.7388},\n    {\"time\": 1183334400000, \"value\": 0.7388},\n    {\"time\": 1183420800000, \"value\": 0.7369},\n    {\"time\": 1183507200000, \"value\": 0.7345},\n    {\"time\": 1183593600000, \"value\": 0.7345},\n    {\"time\": 1183680000000, \"value\": 0.7345},\n    {\"time\": 1183766400000, \"value\": 0.7352},\n    {\"time\": 1183852800000, \"value\": 0.7341},\n    {\"time\": 1183939200000, \"value\": 0.7341},\n    {\"time\": 1184025600000, \"value\": 0.734},\n    {\"time\": 1184112000000, \"value\": 0.7324},\n    {\"time\": 1184198400000, \"value\": 0.7272},\n    {\"time\": 1184284800000, \"value\": 0.7264},\n    {\"time\": 1184371200000, \"value\": 0.7255},\n    {\"time\": 1184457600000, \"value\": 0.7258},\n    {\"time\": 1184544000000, \"value\": 0.7258},\n    {\"time\": 1184630400000, \"value\": 0.7256},\n    {\"time\": 1184716800000, \"value\": 0.7257},\n    {\"time\": 1184803200000, \"value\": 0.7247},\n    {\"time\": 1184889600000, \"value\": 0.7243},\n    {\"time\": 1184976000000, \"value\": 0.7244},\n    {\"time\": 1185062400000, \"value\": 0.7235},\n    {\"time\": 1185148800000, \"value\": 0.7235},\n    {\"time\": 1185235200000, \"value\": 0.7235},\n    {\"time\": 1185321600000, \"value\": 0.7235},\n    {\"time\": 1185408000000, \"value\": 0.7262},\n    {\"time\": 1185494400000, \"value\": 0.7288},\n    {\"time\": 1185580800000, \"value\": 0.7301},\n    {\"time\": 1185667200000, \"value\": 0.7337},\n    {\"time\": 1185753600000, \"value\": 0.7337},\n    {\"time\": 1185840000000, \"value\": 0.7324},\n    {\"time\": 1185926400000, \"value\": 0.7297},\n    {\"time\": 1186012800000, \"value\": 0.7317},\n    {\"time\": 1186099200000, \"value\": 0.7315},\n    {\"time\": 1186185600000, \"value\": 0.7288},\n    {\"time\": 1186272000000, \"value\": 0.7263},\n    {\"time\": 1186358400000, \"value\": 0.7263},\n    {\"time\": 1186444800000, \"value\": 0.7242},\n    {\"time\": 1186531200000, \"value\": 0.7253},\n    {\"time\": 1186617600000, \"value\": 0.7264},\n    {\"time\": 1186704000000, \"value\": 0.727},\n    {\"time\": 1186790400000, \"value\": 0.7312},\n    {\"time\": 1186876800000, \"value\": 0.7305},\n    {\"time\": 1186963200000, \"value\": 0.7305},\n    {\"time\": 1187049600000, \"value\": 0.7318},\n    {\"time\": 1187136000000, \"value\": 0.7358},\n    {\"time\": 1187222400000, \"value\": 0.7409},\n    {\"time\": 1187308800000, \"value\": 0.7454},\n    {\"time\": 1187395200000, \"value\": 0.7437},\n    {\"time\": 1187481600000, \"value\": 0.7424},\n    {\"time\": 1187568000000, \"value\": 0.7424},\n    {\"time\": 1187654400000, \"value\": 0.7415},\n    {\"time\": 1187740800000, \"value\": 0.7419},\n    {\"time\": 1187827200000, \"value\": 0.7414},\n    {\"time\": 1187913600000, \"value\": 0.7377},\n    {\"time\": 1188000000000, \"value\": 0.7355},\n    {\"time\": 1188086400000, \"value\": 0.7315},\n    {\"time\": 1188172800000, \"value\": 0.7315},\n    {\"time\": 1188259200000, \"value\": 0.732},\n    {\"time\": 1188345600000, \"value\": 0.7332},\n    {\"time\": 1188432000000, \"value\": 0.7346},\n    {\"time\": 1188518400000, \"value\": 0.7328},\n    {\"time\": 1188604800000, \"value\": 0.7323},\n    {\"time\": 1188691200000, \"value\": 0.734},\n    {\"time\": 1188777600000, \"value\": 0.734},\n    {\"time\": 1188864000000, \"value\": 0.7336},\n    {\"time\": 1188950400000, \"value\": 0.7351},\n    {\"time\": 1189036800000, \"value\": 0.7346},\n    {\"time\": 1189123200000, \"value\": 0.7321},\n    {\"time\": 1189209600000, \"value\": 0.7294},\n    {\"time\": 1189296000000, \"value\": 0.7266},\n    {\"time\": 1189382400000, \"value\": 0.7266},\n    {\"time\": 1189468800000, \"value\": 0.7254},\n    {\"time\": 1189555200000, \"value\": 0.7242},\n    {\"time\": 1189641600000, \"value\": 0.7213},\n    {\"time\": 1189728000000, \"value\": 0.7197},\n    {\"time\": 1189814400000, \"value\": 0.7209},\n    {\"time\": 1189900800000, \"value\": 0.721},\n    {\"time\": 1189987200000, \"value\": 0.721},\n    {\"time\": 1190073600000, \"value\": 0.721},\n    {\"time\": 1190160000000, \"value\": 0.7209},\n    {\"time\": 1190246400000, \"value\": 0.7159},\n    {\"time\": 1190332800000, \"value\": 0.7133},\n    {\"time\": 1190419200000, \"value\": 0.7105},\n    {\"time\": 1190505600000, \"value\": 0.7099},\n    {\"time\": 1190592000000, \"value\": 0.7099},\n    {\"time\": 1190678400000, \"value\": 0.7093},\n    {\"time\": 1190764800000, \"value\": 0.7093},\n    {\"time\": 1190851200000, \"value\": 0.7076},\n    {\"time\": 1190937600000, \"value\": 0.707},\n    {\"time\": 1191024000000, \"value\": 0.7049},\n    {\"time\": 1191110400000, \"value\": 0.7012},\n    {\"time\": 1191196800000, \"value\": 0.7011},\n    {\"time\": 1191283200000, \"value\": 0.7019},\n    {\"time\": 1191369600000, \"value\": 0.7046},\n    {\"time\": 1191456000000, \"value\": 0.7063},\n    {\"time\": 1191542400000, \"value\": 0.7089},\n    {\"time\": 1191628800000, \"value\": 0.7077},\n    {\"time\": 1191715200000, \"value\": 0.7077},\n    {\"time\": 1191801600000, \"value\": 0.7077},\n    {\"time\": 1191888000000, \"value\": 0.7091},\n    {\"time\": 1191974400000, \"value\": 0.7118},\n    {\"time\": 1192060800000, \"value\": 0.7079},\n    {\"time\": 1192147200000, \"value\": 0.7053},\n    {\"time\": 1192233600000, \"value\": 0.705},\n    {\"time\": 1192320000000, \"value\": 0.7055},\n    {\"time\": 1192406400000, \"value\": 0.7055},\n    {\"time\": 1192492800000, \"value\": 0.7045},\n    {\"time\": 1192579200000, \"value\": 0.7051},\n    {\"time\": 1192665600000, \"value\": 0.7051},\n    {\"time\": 1192752000000, \"value\": 0.7017},\n    {\"time\": 1192838400000, \"value\": 0.7},\n    {\"time\": 1192924800000, \"value\": 0.6995},\n    {\"time\": 1193011200000, \"value\": 0.6994},\n    {\"time\": 1193097600000, \"value\": 0.7014},\n    {\"time\": 1193184000000, \"value\": 0.7036},\n    {\"time\": 1193270400000, \"value\": 0.7021},\n    {\"time\": 1193356800000, \"value\": 0.7002},\n    {\"time\": 1193443200000, \"value\": 0.6967},\n    {\"time\": 1193529600000, \"value\": 0.695},\n    {\"time\": 1193616000000, \"value\": 0.695},\n    {\"time\": 1193702400000, \"value\": 0.6939},\n    {\"time\": 1193788800000, \"value\": 0.694},\n    {\"time\": 1193875200000, \"value\": 0.6922},\n    {\"time\": 1193961600000, \"value\": 0.6919},\n    {\"time\": 1194048000000, \"value\": 0.6914},\n    {\"time\": 1194134400000, \"value\": 0.6894},\n    {\"time\": 1194220800000, \"value\": 0.6891},\n    {\"time\": 1194307200000, \"value\": 0.6904},\n    {\"time\": 1194393600000, \"value\": 0.689},\n    {\"time\": 1194480000000, \"value\": 0.6834},\n    {\"time\": 1194566400000, \"value\": 0.6823},\n    {\"time\": 1194652800000, \"value\": 0.6807},\n    {\"time\": 1194739200000, \"value\": 0.6815},\n    {\"time\": 1194825600000, \"value\": 0.6815},\n    {\"time\": 1194912000000, \"value\": 0.6847},\n    {\"time\": 1194998400000, \"value\": 0.6859},\n    {\"time\": 1195084800000, \"value\": 0.6822},\n    {\"time\": 1195171200000, \"value\": 0.6827},\n    {\"time\": 1195257600000, \"value\": 0.6837},\n    {\"time\": 1195344000000, \"value\": 0.6823},\n    {\"time\": 1195430400000, \"value\": 0.6822},\n    {\"time\": 1195516800000, \"value\": 0.6822},\n    {\"time\": 1195603200000, \"value\": 0.6792},\n    {\"time\": 1195689600000, \"value\": 0.6746},\n    {\"time\": 1195776000000, \"value\": 0.6735},\n    {\"time\": 1195862400000, \"value\": 0.6731},\n    {\"time\": 1195948800000, \"value\": 0.6742},\n    {\"time\": 1196035200000, \"value\": 0.6744},\n    {\"time\": 1196121600000, \"value\": 0.6739},\n    {\"time\": 1196208000000, \"value\": 0.6731},\n    {\"time\": 1196294400000, \"value\": 0.6761},\n    {\"time\": 1196380800000, \"value\": 0.6761},\n    {\"time\": 1196467200000, \"value\": 0.6785},\n    {\"time\": 1196553600000, \"value\": 0.6818},\n    {\"time\": 1196640000000, \"value\": 0.6836},\n    {\"time\": 1196726400000, \"value\": 0.6823},\n    {\"time\": 1196812800000, \"value\": 0.6805},\n    {\"time\": 1196899200000, \"value\": 0.6793},\n    {\"time\": 1196985600000, \"value\": 0.6849},\n    {\"time\": 1197072000000, \"value\": 0.6833},\n    {\"time\": 1197158400000, \"value\": 0.6825},\n    {\"time\": 1197244800000, \"value\": 0.6825},\n    {\"time\": 1197331200000, \"value\": 0.6816},\n    {\"time\": 1197417600000, \"value\": 0.6799},\n    {\"time\": 1197504000000, \"value\": 0.6813},\n    {\"time\": 1197590400000, \"value\": 0.6809},\n    {\"time\": 1197676800000, \"value\": 0.6868},\n    {\"time\": 1197763200000, \"value\": 0.6933},\n    {\"time\": 1197849600000, \"value\": 0.6933},\n    {\"time\": 1197936000000, \"value\": 0.6945},\n    {\"time\": 1198022400000, \"value\": 0.6944},\n    {\"time\": 1198108800000, \"value\": 0.6946},\n    {\"time\": 1198195200000, \"value\": 0.6964},\n    {\"time\": 1198281600000, \"value\": 0.6965},\n    {\"time\": 1198368000000, \"value\": 0.6956},\n    {\"time\": 1198454400000, \"value\": 0.6956},\n    {\"time\": 1198540800000, \"value\": 0.695},\n    {\"time\": 1198627200000, \"value\": 0.6948},\n    {\"time\": 1198713600000, \"value\": 0.6928},\n    {\"time\": 1198800000000, \"value\": 0.6887},\n    {\"time\": 1198886400000, \"value\": 0.6824},\n    {\"time\": 1198972800000, \"value\": 0.6794},\n    {\"time\": 1199059200000, \"value\": 0.6794},\n    {\"time\": 1199145600000, \"value\": 0.6803},\n    {\"time\": 1199232000000, \"value\": 0.6855},\n    {\"time\": 1199318400000, \"value\": 0.6824},\n    {\"time\": 1199404800000, \"value\": 0.6791},\n    {\"time\": 1199491200000, \"value\": 0.6783},\n    {\"time\": 1199577600000, \"value\": 0.6785},\n    {\"time\": 1199664000000, \"value\": 0.6785},\n    {\"time\": 1199750400000, \"value\": 0.6797},\n    {\"time\": 1199836800000, \"value\": 0.68},\n    {\"time\": 1199923200000, \"value\": 0.6803},\n    {\"time\": 1200009600000, \"value\": 0.6805},\n    {\"time\": 1200096000000, \"value\": 0.676},\n    {\"time\": 1200182400000, \"value\": 0.677},\n    {\"time\": 1200268800000, \"value\": 0.677},\n    {\"time\": 1200355200000, \"value\": 0.6736},\n    {\"time\": 1200441600000, \"value\": 0.6726},\n    {\"time\": 1200528000000, \"value\": 0.6764},\n    {\"time\": 1200614400000, \"value\": 0.6821},\n    {\"time\": 1200700800000, \"value\": 0.6831},\n    {\"time\": 1200787200000, \"value\": 0.6842},\n    {\"time\": 1200873600000, \"value\": 0.6842},\n    {\"time\": 1200960000000, \"value\": 0.6887},\n    {\"time\": 1201046400000, \"value\": 0.6903},\n    {\"time\": 1201132800000, \"value\": 0.6848},\n    {\"time\": 1201219200000, \"value\": 0.6824},\n    {\"time\": 1201305600000, \"value\": 0.6788},\n    {\"time\": 1201392000000, \"value\": 0.6814},\n    {\"time\": 1201478400000, \"value\": 0.6814},\n    {\"time\": 1201564800000, \"value\": 0.6797},\n    {\"time\": 1201651200000, \"value\": 0.6769},\n    {\"time\": 1201737600000, \"value\": 0.6765},\n    {\"time\": 1201824000000, \"value\": 0.6733},\n    {\"time\": 1201910400000, \"value\": 0.6729},\n    {\"time\": 1201996800000, \"value\": 0.6758},\n    {\"time\": 1202083200000, \"value\": 0.6758},\n    {\"time\": 1202169600000, \"value\": 0.675},\n    {\"time\": 1202256000000, \"value\": 0.678},\n    {\"time\": 1202342400000, \"value\": 0.6833},\n    {\"time\": 1202428800000, \"value\": 0.6856},\n    {\"time\": 1202515200000, \"value\": 0.6903},\n    {\"time\": 1202601600000, \"value\": 0.6896},\n    {\"time\": 1202688000000, \"value\": 0.6896},\n    {\"time\": 1202774400000, \"value\": 0.6882},\n    {\"time\": 1202860800000, \"value\": 0.6879},\n    {\"time\": 1202947200000, \"value\": 0.6862},\n    {\"time\": 1203033600000, \"value\": 0.6852},\n    {\"time\": 1203120000000, \"value\": 0.6823},\n    {\"time\": 1203206400000, \"value\": 0.6813},\n    {\"time\": 1203292800000, \"value\": 0.6813},\n    {\"time\": 1203379200000, \"value\": 0.6822},\n    {\"time\": 1203465600000, \"value\": 0.6802},\n    {\"time\": 1203552000000, \"value\": 0.6802},\n    {\"time\": 1203638400000, \"value\": 0.6784},\n    {\"time\": 1203724800000, \"value\": 0.6748},\n    {\"time\": 1203811200000, \"value\": 0.6747},\n    {\"time\": 1203897600000, \"value\": 0.6747},\n    {\"time\": 1203984000000, \"value\": 0.6748},\n    {\"time\": 1204070400000, \"value\": 0.6733},\n    {\"time\": 1204156800000, \"value\": 0.665},\n    {\"time\": 1204243200000, \"value\": 0.6611},\n    {\"time\": 1204329600000, \"value\": 0.6583},\n    {\"time\": 1204416000000, \"value\": 0.659},\n    {\"time\": 1204502400000, \"value\": 0.659},\n    {\"time\": 1204588800000, \"value\": 0.6581},\n    {\"time\": 1204675200000, \"value\": 0.6578},\n    {\"time\": 1204761600000, \"value\": 0.6574},\n    {\"time\": 1204848000000, \"value\": 0.6532},\n    {\"time\": 1204934400000, \"value\": 0.6502},\n    {\"time\": 1205020800000, \"value\": 0.6514},\n    {\"time\": 1205107200000, \"value\": 0.6514},\n    {\"time\": 1205193600000, \"value\": 0.6507},\n    {\"time\": 1205280000000, \"value\": 0.651},\n    {\"time\": 1205366400000, \"value\": 0.6489},\n    {\"time\": 1205452800000, \"value\": 0.6424},\n    {\"time\": 1205539200000, \"value\": 0.6406},\n    {\"time\": 1205625600000, \"value\": 0.6382},\n    {\"time\": 1205712000000, \"value\": 0.6382},\n    {\"time\": 1205798400000, \"value\": 0.6341},\n    {\"time\": 1205884800000, \"value\": 0.6344},\n    {\"time\": 1205971200000, \"value\": 0.6378},\n    {\"time\": 1206057600000, \"value\": 0.6439},\n    {\"time\": 1206144000000, \"value\": 0.6478},\n    {\"time\": 1206230400000, \"value\": 0.6481},\n    {\"time\": 1206316800000, \"value\": 0.6481},\n    {\"time\": 1206403200000, \"value\": 0.6494},\n    {\"time\": 1206489600000, \"value\": 0.6438},\n    {\"time\": 1206576000000, \"value\": 0.6377},\n    {\"time\": 1206662400000, \"value\": 0.6329},\n    {\"time\": 1206748800000, \"value\": 0.6336},\n    {\"time\": 1206835200000, \"value\": 0.6333},\n    {\"time\": 1206921600000, \"value\": 0.6333},\n    {\"time\": 1207008000000, \"value\": 0.633},\n    {\"time\": 1207094400000, \"value\": 0.6371},\n    {\"time\": 1207180800000, \"value\": 0.6403},\n    {\"time\": 1207267200000, \"value\": 0.6396},\n    {\"time\": 1207353600000, \"value\": 0.6364},\n    {\"time\": 1207440000000, \"value\": 0.6356},\n    {\"time\": 1207526400000, \"value\": 0.6356},\n    {\"time\": 1207612800000, \"value\": 0.6368},\n    {\"time\": 1207699200000, \"value\": 0.6357},\n    {\"time\": 1207785600000, \"value\": 0.6354},\n    {\"time\": 1207872000000, \"value\": 0.632},\n    {\"time\": 1207958400000, \"value\": 0.6332},\n    {\"time\": 1208044800000, \"value\": 0.6328},\n    {\"time\": 1208131200000, \"value\": 0.6331},\n    {\"time\": 1208217600000, \"value\": 0.6342},\n    {\"time\": 1208304000000, \"value\": 0.6321},\n    {\"time\": 1208390400000, \"value\": 0.6302},\n    {\"time\": 1208476800000, \"value\": 0.6278},\n    {\"time\": 1208563200000, \"value\": 0.6308},\n    {\"time\": 1208649600000, \"value\": 0.6324},\n    {\"time\": 1208736000000, \"value\": 0.6324},\n    {\"time\": 1208822400000, \"value\": 0.6307},\n    {\"time\": 1208908800000, \"value\": 0.6277},\n    {\"time\": 1208995200000, \"value\": 0.6269},\n    {\"time\": 1209081600000, \"value\": 0.6335},\n    {\"time\": 1209168000000, \"value\": 0.6392},\n    {\"time\": 1209254400000, \"value\": 0.64},\n    {\"time\": 1209340800000, \"value\": 0.6401},\n    {\"time\": 1209427200000, \"value\": 0.6396},\n    {\"time\": 1209513600000, \"value\": 0.6407},\n    {\"time\": 1209600000000, \"value\": 0.6423},\n    {\"time\": 1209686400000, \"value\": 0.6429},\n    {\"time\": 1209772800000, \"value\": 0.6472},\n    {\"time\": 1209859200000, \"value\": 0.6485},\n    {\"time\": 1209945600000, \"value\": 0.6486},\n    {\"time\": 1210032000000, \"value\": 0.6467},\n    {\"time\": 1210118400000, \"value\": 0.6444},\n    {\"time\": 1210204800000, \"value\": 0.6467},\n    {\"time\": 1210291200000, \"value\": 0.6509},\n    {\"time\": 1210377600000, \"value\": 0.6478},\n    {\"time\": 1210464000000, \"value\": 0.6461},\n    {\"time\": 1210550400000, \"value\": 0.6461},\n    {\"time\": 1210636800000, \"value\": 0.6468},\n    {\"time\": 1210723200000, \"value\": 0.6449},\n    {\"time\": 1210809600000, \"value\": 0.647},\n    {\"time\": 1210896000000, \"value\": 0.6461},\n    {\"time\": 1210982400000, \"value\": 0.6452},\n    {\"time\": 1211068800000, \"value\": 0.6422},\n    {\"time\": 1211155200000, \"value\": 0.6422},\n    {\"time\": 1211241600000, \"value\": 0.6425},\n    {\"time\": 1211328000000, \"value\": 0.6414},\n    {\"time\": 1211414400000, \"value\": 0.6366},\n    {\"time\": 1211500800000, \"value\": 0.6346},\n    {\"time\": 1211587200000, \"value\": 0.635},\n    {\"time\": 1211673600000, \"value\": 0.6346},\n    {\"time\": 1211760000000, \"value\": 0.6346},\n    {\"time\": 1211846400000, \"value\": 0.6343},\n    {\"time\": 1211932800000, \"value\": 0.6346},\n    {\"time\": 1212019200000, \"value\": 0.6379},\n    {\"time\": 1212105600000, \"value\": 0.6416},\n    {\"time\": 1212192000000, \"value\": 0.6442},\n    {\"time\": 1212278400000, \"value\": 0.6431},\n    {\"time\": 1212364800000, \"value\": 0.6431},\n    {\"time\": 1212451200000, \"value\": 0.6435},\n    {\"time\": 1212537600000, \"value\": 0.644},\n    {\"time\": 1212624000000, \"value\": 0.6473},\n    {\"time\": 1212710400000, \"value\": 0.6469},\n    {\"time\": 1212796800000, \"value\": 0.6386},\n    {\"time\": 1212883200000, \"value\": 0.6356},\n    {\"time\": 1212969600000, \"value\": 0.634},\n    {\"time\": 1213056000000, \"value\": 0.6346},\n    {\"time\": 1213142400000, \"value\": 0.643},\n    {\"time\": 1213228800000, \"value\": 0.6452},\n    {\"time\": 1213315200000, \"value\": 0.6467},\n    {\"time\": 1213401600000, \"value\": 0.6506},\n    {\"time\": 1213488000000, \"value\": 0.6504},\n    {\"time\": 1213574400000, \"value\": 0.6503},\n    {\"time\": 1213660800000, \"value\": 0.6481},\n    {\"time\": 1213747200000, \"value\": 0.6451},\n    {\"time\": 1213833600000, \"value\": 0.645},\n    {\"time\": 1213920000000, \"value\": 0.6441},\n    {\"time\": 1214006400000, \"value\": 0.6414},\n    {\"time\": 1214092800000, \"value\": 0.6409},\n    {\"time\": 1214179200000, \"value\": 0.6409},\n    {\"time\": 1214265600000, \"value\": 0.6428},\n    {\"time\": 1214352000000, \"value\": 0.6431},\n    {\"time\": 1214438400000, \"value\": 0.6418},\n    {\"time\": 1214524800000, \"value\": 0.6371},\n    {\"time\": 1214611200000, \"value\": 0.6349},\n    {\"time\": 1214697600000, \"value\": 0.6333},\n    {\"time\": 1214784000000, \"value\": 0.6334},\n    {\"time\": 1214870400000, \"value\": 0.6338},\n    {\"time\": 1214956800000, \"value\": 0.6342},\n    {\"time\": 1215043200000, \"value\": 0.632},\n    {\"time\": 1215129600000, \"value\": 0.6318},\n    {\"time\": 1215216000000, \"value\": 0.637},\n    {\"time\": 1215302400000, \"value\": 0.6368},\n    {\"time\": 1215388800000, \"value\": 0.6368},\n    {\"time\": 1215475200000, \"value\": 0.6383},\n    {\"time\": 1215561600000, \"value\": 0.6371},\n    {\"time\": 1215648000000, \"value\": 0.6371},\n    {\"time\": 1215734400000, \"value\": 0.6355},\n    {\"time\": 1215820800000, \"value\": 0.632},\n    {\"time\": 1215907200000, \"value\": 0.6277},\n    {\"time\": 1215993600000, \"value\": 0.6276},\n    {\"time\": 1216080000000, \"value\": 0.6291},\n    {\"time\": 1216166400000, \"value\": 0.6274},\n    {\"time\": 1216252800000, \"value\": 0.6293},\n    {\"time\": 1216339200000, \"value\": 0.6311},\n    {\"time\": 1216425600000, \"value\": 0.631},\n    {\"time\": 1216512000000, \"value\": 0.6312},\n    {\"time\": 1216598400000, \"value\": 0.6312},\n    {\"time\": 1216684800000, \"value\": 0.6304},\n    {\"time\": 1216771200000, \"value\": 0.6294},\n    {\"time\": 1216857600000, \"value\": 0.6348},\n    {\"time\": 1216944000000, \"value\": 0.6378},\n    {\"time\": 1217030400000, \"value\": 0.6368},\n    {\"time\": 1217116800000, \"value\": 0.6368},\n    {\"time\": 1217203200000, \"value\": 0.6368},\n    {\"time\": 1217289600000, \"value\": 0.636},\n    {\"time\": 1217376000000, \"value\": 0.637},\n    {\"time\": 1217462400000, \"value\": 0.6418},\n    {\"time\": 1217548800000, \"value\": 0.6411},\n    {\"time\": 1217635200000, \"value\": 0.6435},\n    {\"time\": 1217721600000, \"value\": 0.6427},\n    {\"time\": 1217808000000, \"value\": 0.6427},\n    {\"time\": 1217894400000, \"value\": 0.6419},\n    {\"time\": 1217980800000, \"value\": 0.6446},\n    {\"time\": 1218067200000, \"value\": 0.6468},\n    {\"time\": 1218153600000, \"value\": 0.6487},\n    {\"time\": 1218240000000, \"value\": 0.6594},\n    {\"time\": 1218326400000, \"value\": 0.6666},\n    {\"time\": 1218412800000, \"value\": 0.6666},\n    {\"time\": 1218499200000, \"value\": 0.6678},\n    {\"time\": 1218585600000, \"value\": 0.6712},\n    {\"time\": 1218672000000, \"value\": 0.6705},\n    {\"time\": 1218758400000, \"value\": 0.6718},\n    {\"time\": 1218844800000, \"value\": 0.6784},\n    {\"time\": 1218931200000, \"value\": 0.6811},\n    {\"time\": 1219017600000, \"value\": 0.6811},\n    {\"time\": 1219104000000, \"value\": 0.6794},\n    {\"time\": 1219190400000, \"value\": 0.6804},\n    {\"time\": 1219276800000, \"value\": 0.6781},\n    {\"time\": 1219363200000, \"value\": 0.6756},\n    {\"time\": 1219449600000, \"value\": 0.6735},\n    {\"time\": 1219536000000, \"value\": 0.6763},\n    {\"time\": 1219622400000, \"value\": 0.6762},\n    {\"time\": 1219708800000, \"value\": 0.6777},\n    {\"time\": 1219795200000, \"value\": 0.6815},\n    {\"time\": 1219881600000, \"value\": 0.6802},\n    {\"time\": 1219968000000, \"value\": 0.678},\n    {\"time\": 1220054400000, \"value\": 0.6796},\n    {\"time\": 1220140800000, \"value\": 0.6817},\n    {\"time\": 1220227200000, \"value\": 0.6817},\n    {\"time\": 1220313600000, \"value\": 0.6832},\n    {\"time\": 1220400000000, \"value\": 0.6877},\n    {\"time\": 1220486400000, \"value\": 0.6912},\n    {\"time\": 1220572800000, \"value\": 0.6914},\n    {\"time\": 1220659200000, \"value\": 0.7009},\n    {\"time\": 1220745600000, \"value\": 0.7012},\n    {\"time\": 1220832000000, \"value\": 0.701},\n    {\"time\": 1220918400000, \"value\": 0.7005},\n    {\"time\": 1221004800000, \"value\": 0.7076},\n    {\"time\": 1221091200000, \"value\": 0.7087},\n    {\"time\": 1221177600000, \"value\": 0.717},\n    {\"time\": 1221264000000, \"value\": 0.7105},\n    {\"time\": 1221350400000, \"value\": 0.7031},\n    {\"time\": 1221436800000, \"value\": 0.7029},\n    {\"time\": 1221523200000, \"value\": 0.7006},\n    {\"time\": 1221609600000, \"value\": 0.7035},\n    {\"time\": 1221696000000, \"value\": 0.7045},\n    {\"time\": 1221782400000, \"value\": 0.6956},\n    {\"time\": 1221868800000, \"value\": 0.6988},\n    {\"time\": 1221955200000, \"value\": 0.6915},\n    {\"time\": 1222041600000, \"value\": 0.6914},\n    {\"time\": 1222128000000, \"value\": 0.6859},\n    {\"time\": 1222214400000, \"value\": 0.6778},\n    {\"time\": 1222300800000, \"value\": 0.6815},\n    {\"time\": 1222387200000, \"value\": 0.6815},\n    {\"time\": 1222473600000, \"value\": 0.6843},\n    {\"time\": 1222560000000, \"value\": 0.6846},\n    {\"time\": 1222646400000, \"value\": 0.6846},\n    {\"time\": 1222732800000, \"value\": 0.6923},\n    {\"time\": 1222819200000, \"value\": 0.6997},\n    {\"time\": 1222905600000, \"value\": 0.7098},\n    {\"time\": 1222992000000, \"value\": 0.7188},\n    {\"time\": 1223078400000, \"value\": 0.7232},\n    {\"time\": 1223164800000, \"value\": 0.7262},\n    {\"time\": 1223251200000, \"value\": 0.7266},\n    {\"time\": 1223337600000, \"value\": 0.7359},\n    {\"time\": 1223424000000, \"value\": 0.7368},\n    {\"time\": 1223510400000, \"value\": 0.7337},\n    {\"time\": 1223596800000, \"value\": 0.7317},\n    {\"time\": 1223683200000, \"value\": 0.7387},\n    {\"time\": 1223769600000, \"value\": 0.7467},\n    {\"time\": 1223856000000, \"value\": 0.7461},\n    {\"time\": 1223942400000, \"value\": 0.7366},\n    {\"time\": 1224028800000, \"value\": 0.7319},\n    {\"time\": 1224115200000, \"value\": 0.7361},\n    {\"time\": 1224201600000, \"value\": 0.7437},\n    {\"time\": 1224288000000, \"value\": 0.7432},\n    {\"time\": 1224374400000, \"value\": 0.7461},\n    {\"time\": 1224460800000, \"value\": 0.7461},\n    {\"time\": 1224547200000, \"value\": 0.7454},\n    {\"time\": 1224633600000, \"value\": 0.7549},\n    {\"time\": 1224720000000, \"value\": 0.7742},\n    {\"time\": 1224806400000, \"value\": 0.7801},\n    {\"time\": 1224892800000, \"value\": 0.7903},\n    {\"time\": 1224979200000, \"value\": 0.7876},\n    {\"time\": 1225065600000, \"value\": 0.7928},\n    {\"time\": 1225152000000, \"value\": 0.7991},\n    {\"time\": 1225238400000, \"value\": 0.8007},\n    {\"time\": 1225324800000, \"value\": 0.7823},\n    {\"time\": 1225411200000, \"value\": 0.7661},\n    {\"time\": 1225497600000, \"value\": 0.785},\n    {\"time\": 1225584000000, \"value\": 0.7863},\n    {\"time\": 1225670400000, \"value\": 0.7862},\n    {\"time\": 1225756800000, \"value\": 0.7821},\n    {\"time\": 1225843200000, \"value\": 0.7858},\n    {\"time\": 1225929600000, \"value\": 0.7731},\n    {\"time\": 1226016000000, \"value\": 0.7779},\n    {\"time\": 1226102400000, \"value\": 0.7844},\n    {\"time\": 1226188800000, \"value\": 0.7866},\n    {\"time\": 1226275200000, \"value\": 0.7864},\n    {\"time\": 1226361600000, \"value\": 0.7788},\n    {\"time\": 1226448000000, \"value\": 0.7875},\n    {\"time\": 1226534400000, \"value\": 0.7971},\n    {\"time\": 1226620800000, \"value\": 0.8004},\n    {\"time\": 1226707200000, \"value\": 0.7857},\n    {\"time\": 1226793600000, \"value\": 0.7932},\n    {\"time\": 1226880000000, \"value\": 0.7938},\n    {\"time\": 1226966400000, \"value\": 0.7927},\n    {\"time\": 1227052800000, \"value\": 0.7918},\n    {\"time\": 1227139200000, \"value\": 0.7919},\n    {\"time\": 1227225600000, \"value\": 0.7989},\n    {\"time\": 1227312000000, \"value\": 0.7988},\n    {\"time\": 1227398400000, \"value\": 0.7949},\n    {\"time\": 1227484800000, \"value\": 0.7948},\n    {\"time\": 1227571200000, \"value\": 0.7882},\n    {\"time\": 1227657600000, \"value\": 0.7745},\n    {\"time\": 1227744000000, \"value\": 0.771},\n    {\"time\": 1227830400000, \"value\": 0.775},\n    {\"time\": 1227916800000, \"value\": 0.7791},\n    {\"time\": 1228003200000, \"value\": 0.7882},\n    {\"time\": 1228089600000, \"value\": 0.7882},\n    {\"time\": 1228176000000, \"value\": 0.7899},\n    {\"time\": 1228262400000, \"value\": 0.7905},\n    {\"time\": 1228348800000, \"value\": 0.7889},\n    {\"time\": 1228435200000, \"value\": 0.7879},\n    {\"time\": 1228521600000, \"value\": 0.7855},\n    {\"time\": 1228608000000, \"value\": 0.7866},\n    {\"time\": 1228694400000, \"value\": 0.7865},\n    {\"time\": 1228780800000, \"value\": 0.7795},\n    {\"time\": 1228867200000, \"value\": 0.7758},\n    {\"time\": 1228953600000, \"value\": 0.7717},\n    {\"time\": 1229040000000, \"value\": 0.761},\n    {\"time\": 1229126400000, \"value\": 0.7497},\n    {\"time\": 1229212800000, \"value\": 0.7471},\n    {\"time\": 1229299200000, \"value\": 0.7473},\n    {\"time\": 1229385600000, \"value\": 0.7407},\n    {\"time\": 1229472000000, \"value\": 0.7288},\n    {\"time\": 1229558400000, \"value\": 0.7074},\n    {\"time\": 1229644800000, \"value\": 0.6927},\n    {\"time\": 1229731200000, \"value\": 0.7083},\n    {\"time\": 1229817600000, \"value\": 0.7191},\n    {\"time\": 1229904000000, \"value\": 0.719},\n    {\"time\": 1229990400000, \"value\": 0.7153},\n    {\"time\": 1230076800000, \"value\": 0.7156},\n    {\"time\": 1230163200000, \"value\": 0.7158},\n    {\"time\": 1230249600000, \"value\": 0.714},\n    {\"time\": 1230336000000, \"value\": 0.7119},\n    {\"time\": 1230422400000, \"value\": 0.7129},\n    {\"time\": 1230508800000, \"value\": 0.7129},\n    {\"time\": 1230595200000, \"value\": 0.7049},\n    {\"time\": 1230681600000, \"value\": 0.7095}\n]"
		}
	],
	"BasicPie": [
		{
			"file": "BasicPie.js",
			"content": "import React, { Component } from 'react';\nimport { Polar, Panel } from '@extjs/reactor/modern';\nimport createData from './createData';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Pie'\n]);\n\nexport default class BasicPieChartExample extends Component {\n    \n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name'],\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    refresh = () => {\n        this.store.loadData(createData(5));\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onRefreshClick={this.refresh}\n                    theme={theme}\n                />\n                <Polar\n                    innerPadding={Ext.os.is.Desktop ? 40 : 10}\n                    store={this.store}\n                    theme={theme}\n                    interactions={[\n                        'rotate',\n                        'itemhighlight'\n                    ]}\n                    legend={{\n                        position: 'right',\n                        verticalWidth: 70\n                    }}\n                    series={[{\n                        type: 'pie',\n                        xField: 'g1',\n                        label: {\n                            field: 'name'\n                        },\n                        donut: 30,\n                        highlightCfg: {\n                            margin: 20\n                        },\n                        style: {\n                            stroke: 'white',\n                            miterLimit: 10,\n                            lineCap: 'miter',\n                            lineWidth: 2\n                        }\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    var data = [], \n        record = {\n            id: 0,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'A'\n        }, i;\n\n    data.push(record);\n\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: String.fromCharCode(65 + i)\n        };\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"BasicPieChart": [
		{
			"file": "BasicPieChart.js",
			"content": "import React, { Component } from 'react';\nimport { Polar, Panel } from '@extjs/reactor/modern';\nimport createData from './createData';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Pie'\n]);\n\nexport default class BasicPieChartExample extends Component {\n    \n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name'],\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    refresh = () => {\n        this.store.loadData(createData(5));\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onRefreshClick={this.refresh}\n                    theme={theme}\n                />\n                <Polar\n                    innerPadding={Ext.os.is.Desktop ? 40 : 10}\n                    store={this.store}\n                    theme={theme}\n                    interactions={[\n                        'rotate',\n                        'itemhighlight'\n                    ]}\n                    legend={{\n                        position: 'right',\n                        verticalWidth: 70\n                    }}\n                    series={[{\n                        type: 'pie',\n                        xField: 'g1',\n                        label: {\n                            field: 'name'\n                        },\n                        donut: 30,\n                        highlightCfg: {\n                            margin: 20\n                        },\n                        style: {\n                            stroke: 'white',\n                            miterLimit: 10,\n                            lineCap: 'miter',\n                            lineWidth: 2\n                        }\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    var data = [], \n        record = {\n            id: 0,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'A'\n        }, i;\n\n    data.push(record);\n\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: String.fromCharCode(65 + i)\n        };\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"BasicRadar": [
		{
			"file": "BasicRadar.js",
			"content": "import React, { Component } from 'react';\nimport { Polar, Panel } from '@extjs/reactor/modern';\nimport data from './data';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Scatter',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category'\n]);\n\nexport default class BasicScatterChartExample extends Component {\n    \n    store = Ext.create('Ext.data.Store', {\n        data\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow height={560} layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    theme={theme}\n                />\n                <Polar\n                    insetPadding=\"40 40 60 40\"\n                    store={this.store}\n                    theme={theme}\n                    interactions={[\n                        'rotate'\n                    ]}\n                    sprites={[{\n                        type: 'text',\n                        text: 'Radar Charts - Basic',\n                        fontSize: 22,\n                        width: 100,\n                        height: 30,\n                        x: 12, // the sprite x position\n                        y: 30  // the sprite y position\n                    }, {\n                        type: 'text',\n                        text: 'Data: Browser Stats 2012 - Internet Explorer',\n                        fontSize: 10,\n                        x: 12,\n                        y: 480\n                    }, {\n                        type: 'text',\n                        text: 'Source: http://www.w3schools.com/',\n                        fontSize: 10,\n                        x: 12,\n                        y: 495\n                    }]}\n                    series={[{\n                        type: 'radar',\n                        angleField: 'month',\n                        radiusField: 'data1',\n                        style: {\n                            opacity: 0.80\n                        },\n                        highlight: {\n                            fillStyle: '#000',\n                            lineWidth: 2,\n                            strokeStyle: '#fff'\n                        }\n                    }]}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'radial',\n                        fields: 'data1',\n                        renderer: 'onAxisLabelRender',\n                        grid: true,\n                        minimum: 0,\n                        maximum: 25,\n                        majorTickSteps: 4\n                    }, {\n                        type: 'category',\n                        position: 'angular',\n                        grid: true\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default [\n    { month: 'Jan', data1: 20, data2: 37, data3: 35, data4: 4, other: 4 },\n    { month: 'Feb', data1: 20, data2: 37, data3: 36, data4: 5, other: 2 },\n    { month: 'Mar', data1: 19, data2: 36, data3: 37, data4: 4, other: 4 },\n    { month: 'Apr', data1: 18, data2: 36, data3: 38, data4: 5, other: 3 },\n    { month: 'May', data1: 18, data2: 35, data3: 39, data4: 4, other: 4 },\n    { month: 'Jun', data1: 17, data2: 34, data3: 42, data4: 4, other: 3 },\n    { month: 'Jul', data1: 16, data2: 34, data3: 43, data4: 4, other: 3 },\n    { month: 'Aug', data1: 16, data2: 33, data3: 44, data4: 4, other: 3 },\n    { month: 'Sep', data1: 16, data2: 32, data3: 44, data4: 4, other: 4 },\n    { month: 'Oct', data1: 16, data2: 32, data3: 45, data4: 4, other: 3 },\n    { month: 'Nov', data1: 15, data2: 31, data3: 46, data4: 4, other: 4 },\n    { month: 'Dec', data1: 15, data2: 31, data3: 47, data4: 4, other: 3 }\n];"
		}
	],
	"BasicRadarChart": [
		{
			"file": "BasicRadarChart.js",
			"content": "import React, { Component } from 'react';\nimport { Polar, Panel } from '@extjs/reactor/modern';\nimport data from './data';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Scatter',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category'\n]);\n\nexport default class BasicScatterChartExample extends Component {\n    \n    store = Ext.create('Ext.data.Store', {\n        data\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow height={560} layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    theme={theme}\n                />\n                <Polar\n                    insetPadding=\"40 40 60 40\"\n                    store={this.store}\n                    theme={theme}\n                    interactions={[\n                        'rotate'\n                    ]}\n                    sprites={[{\n                        type: 'text',\n                        text: 'Radar Charts - Basic',\n                        fontSize: 22,\n                        width: 100,\n                        height: 30,\n                        x: 12, // the sprite x position\n                        y: 30  // the sprite y position\n                    }, {\n                        type: 'text',\n                        text: 'Data: Browser Stats 2012 - Internet Explorer',\n                        fontSize: 10,\n                        x: 12,\n                        y: 480\n                    }, {\n                        type: 'text',\n                        text: 'Source: http://www.w3schools.com/',\n                        fontSize: 10,\n                        x: 12,\n                        y: 495\n                    }]}\n                    series={[{\n                        type: 'radar',\n                        angleField: 'month',\n                        radiusField: 'data1',\n                        style: {\n                            opacity: 0.80\n                        },\n                        highlight: {\n                            fillStyle: '#000',\n                            lineWidth: 2,\n                            strokeStyle: '#fff'\n                        }\n                    }]}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'radial',\n                        fields: 'data1',\n                        renderer: 'onAxisLabelRender',\n                        grid: true,\n                        minimum: 0,\n                        maximum: 25,\n                        majorTickSteps: 4\n                    }, {\n                        type: 'category',\n                        position: 'angular',\n                        grid: true\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default [\n    { month: 'Jan', data1: 20, data2: 37, data3: 35, data4: 4, other: 4 },\n    { month: 'Feb', data1: 20, data2: 37, data3: 36, data4: 5, other: 2 },\n    { month: 'Mar', data1: 19, data2: 36, data3: 37, data4: 4, other: 4 },\n    { month: 'Apr', data1: 18, data2: 36, data3: 38, data4: 5, other: 3 },\n    { month: 'May', data1: 18, data2: 35, data3: 39, data4: 4, other: 4 },\n    { month: 'Jun', data1: 17, data2: 34, data3: 42, data4: 4, other: 3 },\n    { month: 'Jul', data1: 16, data2: 34, data3: 43, data4: 4, other: 3 },\n    { month: 'Aug', data1: 16, data2: 33, data3: 44, data4: 4, other: 3 },\n    { month: 'Sep', data1: 16, data2: 32, data3: 44, data4: 4, other: 4 },\n    { month: 'Oct', data1: 16, data2: 32, data3: 45, data4: 4, other: 3 },\n    { month: 'Nov', data1: 15, data2: 31, data3: 46, data4: 4, other: 4 },\n    { month: 'Dec', data1: 15, data2: 31, data3: 47, data4: 4, other: 3 }\n];"
		}
	],
	"BasicScatter": [
		{
			"file": "BasicScatter.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport createData from './createData';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.*',\n    'Ext.chart.series.Scatter',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category'\n]);\n\nexport default class BasicScatterChartExample extends Component {\n    \n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g0', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name']\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    refresh = () => {\n        this.store.loadData(createData(25));\n    }\n\n    toggleZoomOnPan = (zoomOnPan) => {\n        this.refs.chart.getInteraction('panzoom').setZoomOnPan(zoomOnPan);\n    }\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onRefreshClick={this.refresh}\n                    onToggleZoomOnPan={this.toggleZoomOnPan}\n                    onThemeChange={this.changeTheme}\n                    theme={theme}\n                />\n                <Cartesian\n                    ref=\"chart\"\n                    insetPadding=\"20 20 10 10\"\n                    store={this.store}\n                    theme={theme}\n                    legend={{\n                        position: 'bottom'\n                    }}\n                    interactions={[\n                        'panzoom',\n                        'itemhighlight'\n                    ]}\n                    series={[{\n                        type: 'scatter',\n                        xField: 'id',\n                        yField: 'g1',\n                        title: 'Group 1',\n                        highlightCfg: {\n                            strokeStyle: 'red',\n                            lineWidth: 5\n                        },\n                        marker: {\n                            type: 'path',\n                            path: [\n                                ['M', 0, 1],\n                                ['L', 1, 0],\n                                ['L', 0, -1],\n                                ['L', -1, 0],\n                                ['Z']\n                            ],\n                            scale: 10,\n                            lineWidth: 2\n                        }\n                    }, {\n                        type: 'scatter',\n                        xField: 'id',\n                        yField: 'g2',\n                        title: 'Group 2',\n                        highlightCfg: {\n                            strokeStyle: 'red',\n                            lineWidth: 5\n                        },\n                        marker: {\n                            type: 'circle',\n                            radius: 10,\n                            lineWidth: 2\n                        }\n                    }]}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'left',\n                        fields: ['g1', 'g2', 'g3', 'g4'],\n                        visibleRange: [0, 1],\n                        style: {\n                            estStepSize: 20\n                        },\n                        label: {\n                            rotate: {\n                                degrees: -30\n                            }\n                        }\n                    }, {\n                        type: 'category',\n                        position: 'bottom',\n                        visibleRange: [0, 0.5],\n                        fields: 'id'\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    let data = [],\n        record = {\n            id: 0,\n            g0: 300,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'Item-0'\n        }, \n        i;\n\n    data.push(record);\n\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g0: record.g0 + 30 * random(),\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: 'Item-' + i\n        };\n        data.push(record);\n    }\n\n    return data;\n}\n"
		}
	],
	"BasicScatterChart": [
		{
			"file": "BasicScatterChart.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport createData from './createData';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.*',\n    'Ext.chart.series.Scatter',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Category'\n]);\n\nexport default class BasicScatterChartExample extends Component {\n    \n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['id', 'g0', 'g1', 'g2', 'g3', 'g4', 'g5', 'g6', 'name']\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    refresh = () => {\n        this.store.loadData(createData(25));\n    }\n\n    toggleZoomOnPan = (zoomOnPan) => {\n        this.refs.chart.getInteraction('panzoom').setZoomOnPan(zoomOnPan);\n    }\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onRefreshClick={this.refresh}\n                    onToggleZoomOnPan={this.toggleZoomOnPan}\n                    onThemeChange={this.changeTheme}\n                    theme={theme}\n                />\n                <Cartesian\n                    ref=\"chart\"\n                    insetPadding=\"20 20 10 10\"\n                    store={this.store}\n                    theme={theme}\n                    legend={{\n                        position: 'bottom'\n                    }}\n                    interactions={[\n                        'panzoom',\n                        'itemhighlight'\n                    ]}\n                    series={[{\n                        type: 'scatter',\n                        xField: 'id',\n                        yField: 'g1',\n                        title: 'Group 1',\n                        highlightCfg: {\n                            strokeStyle: 'red',\n                            lineWidth: 5\n                        },\n                        marker: {\n                            type: 'path',\n                            path: [\n                                ['M', 0, 1],\n                                ['L', 1, 0],\n                                ['L', 0, -1],\n                                ['L', -1, 0],\n                                ['Z']\n                            ],\n                            scale: 10,\n                            lineWidth: 2\n                        }\n                    }, {\n                        type: 'scatter',\n                        xField: 'id',\n                        yField: 'g2',\n                        title: 'Group 2',\n                        highlightCfg: {\n                            strokeStyle: 'red',\n                            lineWidth: 5\n                        },\n                        marker: {\n                            type: 'circle',\n                            radius: 10,\n                            lineWidth: 2\n                        }\n                    }]}\n                    axes={[{\n                        type: 'numeric',\n                        position: 'left',\n                        fields: ['g1', 'g2', 'g3', 'g4'],\n                        visibleRange: [0, 1],\n                        style: {\n                            estStepSize: 20\n                        },\n                        label: {\n                            rotate: {\n                                degrees: -30\n                            }\n                        }\n                    }, {\n                        type: 'category',\n                        position: 'bottom',\n                        visibleRange: [0, 0.5],\n                        fields: 'id'\n                    }]}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "let seed = 1.3;\n\n// Controllable random.\nfunction random() {\n    seed *= 7.3;\n    seed -= Math.floor(seed);\n    return seed;\n}\n\nexport default function createData(numRecords) {\n    let data = [],\n        record = {\n            id: 0,\n            g0: 300,\n            g1: 700 * random() + 100,\n            g2: 700 * random() + 100,\n            g3: 700 * random() + 100,\n            g4: 700 * random() + 100,\n            g5: 700 * random() + 100,\n            g6: 700 * random() + 100,\n            name: 'Item-0'\n        }, \n        i;\n\n    data.push(record);\n\n    for (i = 1; i < numRecords; i++) {\n        record = {\n            id: i,\n            g0: record.g0 + 30 * random(),\n            g1: Math.abs(record.g1 + 300 * random() - 140),\n            g2: Math.abs(record.g2 + 300 * random() - 140),\n            g3: Math.abs(record.g3 + 300 * random() - 140),\n            g4: Math.abs(record.g4 + 300 * random() - 140),\n            g5: Math.abs(record.g5 + 300 * random() - 140),\n            g6: Math.abs(record.g6 + 300 * random() - 140),\n            name: 'Item-' + i\n        };\n        data.push(record);\n    }\n\n    return data;\n}\n"
		}
	],
	"Button": [
		{
			"file": "Button.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, Button, CheckBoxField, Toolbar } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nexport default class ButtonExample extends Component {\n\n    constructor() {\n        super();\n        this.state = { ui: [] };\n    }\n\n    toggleUI(ui) {\n        if (this.state.ui.indexOf(ui) !== -1) {\n            this.setState({ ui: this.state.ui.filter(u => u !== ui) })\n        } else {\n            this.setState({ ui: [...this.state.ui, ui]})\n        }\n    }\n\n    render() {\n        const { ui } = this.state;\n        const checkboxProps = { labelWidth: 'auto', labelAlign: 'right', margin: '0 20 0 0' };\n\n        return (\n            <Panel shadow={true} height={300} width={380} layout={{type: 'vbox', align: 'center', pack: 'center'}}>\n                <Button ref=\"button\" text=\"Button\" ui={ui.join(' ')} handler={() => Ext.toast('Clicked')}/>\n                <Toolbar docked=\"bottom\" layout=\"vbox\" shadow={true}>\n                    <div style={{marginBottom: '10px', textAlign: 'center'}}>Button UIs</div>\n                    <Container layout=\"hbox\">\n                        <CheckBoxField {...checkboxProps} label=\"action\" onChange={() => this.toggleUI('action')} />\n                        <CheckBoxField {...checkboxProps} label=\"alt\" onChange={() => this.toggleUI('alt')} />\n                        <CheckBoxField {...checkboxProps} label=\"confirm\" onChange={() => this.toggleUI('confirm')} />\n                        <CheckBoxField {...checkboxProps} label=\"decline\"onChange={() => this.toggleUI('decline')} />\n                        <CheckBoxField {...checkboxProps} label=\"round\" onChange={() => this.toggleUI('round')} />\n                    </Container>\n                </Toolbar>\n            </Panel>\n        )\n    }\n}"
		}
	],
	"Calendar": [
		{
			"file": "Calendar.js",
			"content": "import React, { Component } from 'react';\nimport { Calendar } from '@extjs/reactor/modern';\nimport './data';\n\nexport default class CalendarExample extends Component {\n    constructor() {\n        super();\n\n        this.store = Ext.create('Ext.calendar.store.Calendars', {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: '/KitchenSink/CalendarFull'\n            }\n        });\n    }\n\n    render() {\n        return (\n            <Calendar\n                shadow\n                views={{\n                    day: {\n                        startTime: 6,\n                        endTime: 22\n                    },\n                    workweek: {\n                        xtype: 'calendar-week',\n                        controlStoreRange: false,\n                        titleTpl: '{start:date(\"j M\")} - {end:date(\"j M\")}',\n                        label: 'Work Week',\n                        weight: 15,\n                        dayHeaderFormat: 'D d',\n                        firstDayOfWeek: 1,\n                        visibleDays: 5                    \n                    }\n                }}\n                timezoneOffset={0}\n                store={this.store}\n            />\n        );\n    }\n}"
		}
	],
	"Candlestick": [
		{
			"file": "Candlestick.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport ChartToolbar from '../Charts/ChartToolbar';\nimport createData from './createData';\n\nExt.require([\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Time',\n    'Ext.chart.series.CandleStick',\n    'Ext.chart.interactions.Crosshair'\n]);\n\nexport default class CandlestickChartExample extends Component {\n\n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['time', 'open', 'high', 'low', 'close']\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    refresh = () => {\n        this.store.loadData(createData(1000));\n    }\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    toggleZoomOnPan = (zoomOnPan) => {\n        this.toggleCrosshair(false);\n        this.panzoom.setZoomOnPan(zoomOnPan);\n    }\n\n    toggleCrosshair = (crosshair) => {\n        this.panzoom.setEnabled(!crosshair);\n        this.crosshair.setEnabled(crosshair)\n    }\n\n    componentDidMount() {\n        const chart = this.refs.chart;\n        this.panzoom = chart.getInteraction('panzoom');\n        this.crosshair = chart.getInteraction('crosshair');\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onToggleZoomOnPan={this.toggleZoomOnPan}\n                    onToggleCrosshair={this.toggleCrosshair}\n                    onRefreshClick={this.refresh}\n                    theme={theme}\n                />\n                <Cartesian\n                    ref=\"chart\"\n                    store={this.store}\n                    theme={theme}\n                    interactions={[{\n                        type: 'panzoom',\n                        axes: {\n                            left: {\n                                allowPan: false,\n                                allowZoom: false\n                            },\n                            bottom: {\n                                allowPan: true,\n                                allowZoom: true\n                            }\n                        }\n                    }, {\n                        type: 'crosshair',\n                        axes: {\n                            label: {\n                                fillStyle: 'white'\n                            },\n                            rect: {\n                                fillStyle: '#344459',\n                                opacity: 0.7,\n                                radius: 5\n                            }\n                        }\n                    }]}\n                    series={{\n                        type: 'candlestick',\n                        xField: 'time',\n                        openField: 'open',\n                        highField: 'high',\n                        lowField: 'low',\n                        closeField: 'close',\n                        style: {\n                            barWidth: 10,\n                            opacity: 0.9,\n                            dropStyle: {\n                                fill: 'rgb(237,123,43)',\n                                stroke: 'rgb(237,123,43)'\n                            },\n                            raiseStyle: {\n                                fill: 'rgb(55,153,19)',\n                                stroke: 'rgb(55,153,19)'\n                            }\n                        }\n                    }}\n                    axes={[{\n                        type: 'numeric',\n                        fields: ['open', 'high', 'low', 'close'],\n                        position: 'left',\n                        maximum: 1000,\n                        minimum: 0\n                    }, {\n                        type: 'time',\n                        fields: ['time'],\n                        position: 'bottom',\n                        visibleRange: [0, 0.3],\n                        style: {\n                            axisLine: false\n                        }\n                    }]}\n                />\n            </Panel>            \n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "var seed = 1.4;\n\n// Controllable random.\nfunction random() {\n    seed *= 42.7;\n    seed -= Math.floor(seed);\n    return seed * 2 - 1;\n}\n\nexport default function createData(count) {\n    let data = [], i, record = {\n        time: new Date('Jan 1 2010').getTime(),\n        close: 600\n    };\n    \n    for (i = 0; i < count; i++) {\n        var ohlc = [random() * 25, random() * 25, random() * 25];\n        record = {\n            time: record.time + 3600000,\n            open: record.close,\n            high: record.close + Math.max.apply(Math, ohlc),\n            low: record.close + Math.min.apply(Math, ohlc),\n            close: record.close + ohlc[1]\n        };\n        if (record.open < record.low) {\n            record.low = record.open;\n        } else if (record.open > record.high) {\n            record.high = record.open;\n        }\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"Carousel": [
		{
			"file": "Carousel.js",
			"content": "import React from 'react';\nimport { Carousel, Container } from '@extjs/reactor/modern';\n\nexport default function CarouselExample() {\n    return (\n        <Container layout={{ type: 'vbox', align: 'stretch' }} shadow={true}>\n            <Carousel flex={1} >\n                <Container {...cardProps} >\n                    <div>Swipe left to show the next card...</div>\n                </Container>\n                <Container {...cardProps}>\n                    <div>You can also tap on either side of the indicators.</div>\n                </Container>\n                <Container {...cardProps}>\n                    <div>Card #3</div>\n                </Container>\n            </Carousel>\n            <Carousel ui=\"light\" direction=\"vertical\" flex={1}>\n                <Container {...cardProps} style={{...styles.cardDark, ...styles.card}}>\n                    <div>Carousels can also be vertical <em>(swipe up)...</em></div>\n                </Container>\n                <Container {...cardProps} style={{...styles.cardDark, ...styles.card}}>\n                    <div>And can also use <code style={styles.code}>ui:light</code>.</div>\n                </Container>\n                <Container {...cardProps} style={{...styles.cardDark, ...styles.card}}>\n                    <div>Card #3</div>\n                </Container>\n            </Carousel>\n        </Container>\n    )\n}\n\nconst styles = {\n    card: {\n        fontSize: '18px'\n    },\n    cardLight: {\n        backgroundColor: 'white',\n    },\n    cardDark: {\n        backgroundColor: '#303030',\n        color: 'white'\n    },\n    code: {\n        color: '#859900'\n    }\n};\n\nconst cardProps = {\n    flex: 1,\n    style: { ...styles.cardLight, ...styles.card },\n    layout: {\n        type: 'vbox',\n        align: 'center',\n        pack: 'center'\n    }\n};\n\n"
		}
	],
	"CheckBoxField": [
		{
			"file": "CheckBoxField.js",
			"content": "import React from 'react';\nimport { FormPanel, CheckBoxField } from '@extjs/reactor/modern';\n\nexport default function CheckBoxFieldExample() {\n    return (\n        <FormPanel shadow={true} layout={{type: 'vbox', align: 'left'}}>\n            <CheckBoxField \n                label=\"Label Right\" \n                labelAlign=\"right\"\n                labelWidth=\"auto\"\n            />\n            <CheckBoxField \n                label=\"Label Left\" \n                labelAlign=\"left\"\n                labelWidth=\"auto\"\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"DatePickerField": [
		{
			"file": "DatePickerField.js",
			"content": "import React from 'react';\nimport { FormPanel, DatePickerField } from '@extjs/reactor/modern';\n\nexport default function DatePickerFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <DatePickerField \n                value={new Date()}\n                destroyPickerOnHide={true}\n                label=\"Date\"\n                picker={{\n                    yearFrom: 1990\n                }}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"Draw": [
		{
			"file": "Draw.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, Draw, Toolbar, Button, Spacer, Label } from '@extjs/reactor/modern';\n\nexport default class DrawExample extends Component {\n    \n    componentDidMount() { \n        this.refs.draw.on({\n            element: 'element',\n            mousedown: this.onMouseDown,\n            mousemove: this.onMouseMove,\n            mouseup: this.onMouseUp,\n            mouseleave: this.onMouseUp\n        });\n    }\n\n    clear = () => {\n        const { draw } = this.refs;\n        draw.getSurface().destroy();\n        draw.getSurface('overlay').destroy();\n        draw.renderFrame();\n    }\n\n    onMouseDown = (e) => {\n        let { draw } = this.refs, \n            surface = draw.getSurface(),\n            xy, x, y;\n\n        if (!draw.sprite) {\n            xy = surface.getEventXY(e);\n            x = xy[0];\n            y = xy[1];\n\n            draw.list = [x, y, x, y];\n            draw.lastEventX = x;\n            draw.lastEventY = y;\n\n            draw.sprite = surface.add({\n                type: 'path',\n                path: ['M', draw.list[0], draw.list[1], 'L', draw.list[0] + 1e-1, draw.list[1] + 1e-1],\n                lineWidth: 30 * Math.random() + 10,\n                lineCap: 'round',\n                lineJoin: 'round',\n                strokeStyle: new Ext.util.Color(Math.random() * 127 + 128, Math.random() * 127 + 128, Math.random() * 127 + 128)\n            });\n\n            surface.renderFrame();\n        }\n    }\n\n    onMouseMove = (e) => {\n        let { draw } = this.refs,\n            surface = draw.getSurface(),\n            path, xy, x, y, dx, dy, D;\n\n        if (draw.sprite) {\n            xy = surface.getEventXY(e);\n            x = xy[0];\n            y = xy[1];\n            dx = draw.lastEventX - x;\n            dy = draw.lastEventY - y;\n            D = 10;\n\n            if (dx * dx + dy * dy < D * D) {\n                draw.list.length -= 2;\n                draw.list.push(x, y);\n            } else {\n                draw.list.length -= 2;\n                draw.list.push(draw.lastEventX = x, draw.lastEventY = y);\n                draw.list.push(draw.lastEventX + 1, draw.lastEventY + 1);\n            }\n\n            path = smoothList(draw.list);\n\n            draw.sprite.setAttributes({\n                path: path\n            });\n\n            if (Ext.os.is.Android) {\n                Ext.draw.Animator.schedule(() => surface.renderFrame(), draw);\n            } else {\n                surface.renderFrame();\n            }\n        }\n    }\n\n    onMouseUp = (e) => {\n        this.refs.draw.sprite = null;\n    }\n\n    onResize = () => {\n        const { draw } = this.refs;\n        const size = draw.element.getSize();\n        draw.getSurface().setRect([0, 0, size.width, size.height]);\n        draw.renderFrame();\n    }\n\n    render() {\n        return (\n            <Panel shadow layout=\"fit\">\n                <Toolbar docked=\"top\">\n                    <div>Use your {Ext.supports.Touch ? 'finger' : 'mouse'} to paint on the surface below.</div>\n                    <Spacer/>\n                    <Button handler={this.clear}>Clear</Button>\n                </Toolbar>\n                <Draw ref=\"draw\"/>  \n            </Panel>\n        )\n    }\n}\n\nfunction smoothList(points) {\n    if (points.length < 3) {\n        return ['M', points[0], points[1]];\n    }\n\n    var dx = [], dy = [], result = ['M'],\n        i, ln = points.length;\n\n    for (i = 0; i < ln; i += 2) {\n        dx.push(points[i]);\n        dy.push(points[i + 1]);\n    }\n\n    dx = Ext.draw.Draw.spline(dx);\n    dy = Ext.draw.Draw.spline(dy);\n    result.push(dx[0], dy[0], 'C');\n\n    for (i = 1, ln = dx.length; i < ln; i++) {\n        result.push(dx[i], dy[i]);\n    }\n\n    return result;\n}"
		}
	],
	"EmailField": [
		{
			"file": "EmailField.js",
			"content": "import React from 'react';\nimport { FormPanel, EmailField } from '@extjs/reactor/modern';\n\nexport default function EmailFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <EmailField \n                placeHolder=\"me@sencha.com\" \n                label=\"Email\"\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"FormPanel": [
		{
			"file": "FormPanel.js",
			"content": "import React, { Component } from 'react';\n\nimport { \n    FieldSet,\n    FormPanel, \n    UrlField, \n    TextField, \n    EmailField, \n    RadioField, \n    TextAreaField, \n    ToggleField, \n    SliderField, \n    DatePickerField, \n    PasswordField,\n    SpinnerField,\n    CheckBoxField,\n    Button,\n    SelectField,\n    Toolbar\n} from '@extjs/reactor/modern';\n\nexport default class FormPanelExample extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            disabled: false\n        };\n    }\n\n    toggleDisabled() {\n        this.setState({ disabled: !this.state.disabled });\n    }\n\n    render() {\n        const { disabled } = this.state;\n        \n        return (\n            <FormPanel ref=\"form\" shadow={true}>\n                <FieldSet disabled={disabled} ref=\"personal\" title=\"Personal Info\" layout={{ type: 'vbox', align: 'stretch' }} instructions=\"Please enter the information above.\">\n                    <TextField {...defaults} label=\"Name\" required={true}/>\n                    <PasswordField {...defaults} label=\"Password\" required={true} revealable={true}/>\n                    <EmailField {...defaults} label=\"Email\" placeHolder=\"me@sencha.com\"/>\n                    <UrlField {...defaults} label=\"URL\" placeHolder=\"http://sencha.com\"/>\n                    <SpinnerField label=\"Spinner\" minValue={0} maxValue={0} stepValue={1} cycle={true} margin=\"15 0 0 0\"/>\n                    <CheckBoxField label=\"Active\"/>\n                    <DatePickerField {...defaults} label=\"Start Date\"/>\n                    <SelectField {...defaults} label=\"Rank\"\n                        options={[\n                            { text: 'Master', value: 'master' },\n                            { text: 'Journeyman', value: 'journeyman' },\n                            { text: 'Apprentice', value: 'apprentice' }\n                        ]}\n                    />\n                    <SliderField label=\"Slider\"/>\n                    <ToggleField label=\"Toggle\"/>\n                    <TextAreaField label=\"Bio\" maxRows={5}/>\n                </FieldSet>\n                <FieldSet disabled={disabled} title=\"Favorite Color\" layout={{type: 'vbox', align: 'left'}}>\n                    <RadioField {...radioProps} label=\"Red\" value=\"red\"/>\n                    <RadioField {...radioProps} label=\"Blue\" value=\"blue\"/>\n                    <RadioField {...radioProps} label=\"Green\" value=\"green\"/>\n                    <RadioField {...radioProps} label=\"Purple\" value=\"purple\"/>\n                </FieldSet>\n                <Toolbar docked=\"bottom\">\n                    <Button ui=\"action\" text={disabled ? 'Enable All' : 'Disable All'} margin=\"0 10 0 0\" handler={this.toggleDisabled.bind(this)}/>\n                    <Button ui=\"action\" text=\"Reset\" handler={() => this.refs.form.reset()}/>\n                </Toolbar>\n            </FormPanel>\n        );\n    }\n}\n\nconst defaults = {\n    labelAlign: \"placeholder\"\n};\n\nconst radioProps = {\n    name: 'color',\n    labelAlign: 'right',\n    labelWidth: 'auto'\n};"
		}
	],
	"Gauge": [
		{
			"file": "Gauge.js",
			"content": "\nimport React, { Component } from 'react';\nimport { SliderField, Gauge, Panel } from '@extjs/reactor/modern';\n\nexport default class GaugeExample extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            value: 40\n        }\n    }\n\n    updateGauges(slider, value) {\n        this.setState({ value })\n    }\n\n    render() {\n        const { value } = this.state;\n\n        return (\n            <Panel shadow={true} layout=\"vbox\">\n                <SliderField label=\"Value\" onChange={this.updateGauges.bind(this)} value={value}/>\n                <Gauge flex={1} value={value}/>\n                <Gauge flex={1} value={value} ui=\"green\" trackStart={180} trackLength={360}/>\n            </Panel>\n        )\n    }\n\n}"
		}
	],
	"Grid": [
		{
			"file": "Grid.js",
			"content": "import React, { Component } from 'react';\nimport { Grid, ActionSheet, Toolbar, Container, Button } from '@extjs/reactor/modern';\nimport './data';\nimport model from './model';\n\nExt.require('Ext.grid.plugin.*');\nExt.require('Ext.tip.ToolTip');\n\nExt.define('KitchenSink.view.grid.BigDataRowModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.grid-bigdata-row',\n    formulas: {\n        ratingGroup: function (get) {\n            const age = get('record.averageRating');\n\n            if (age < 4) {\n                return 0;\n            }\n            if (age < 5) {\n                return 1;\n            }\n            if (age < 6) {\n                return 2;\n            }\n\n            return 3;\n        }\n    }\n});\n\nexport default class GridExample extends Component {\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.Store', {\n            model: model,\n            autoLoad: true,\n            groupField: 'department',\n            pageSize: 0,\n            proxy: {\n                type: 'ajax',\n                url: '/KitchenSink/BigData'\n            }            \n        }); \n    }\n\n    exportToXlsx() {\n        this.doExport({\n            type: 'excel07',\n            title: 'Grid Export Demo',\n            fileName: 'GridExport.xlsx'\n        });\n    }\n\n    exportToXml() {\n        this.doExport({\n            type:       'excel03',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.xml'\n        });\n    }\n\n    exportToCSV() {\n        this.doExport({\n            type:       'csv',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.csv'\n        });\n    }\n\n    exportToTSV() {\n         this.doExport({\n            type:       'tsv',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.csv'\n        });\n    }\n\n    exportToHtml() {\n         this.doExport({\n            type:       'html',\n            title:      'Grid Export Demo',\n            fileName:   'GridExport.html'\n        });\n    }\n\n    doExport(config) {\n        this.refs.exportMenu.hide();\n        this.refs.grid.saveDocumentAs(config);\n    }\n\n    onVerify(btn) {\n        const cell = btn.getParent(), record = cell.getRecord();\n        record.set('verified', true);\n        Ext.Msg.alert('Verify', 'Verify ' + record.get('forename') + ' ' + record.get('surname'));\n    }\n\n    salarySummaryRenderer(value) {\n        return Ext.util.Format.usMoney(value);\n    }\n\n    render() {\n        return (\n            <Container layout=\"fit\">\n                <ActionSheet ref=\"exportMenu\">\n                    <Button handler={this.exportToXlsx.bind(this)} text=\"Excel xlsx (all Items)\"/>\n                    <Button handler={this.exportToXml.bind(this)} text=\"Excel xml (all Items)\"/>\n                    <Button handler={this.exportToCSV.bind(this)} text=\"CSV (all Items)\"/>\n                    <Button handler={this.exportToTSV.bind(this)} text=\"TSV (all Items)\"/>\n                    <Button handler={this.exportToHtml.bind(this)} text=\"HTML (all Items)\"/>\n                    <Button handler={() => this.refs.exportMenu.hide()} text=\"Cancel\"/>\n                </ActionSheet>\n                <Grid\n                    ref=\"grid\"\n                    store={this.store}\n                    shadow\n                    grouped\n                    plugins={[\n                        { type: 'grideditable' },\n                        { type: 'gridviewoptions' },\n                        { type: 'pagingtoolbar' },\n                        { type: 'summaryrow' },\n                        { type: 'columnresizing' },\n                        { type: 'rowexpander' },\n                        { type: 'multiselection' },\n                        { type: 'gridexporter' }\n                    ]}\n                    itemConfig={{\n                        viewModel: {\n                            type: 'grid-bigdata-row'\n                        },\n                        body: {\n                            tpl: '<img src=\"{avatar}\" height=\"100px\" style=\"float:left;margin:0 10px 5px 0\"><b>{name}<br></b>{dob:date}'\n                        }\n                    }}\n                    columns={[\n                        { \n                            xtype: 'rownumberer' \n                        }, {\n                            text: 'Id',\n                            dataIndex: 'employeeNo',\n                            flex: 1,\n                            minWidth: 100,\n                            exportStyle: {\n                                format: 'General Number',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }\n                        }, {\n                            text: 'Name',\n                            dataIndex: 'fullName',\n                            styleHtmlContent: true,\n                            minWidth: 150\n                        }, {\n                            xtype: 'checkcolumn',\n                            headerCheckbox: true,\n                            dataIndex: 'verified',\n                            text: 'Verified'\n                        }, {\n                            text: 'Ratings',\n                            columns: [{\n                                text: 'Avg',\n                                xtype: 'numbercolumn',\n                                dataIndex: 'averageRating',\n                                width: 75,\n                                cell: {\n                                    cls:'big-data-ratings-cell'\n                                }\n                                    \n                            }, {\n                                text: 'All',\n                                dataIndex: 'rating',\n                                ignoreExport: true,\n                                cell: {\n                                    xtype: 'widgetcell',\n                                    forceWidth: true,\n                                    widget: {\n                                        xtype: 'sparklineline'\n                                    }\n                                }\n                            }]\n                        }, {\n                            text: 'Date of Birth',\n                            dataIndex: 'dob',\n                            editable: true,\n                            xtype: 'datecolumn',\n                            format: 'd-m-Y',\n                            // you can define an export style for a column\n                            // you can set alignment, format etc\n                            exportStyle: [{\n                                // no type key is defined here which means that me is the default style\n                                // that will be used by all exporters\n                                format: 'medium Date',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }, {\n                                // the type key means that me style will only be used by the csv exporter\n                                // and for all others the default one, defined above, will be used\n                                type: 'csv',\n                                format: 'Short Date'\n                            }]\n                        }, {\n                            text: '',\n                            width: 100,\n                            ignoreExport: true,\n                            cell: {\n                                xtype: 'widgetcell',\n                                widget: {\n                                    xtype: 'button',\n                                    ui: 'action',\n                                    text: 'Verify',\n                                    handler: this.onVerify.bind(this)\n                                }\n                            }\n                        }, {\n                            text: 'Join Date',\n                            dataIndex: 'joinDate',\n                            editable: true,\n                            xtype: 'datecolumn',\n                            format: 'd-m-Y',\n                            exportStyle: {\n                                format: 'medium Date',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }\n                        },\n                        {\n                            text: 'Notice Period',\n                            dataIndex: 'noticePeriod',\n                            editable: true\n                        },\n                        {\n                            text: 'Email',\n                            dataIndex: 'email',\n                            editable: true,\n                            editor: {\n                                xtype: 'emailfield'\n                            },\n                            width: 250\n                        },\n                        {\n                            text: 'Absences',\n                            columns: [{\n                                text: 'Illness',\n                                dataIndex: 'sickDays',\n                                align: 'center',\n                                summaryType: 'sum'\n                            }, {\n                                text: 'Holidays',\n                                dataIndex: 'holidayDays',\n                                align: 'center',\n                                summaryType: 'sum'\n                            }, {\n                                text: 'Holiday Allowance',\n                                dataIndex: 'holidayAllowance',\n                                align: 'center',\n                                summaryType: 'sum',\n                                summaryFormatter: 'number(\"0.00\")',\n                                formatter: 'number(\"0.00\")'\n                            }]\n                        },\n                        {\n                            text: 'Salary',\n                            dataIndex: 'salary',\n                            renderer: Ext.util.Format.usMoney,\n                            editable: true,\n                            width: 150,\n                            summaryType: 'sum',\n                            summaryRenderer: this.salarySummaryRenderer.bind(this),\n                            exportStyle: {\n                                format: 'Currency',\n                                alignment: {\n                                    horizontal: 'Right'\n                                }\n                            }\n                        }\n                    ]}\n                    onBeforeDocumentSave={(view) => {\n                        view.mask({\n                            xtype: 'loadmask',\n                            message: 'Document is prepared for export. Please wait ...'\n                        })\n                    }}\n                    onDocumentSave={(view) => view.unmask()}\n                >\n                    <Toolbar docked=\"top\">\n                        <Button text=\"Export to...\" handler={() => this.refs.exportMenu.show()}/>\n                    </Toolbar>\n                </Grid>\n            </Container>\n        )\n    }\n}"
		},
		{
			"file": "model.js",
			"content": "export default Ext.define('GridModel', {\n    extend: 'Ext.data.Model',\n    fields: [\n        {\n            name: 'employeeNo'\n        }, {\n            name: 'rating'\n        }, {\n            name: 'averageRating',\n            calculate: function (data) {\n                var average,\n                    i,\n                    ratings = data.rating || [],\n                    count = ratings.length;\n                for (i = 0, average = 0; i < count; i++) {\n                    average += data.rating[i];\n                }\n                return average / ratings.length;\n            }\n        }, {\n            name: 'salary',\n            type: 'number'\n        }, {\n            name: 'forename'\n        }, {\n            name: 'surname'\n        }, {\n            name: 'fullName',\n            calculate: ({forename, surname}) => `${forename} ${surname}`\n        }, {\n            name: 'email'\n        }, {\n            name: 'department'\n        }, {\n            name: 'dob',\n            type: 'date',\n            dateFormat: 'Ymd'\n        }, {\n            name: 'joinDate',\n            type: 'date',\n            dateFormat: 'Ymd'\n        }, {\n            name: 'noticePeriod'\n        }, {\n            name: 'sickDays',\n            type: 'integer'\n        }, {\n            name: 'holidayDays',\n            type: 'integer'\n        }, {\n            name: 'holidayAllowance',\n            type: 'integer'\n        }, {\n            name: 'avatar'\n        }, {\n            name: 'ratingLastYear',\n            type: 'integer'\n        }, {\n            name: 'ratingmeYear',\n            type: 'integer'\n        }\n    ],\n    idField: 'employeeNo'\n})"
		}
	],
	"List": [
		{
			"file": "List.js",
			"content": "import React, { Component } from 'react';\nimport { List } from '@extjs/reactor/modern';\nimport data from './data';\n\nExt.require([\n    'Ext.Toast',\n    'Ext.MessageBox'\n]);\n\nexport default class ListExample extends Component {\n\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.Store', { \n            data,\n            grouper: {\n                groupFn: function(record) {\n                    return record.get('last_name')[0];\n                }\n            },\n            sorters: ['last_name', 'first_name']\n        });\n    }\n\n    render() {\n        return (\n            <List\n                indexBar={true}\n                shadow={true}\n                itemTpl=\"{first_name} {last_name}\"\n                grouped={true}\n                pinHeaders={true}\n                store={this.store}\n                onSelect={(list, record) => {\n                    Ext.toast(`You selected ${record.get('first_name')} ${record.get('last_name')}.`)\n                }}\n                config={{\n                    onItemDisclosure: (record, btn, index) => {\n                        Ext.Msg.alert('Tap', 'Disclose more info for ' + record.get('first_name'), Ext.emptyFn);\n                    }\n                }}\n            />\n        )\n    }\n\n}"
		},
		{
			"file": "data.js",
			"content": "export default [{\"id\":1,\"first_name\":\"Catherine\",\"last_name\":\"Alvarez\"},\n{\"id\":2,\"first_name\":\"Linda\",\"last_name\":\"Washington\"},\n{\"id\":3,\"first_name\":\"Eric\",\"last_name\":\"Griffin\"},\n{\"id\":4,\"first_name\":\"Pamela\",\"last_name\":\"Sanders\"},\n{\"id\":5,\"first_name\":\"Marie\",\"last_name\":\"Evans\"},\n{\"id\":6,\"first_name\":\"Rebecca\",\"last_name\":\"Black\"},\n{\"id\":7,\"first_name\":\"Martin\",\"last_name\":\"Woods\"},\n{\"id\":8,\"first_name\":\"Paul\",\"last_name\":\"Stewart\"},\n{\"id\":9,\"first_name\":\"Ruby\",\"last_name\":\"Peterson\"},\n{\"id\":10,\"first_name\":\"Gregory\",\"last_name\":\"Stephens\"},\n{\"id\":11,\"first_name\":\"Irene\",\"last_name\":\"Hawkins\"},\n{\"id\":12,\"first_name\":\"Brandon\",\"last_name\":\"Stephens\"},\n{\"id\":13,\"first_name\":\"Julie\",\"last_name\":\"Ray\"},\n{\"id\":14,\"first_name\":\"Donald\",\"last_name\":\"Kelly\"},\n{\"id\":15,\"first_name\":\"Martha\",\"last_name\":\"Lawrence\"},\n{\"id\":16,\"first_name\":\"Jason\",\"last_name\":\"Franklin\"},\n{\"id\":17,\"first_name\":\"Harold\",\"last_name\":\"Perry\"},\n{\"id\":18,\"first_name\":\"Kathryn\",\"last_name\":\"Stevens\"},\n{\"id\":19,\"first_name\":\"Alice\",\"last_name\":\"Hansen\"},\n{\"id\":20,\"first_name\":\"Christine\",\"last_name\":\"Garza\"},\n{\"id\":21,\"first_name\":\"Christine\",\"last_name\":\"Moore\"},\n{\"id\":22,\"first_name\":\"Susan\",\"last_name\":\"Robinson\"},\n{\"id\":23,\"first_name\":\"Annie\",\"last_name\":\"Mendoza\"},\n{\"id\":24,\"first_name\":\"Laura\",\"last_name\":\"Hall\"},\n{\"id\":25,\"first_name\":\"Barbara\",\"last_name\":\"Jordan\"},\n{\"id\":26,\"first_name\":\"Dorothy\",\"last_name\":\"Cook\"},\n{\"id\":27,\"first_name\":\"James\",\"last_name\":\"Reid\"},\n{\"id\":28,\"first_name\":\"David\",\"last_name\":\"Gutierrez\"},\n{\"id\":29,\"first_name\":\"Lawrence\",\"last_name\":\"Rogers\"},\n{\"id\":30,\"first_name\":\"Maria\",\"last_name\":\"Garza\"},\n{\"id\":31,\"first_name\":\"Robert\",\"last_name\":\"Chavez\"},\n{\"id\":32,\"first_name\":\"Brenda\",\"last_name\":\"Franklin\"},\n{\"id\":33,\"first_name\":\"Janice\",\"last_name\":\"Palmer\"},\n{\"id\":34,\"first_name\":\"Adam\",\"last_name\":\"Gordon\"},\n{\"id\":35,\"first_name\":\"Carol\",\"last_name\":\"Rice\"},\n{\"id\":36,\"first_name\":\"George\",\"last_name\":\"Mendoza\"},\n{\"id\":37,\"first_name\":\"Steve\",\"last_name\":\"Fields\"},\n{\"id\":38,\"first_name\":\"Louis\",\"last_name\":\"Rogers\"},\n{\"id\":39,\"first_name\":\"Ryan\",\"last_name\":\"Andrews\"},\n{\"id\":40,\"first_name\":\"Cheryl\",\"last_name\":\"Fernandez\"},\n{\"id\":41,\"first_name\":\"Lawrence\",\"last_name\":\"Black\"},\n{\"id\":42,\"first_name\":\"Linda\",\"last_name\":\"Clark\"},\n{\"id\":43,\"first_name\":\"Kevin\",\"last_name\":\"Palmer\"},\n{\"id\":44,\"first_name\":\"Evelyn\",\"last_name\":\"Sims\"},\n{\"id\":45,\"first_name\":\"Brenda\",\"last_name\":\"Griffin\"},\n{\"id\":46,\"first_name\":\"Lawrence\",\"last_name\":\"Woods\"},\n{\"id\":47,\"first_name\":\"Amy\",\"last_name\":\"Oliver\"},\n{\"id\":48,\"first_name\":\"Todd\",\"last_name\":\"Simpson\"},\n{\"id\":49,\"first_name\":\"Gloria\",\"last_name\":\"Patterson\"},\n{\"id\":50,\"first_name\":\"Scott\",\"last_name\":\"Greene\"},\n{\"id\":51,\"first_name\":\"Rachel\",\"last_name\":\"Gray\"},\n{\"id\":52,\"first_name\":\"Peter\",\"last_name\":\"Ray\"},\n{\"id\":53,\"first_name\":\"Martin\",\"last_name\":\"Porter\"},\n{\"id\":54,\"first_name\":\"Jean\",\"last_name\":\"Gutierrez\"},\n{\"id\":55,\"first_name\":\"Gary\",\"last_name\":\"Webb\"},\n{\"id\":56,\"first_name\":\"Billy\",\"last_name\":\"Bell\"},\n{\"id\":57,\"first_name\":\"Charles\",\"last_name\":\"Nelson\"},\n{\"id\":58,\"first_name\":\"Annie\",\"last_name\":\"Diaz\"},\n{\"id\":59,\"first_name\":\"Daniel\",\"last_name\":\"Watkins\"},\n{\"id\":60,\"first_name\":\"Terry\",\"last_name\":\"Watson\"},\n{\"id\":61,\"first_name\":\"Teresa\",\"last_name\":\"Dunn\"},\n{\"id\":62,\"first_name\":\"Nancy\",\"last_name\":\"Pierce\"},\n{\"id\":63,\"first_name\":\"Cynthia\",\"last_name\":\"Martinez\"},\n{\"id\":64,\"first_name\":\"Beverly\",\"last_name\":\"Matthews\"},\n{\"id\":65,\"first_name\":\"Keith\",\"last_name\":\"Crawford\"},\n{\"id\":66,\"first_name\":\"Christopher\",\"last_name\":\"Banks\"},\n{\"id\":67,\"first_name\":\"Gregory\",\"last_name\":\"Hansen\"},\n{\"id\":68,\"first_name\":\"Joyce\",\"last_name\":\"Hunt\"},\n{\"id\":69,\"first_name\":\"Nancy\",\"last_name\":\"Rice\"},\n{\"id\":70,\"first_name\":\"Dorothy\",\"last_name\":\"Murray\"},\n{\"id\":71,\"first_name\":\"George\",\"last_name\":\"Griffin\"},\n{\"id\":72,\"first_name\":\"Marie\",\"last_name\":\"Adams\"},\n{\"id\":73,\"first_name\":\"James\",\"last_name\":\"Oliver\"},\n{\"id\":74,\"first_name\":\"Joshua\",\"last_name\":\"Wood\"},\n{\"id\":75,\"first_name\":\"Martha\",\"last_name\":\"Marshall\"},\n{\"id\":76,\"first_name\":\"Shawn\",\"last_name\":\"Sanders\"},\n{\"id\":77,\"first_name\":\"Melissa\",\"last_name\":\"Cook\"},\n{\"id\":78,\"first_name\":\"Shawn\",\"last_name\":\"Martinez\"},\n{\"id\":79,\"first_name\":\"Roy\",\"last_name\":\"Clark\"},\n{\"id\":80,\"first_name\":\"Douglas\",\"last_name\":\"Carroll\"},\n{\"id\":81,\"first_name\":\"Joan\",\"last_name\":\"Jordan\"},\n{\"id\":82,\"first_name\":\"Stephen\",\"last_name\":\"Kennedy\"},\n{\"id\":83,\"first_name\":\"Alan\",\"last_name\":\"Coleman\"},\n{\"id\":84,\"first_name\":\"Patrick\",\"last_name\":\"Morris\"},\n{\"id\":85,\"first_name\":\"Sean\",\"last_name\":\"Fisher\"},\n{\"id\":86,\"first_name\":\"Jeremy\",\"last_name\":\"Hernandez\"},\n{\"id\":87,\"first_name\":\"Irene\",\"last_name\":\"Foster\"},\n{\"id\":88,\"first_name\":\"Larry\",\"last_name\":\"Roberts\"},\n{\"id\":89,\"first_name\":\"Adam\",\"last_name\":\"Gibson\"},\n{\"id\":90,\"first_name\":\"Willie\",\"last_name\":\"Lawson\"},\n{\"id\":91,\"first_name\":\"Marilyn\",\"last_name\":\"Stanley\"},\n{\"id\":92,\"first_name\":\"Emily\",\"last_name\":\"Wilson\"},\n{\"id\":93,\"first_name\":\"Billy\",\"last_name\":\"Gilbert\"},\n{\"id\":94,\"first_name\":\"Keith\",\"last_name\":\"Kelly\"},\n{\"id\":95,\"first_name\":\"Scott\",\"last_name\":\"Daniels\"},\n{\"id\":96,\"first_name\":\"Philip\",\"last_name\":\"Romero\"},\n{\"id\":97,\"first_name\":\"Phillip\",\"last_name\":\"Olson\"},\n{\"id\":98,\"first_name\":\"Diane\",\"last_name\":\"Richards\"},\n{\"id\":99,\"first_name\":\"Wanda\",\"last_name\":\"Gonzales\"},\n{\"id\":100,\"first_name\":\"Julia\",\"last_name\":\"Duncan\"},\n{\"id\":101,\"first_name\":\"Rachel\",\"last_name\":\"Medina\"},\n{\"id\":102,\"first_name\":\"Larry\",\"last_name\":\"Grant\"},\n{\"id\":103,\"first_name\":\"Donald\",\"last_name\":\"Baker\"},\n{\"id\":104,\"first_name\":\"Ryan\",\"last_name\":\"Phillips\"},\n{\"id\":105,\"first_name\":\"Rebecca\",\"last_name\":\"Burke\"},\n{\"id\":106,\"first_name\":\"Donald\",\"last_name\":\"Morris\"},\n{\"id\":107,\"first_name\":\"Susan\",\"last_name\":\"Perry\"},\n{\"id\":108,\"first_name\":\"Emily\",\"last_name\":\"Wright\"},\n{\"id\":109,\"first_name\":\"Annie\",\"last_name\":\"Duncan\"},\n{\"id\":110,\"first_name\":\"Cheryl\",\"last_name\":\"Perez\"},\n{\"id\":111,\"first_name\":\"Aaron\",\"last_name\":\"Robertson\"},\n{\"id\":112,\"first_name\":\"Willie\",\"last_name\":\"Weaver\"},\n{\"id\":113,\"first_name\":\"Russell\",\"last_name\":\"Gomez\"},\n{\"id\":114,\"first_name\":\"Samuel\",\"last_name\":\"Kennedy\"},\n{\"id\":115,\"first_name\":\"Jennifer\",\"last_name\":\"Burton\"},\n{\"id\":116,\"first_name\":\"Kathy\",\"last_name\":\"Sims\"},\n{\"id\":117,\"first_name\":\"James\",\"last_name\":\"Palmer\"},\n{\"id\":118,\"first_name\":\"Thomas\",\"last_name\":\"Williamson\"},\n{\"id\":119,\"first_name\":\"Fred\",\"last_name\":\"Cox\"},\n{\"id\":120,\"first_name\":\"Jacqueline\",\"last_name\":\"Walker\"},\n{\"id\":121,\"first_name\":\"Dennis\",\"last_name\":\"Stanley\"},\n{\"id\":122,\"first_name\":\"Eric\",\"last_name\":\"Stanley\"},\n{\"id\":123,\"first_name\":\"Billy\",\"last_name\":\"Jackson\"},\n{\"id\":124,\"first_name\":\"Michael\",\"last_name\":\"Sanders\"},\n{\"id\":125,\"first_name\":\"Diane\",\"last_name\":\"Knight\"},\n{\"id\":126,\"first_name\":\"Maria\",\"last_name\":\"Gardner\"},\n{\"id\":127,\"first_name\":\"Jeffrey\",\"last_name\":\"Shaw\"},\n{\"id\":128,\"first_name\":\"Justin\",\"last_name\":\"Cole\"},\n{\"id\":129,\"first_name\":\"Terry\",\"last_name\":\"Oliver\"},\n{\"id\":130,\"first_name\":\"Anne\",\"last_name\":\"Harper\"},\n{\"id\":131,\"first_name\":\"Harold\",\"last_name\":\"Wright\"},\n{\"id\":132,\"first_name\":\"Lois\",\"last_name\":\"Bradley\"},\n{\"id\":133,\"first_name\":\"Aaron\",\"last_name\":\"Collins\"},\n{\"id\":134,\"first_name\":\"Walter\",\"last_name\":\"Richards\"},\n{\"id\":135,\"first_name\":\"Paul\",\"last_name\":\"Brown\"},\n{\"id\":136,\"first_name\":\"Billy\",\"last_name\":\"Nichols\"},\n{\"id\":137,\"first_name\":\"Daniel\",\"last_name\":\"Price\"},\n{\"id\":138,\"first_name\":\"Willie\",\"last_name\":\"Rice\"},\n{\"id\":139,\"first_name\":\"Raymond\",\"last_name\":\"Banks\"},\n{\"id\":140,\"first_name\":\"Pamela\",\"last_name\":\"Alvarez\"},\n{\"id\":141,\"first_name\":\"Adam\",\"last_name\":\"Bennett\"},\n{\"id\":142,\"first_name\":\"George\",\"last_name\":\"Dean\"},\n{\"id\":143,\"first_name\":\"Edward\",\"last_name\":\"Powell\"},\n{\"id\":144,\"first_name\":\"Anne\",\"last_name\":\"Carpenter\"},\n{\"id\":145,\"first_name\":\"Paula\",\"last_name\":\"Jordan\"},\n{\"id\":146,\"first_name\":\"Judith\",\"last_name\":\"Lee\"},\n{\"id\":147,\"first_name\":\"Elizabeth\",\"last_name\":\"Boyd\"},\n{\"id\":148,\"first_name\":\"Paula\",\"last_name\":\"Coleman\"},\n{\"id\":149,\"first_name\":\"Christina\",\"last_name\":\"Gilbert\"},\n{\"id\":150,\"first_name\":\"Kimberly\",\"last_name\":\"Stone\"},\n{\"id\":151,\"first_name\":\"Helen\",\"last_name\":\"Gonzalez\"},\n{\"id\":152,\"first_name\":\"Phyllis\",\"last_name\":\"Perkins\"},\n{\"id\":153,\"first_name\":\"Denise\",\"last_name\":\"Shaw\"},\n{\"id\":154,\"first_name\":\"Janice\",\"last_name\":\"Howell\"},\n{\"id\":155,\"first_name\":\"Kathleen\",\"last_name\":\"Moore\"},\n{\"id\":156,\"first_name\":\"Ronald\",\"last_name\":\"Rogers\"},\n{\"id\":157,\"first_name\":\"Tammy\",\"last_name\":\"Smith\"},\n{\"id\":158,\"first_name\":\"Margaret\",\"last_name\":\"Myers\"},\n{\"id\":159,\"first_name\":\"Robin\",\"last_name\":\"Ortiz\"},\n{\"id\":160,\"first_name\":\"Sharon\",\"last_name\":\"Stone\"},\n{\"id\":161,\"first_name\":\"Stephen\",\"last_name\":\"Wood\"},\n{\"id\":162,\"first_name\":\"Gloria\",\"last_name\":\"Davis\"},\n{\"id\":163,\"first_name\":\"Ann\",\"last_name\":\"Simmons\"},\n{\"id\":164,\"first_name\":\"Jeremy\",\"last_name\":\"Robertson\"},\n{\"id\":165,\"first_name\":\"Nicole\",\"last_name\":\"Mccoy\"},\n{\"id\":166,\"first_name\":\"Victor\",\"last_name\":\"Owens\"},\n{\"id\":167,\"first_name\":\"Evelyn\",\"last_name\":\"Perez\"},\n{\"id\":168,\"first_name\":\"Matthew\",\"last_name\":\"Cooper\"},\n{\"id\":169,\"first_name\":\"Robin\",\"last_name\":\"Harvey\"},\n{\"id\":170,\"first_name\":\"Lillian\",\"last_name\":\"Owens\"},\n{\"id\":171,\"first_name\":\"Rebecca\",\"last_name\":\"Elliott\"},\n{\"id\":172,\"first_name\":\"Harry\",\"last_name\":\"Brooks\"},\n{\"id\":173,\"first_name\":\"Harold\",\"last_name\":\"Snyder\"},\n{\"id\":174,\"first_name\":\"Alan\",\"last_name\":\"Hernandez\"},\n{\"id\":175,\"first_name\":\"Betty\",\"last_name\":\"Fernandez\"},\n{\"id\":176,\"first_name\":\"Julie\",\"last_name\":\"Day\"},\n{\"id\":177,\"first_name\":\"Christina\",\"last_name\":\"Dean\"},\n{\"id\":178,\"first_name\":\"James\",\"last_name\":\"Bell\"},\n{\"id\":179,\"first_name\":\"Doris\",\"last_name\":\"Kelley\"},\n{\"id\":180,\"first_name\":\"Jane\",\"last_name\":\"Daniels\"},\n{\"id\":181,\"first_name\":\"Emily\",\"last_name\":\"Brown\"},\n{\"id\":182,\"first_name\":\"Timothy\",\"last_name\":\"Johnston\"},\n{\"id\":183,\"first_name\":\"Rachel\",\"last_name\":\"White\"},\n{\"id\":184,\"first_name\":\"Anna\",\"last_name\":\"Johnston\"},\n{\"id\":185,\"first_name\":\"Lori\",\"last_name\":\"Ramirez\"},\n{\"id\":186,\"first_name\":\"Albert\",\"last_name\":\"Butler\"},\n{\"id\":187,\"first_name\":\"Nancy\",\"last_name\":\"Perry\"},\n{\"id\":188,\"first_name\":\"Jeffrey\",\"last_name\":\"Fox\"},\n{\"id\":189,\"first_name\":\"Mary\",\"last_name\":\"Arnold\"},\n{\"id\":190,\"first_name\":\"Nicholas\",\"last_name\":\"Stephens\"},\n{\"id\":191,\"first_name\":\"Brenda\",\"last_name\":\"Tucker\"},\n{\"id\":192,\"first_name\":\"Janet\",\"last_name\":\"Hanson\"},\n{\"id\":193,\"first_name\":\"Aaron\",\"last_name\":\"George\"},\n{\"id\":194,\"first_name\":\"Joyce\",\"last_name\":\"Hansen\"},\n{\"id\":195,\"first_name\":\"Jessica\",\"last_name\":\"Mendoza\"},\n{\"id\":196,\"first_name\":\"Joan\",\"last_name\":\"Stevens\"},\n{\"id\":197,\"first_name\":\"Lillian\",\"last_name\":\"Adams\"},\n{\"id\":198,\"first_name\":\"Nicholas\",\"last_name\":\"Knight\"},\n{\"id\":199,\"first_name\":\"Judy\",\"last_name\":\"Payne\"},\n{\"id\":200,\"first_name\":\"Patrick\",\"last_name\":\"Torres\"}];"
		}
	],
	"Menu": [
		{
			"file": "Menu.js",
			"content": "import React, { Component } from 'react';\nimport { ViewPort, Panel, Button, Menu as EdgeMenu } from '@extjs/reactor/modern';\n\nexport default class MenuExample extends Component {\n\n    constructor() {\n        super();\n        this.menus = [];\n        \n        this.state = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.state.left) {\n            Ext.Viewport.showMenu('left');\n        } else {\n            Ext.Viewport.hideMenu('left');\n        }\n    }\n\n    render() {\n        const { left, right, top, bottom } = this.state;\n        \n        return (\n            <Panel>\n                <EdgeMenu side=\"left\" ref=\"left\" reveal={true} hidden={!this.state.left} onHide={() => this.setState({ left: false })}>\n                    <Button text=\"Settings\" iconCls=\"x-fa fa-gear\" handler={() => this.setState({left: false})}/>\n                    <Button text=\"New Item\" iconCls=\"x-fa fa-pencil\" handler={() => this.setState({left: false})}/>\n                    <Button text=\"Star\" iconCls=\"x-fa fa-star\" handler={() => this.setState({left: false})}/>\n                </EdgeMenu>\n                <EdgeMenu side=\"right\" ref=\"right\" reveal={true} hidden={!this.state.right} onHide={() => this.setState({ right: false })}>\n                    <Button text=\"Settings\" iconCls=\"x-fa fa-gear\" handler={() => this.setState({right: false})}/>\n                    <Button text=\"New Item\" iconCls=\"x-fa fa-pencil\" handler={() => this.setState({right: false})}/>\n                    <Button text=\"Star\" iconCls=\"x-fa fa-star\" handler={() => this.setState({right: false})}/>\n                </EdgeMenu>\n                <EdgeMenu side=\"top\" ref=\"top\" cover={true} hidden={!this.state.top} onHide={() => this.setState({ top: false })}>\n                    <Button text=\"Settings\" iconCls=\"x-fa fa-gear\" handler={() => this.setState({top: false})}/>\n                    <Button text=\"New Item\" iconCls=\"x-fa fa-pencil\" handler={() => this.setState({top: false})}/>\n                    <Button text=\"Star\" iconCls=\"x-fa fa-star\" handler={() => this.setState({top: false})}/>\n                </EdgeMenu>\n                <EdgeMenu side=\"bottom\" ref=\"bottom\" slide={true} hidden={!this.state.bottom} onHide={() => this.setState({ bottom: false })}>\n                    <Button text=\"Settings\" iconCls=\"x-fa fa-gear\" handler={() => this.setState({bottom: false})}/>\n                    <Button text=\"New Item\" iconCls=\"x-fa fa-pencil\" handler={() => this.setState({bottom: false})}/>\n                    <Button text=\"Star\" iconCls=\"x-fa fa-star\" handler={() => this.setState({bottom: false})}/>\n                </EdgeMenu>\n                <div><b>Ext.Menu</b> is a component which allows you to easily display slidingmenus from any side of the screen.</div>\n                <br/>\n                <br/>\n                <div>You can show the menus by either tapping the buttons below,or by swiping from the edge of the screen.</div>\n                <Button handler={() => this.setState({ left: true })} text=\"Toggle left menu (reveal)\"/>\n                <Button handler={() => this.setState({ right: true })} text=\"Toggle right menu (reveal)\"/>\n                <Button handler={() => this.setState({ top: true })} text=\"Toggle top menu (cover)\"/>\n                <Button handler={() => this.setState({ bottom: true })} text=\"Toggle bottom menu (slide)\"/>\n            </Panel>\n        )\n    }\n}\n"
		}
	],
	"Msg": [
		{
			"file": "Msg.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, Button } from '@extjs/reactor/modern';\n\nExt.require('Ext.MessageBox');\n\nexport default class MsgExample extends Component {\n\n    onConfirmResult(buttonId, value, opt) {\n        Ext.toast(`User clicked ${buttonId} button.`);\n    }\n\n    onPromptResult(buttonId, value) {\n        Ext.toast(`User clicked ${buttonId} and entered value \"${value}\".`);\n    }\n\n    render() {\n        return (\n            <Panel shadow layout={{type: 'vbox', align: 'stretch'}}>\n                <Button handler={() => Ext.Msg.alert('Title', 'The quick brown fox jumped over the lazy dog.')}>Alert</Button>\n                <Button handler={() => Ext.Msg.prompt('Welcome!', \"What's your first name?\", this.onPromptResult.bind(this))}>Prompt</Button>\n                <Button handler={() => Ext.Msg.confirm(\"Confirmation\", \"Are you sure you want to do that?\", this.onConfirmResult.bind(this))}>Confirm</Button>\n            </Panel>\n        )\n    }\n    \n}"
		}
	],
	"Navigator": [
		{
			"file": "Navigator.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, ChartNavigator } from '@extjs/reactor/modern';\nimport createData from './createData';\nimport ChartToolbar from '../Charts/ChartToolbar';\n\nExt.require([\n    'Ext.chart.series.Line',\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Time',\n    'Ext.chart.navigator.Container'\n]);\n\nexport default class NavigatorExample extends Component {\n\n    store = Ext.create('Ext.data.Store', {\n        fields: [ 'x', 'sin', 'cos' ],\n        data: createData()\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    toggleZoomOnPan = (zoomOnPan) => {\n        this.getChart().getInteraction('panzoom').setZoomOnPan(zoomOnPan);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.theme !== this.state.theme) {\n            this.getChart().setTheme(this.state.theme);\n        }\n    }\n\n    getChart() {\n        return this.refs.navigator.getChart()\n    }\n\n    categoryRenderer = (axis, value) => Math.round(value * 180 / Math.PI)\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onToggleZoomOnPan={this.toggleZoomOnPan}\n                    theme={theme}\n                />\n                <ChartNavigator\n                    ref=\"navigator\"\n                    navigator={{ axis: 'bottom' }}\n                    chart={{\n                        xtype: 'cartesian',\n                        reference: 'chart',\n                        insetPadding: '20 10 10 10',\n                        platformConfig: {\n                            phone: {\n                                insetPadding: '10 5 0 0'\n                            }\n                        },\n                        interactions: {\n                            type: 'panzoom',\n                            zoomOnPanGesture: false,\n                            axes: {\n                                left: {\n                                    allowPan: false,\n                                    allowZoom: false\n                                }\n                            }\n                        },\n                        legend: {\n                            type: 'sprite'\n                        },\n                        store: this.store,\n                        axes: [{\n                            type: 'numeric',\n                            position: 'left',\n                            grid: true\n                        }, {\n                            id: 'bottom',\n                            type: 'category',\n                            position: 'bottom',\n                            grid: true,\n                            renderer: this.categoryRenderer,\n                            label: {\n                                rotation: {\n                                    degrees: -90\n                                }\n                            }\n                        }],\n                        series: [{\n                            type: 'line',\n                            title: 'sin',\n                            xField: 'x',\n                            yField: 'sin',\n                            marker: {\n                                type: 'triangle',\n                                fx: {\n                                    duration: 200,\n                                    easing: 'backOut'\n                                }\n                            },\n                            highlight: {\n                                scaling: 2\n                            }\n                        }, {\n                            type: 'line',\n                            title: 'cos',\n                            xField: 'x',\n                            yField: 'cos',\n                            marker: {\n                                type: 'cross',\n                                fx: {\n                                    duration: 200,\n                                    easing: 'backOut'\n                                }\n                            },\n                            highlight: {\n                                scaling: 2\n                            }\n                        }],\n                    }}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "export default function() {\n    let data = [],\n        increment = Math.PI / 18,\n        k = 10,\n        a = 0,\n        i, ln;\n\n    for (i = 0, ln = 100; i < ln; i++) {\n        data.push({\n            x: a,\n            sin: k * Math.sin(a),\n            cos: k * Math.cos(a)\n        });\n        a += increment;\n    }    \n\n    return data;\n}"
		}
	],
	"NestedList": [
		{
			"file": "NestedList.js",
			"content": "import React, { Component } from 'react';\nimport { NestedList } from '@extjs/reactor/modern';\nimport root from './data';\n\nExt.require('Ext.Toast');\n\nexport default class ListExample extends Component {\n\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.TreeStore', { \n            root \n        });\n    }\n\n    render() {\n        return (\n            <NestedList\n                title=\"Products\"\n                shadow={true}\n                displayField=\"text\"\n                store={this.store}\n                onLeafItemTap={(nestedList, list, index, target, record) => Ext.toast(`You selected ${record.get('text')}`)}\n            />\n        )\n    }\n    \n}"
		},
		{
			"file": "data.js",
			"content": "export default {\n    \"children\": [{\n        \"text\": \"Cars\",\n        \"children\": [{\n            \"text\": \"Asia\",\n            \"children\": [{\n                \"text\": \"Japan\",\n                \"children\": [{\n                    \"text\": \"Acura\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Honda\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Infiniti\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Mitsubishi\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Nissan\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Scion\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Subaru\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Toyota\",\n                    \"leaf\": true\n                }]\n            },{\n                \"text\": \"Korea\",\n                \"children\": [{\n                    \"text\": \"Hyundai\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Kia\",\n                    \"leaf\": true\n                }]\n            }]\n        },{\n            \"text\": \"United Kingdom\",\n            \"children\": [{\n                \"text\": \"Aston Martin\",\n                \"leaf\": true\n            },{\n                \"text\": \"Bentley\",\n                \"leaf\": true\n            },{\n                \"text\": \"TVR\",\n                \"leaf\": true\n            },{\n                \"text\": \"Land Rover\",\n                \"leaf\": true\n            }]\n        },{\n            \"text\": \"Europe\",\n            \"children\": [{\n                \"text\": \"Germany\",\n                \"children\": [{\n                    \"text\": \"Audi\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"BMW\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Opel\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Porsche\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Volkswagen\",\n                    \"leaf\": true\n                }]\n            },{\n                \"text\": \"France\",\n                \"children\": [{\n                    \"text\": \"Citroën\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Renault\",\n                    \"leaf\": true\n                },{\n                    \"text\": \"Peugeot\",\n                    \"leaf\": true\n                }]\n            }]\n        },{\n            \"text\": \"United States\",\n            \"children\": [{\n                \"text\": \"Buick\",\n                \"leaf\": true\n            },{\n                \"text\": \"Cadillac\",\n                \"leaf\": true\n            },{\n                \"text\": \"Chevrolet\",\n                \"leaf\": true\n            },{\n                \"text\": \"Chrysler\",\n                \"leaf\": true\n            },{\n                \"text\": \"Ford\",\n                \"leaf\": true\n            },{\n                \"text\": \"Jeep\",\n                \"leaf\": true\n            },{\n                \"text\": \"Oldsmobile\",\n                \"leaf\": true\n            },{\n                \"text\": \"Saturn\",\n                \"leaf\": true\n            },{\n                \"text\": \"Tesla\",\n                \"leaf\": true\n            }]\n        }]\n    }]\n}"
		}
	],
	"OHLC": [
		{
			"file": "OHLC.js",
			"content": "import React, { Component } from 'react';\nimport { Cartesian, Panel } from '@extjs/reactor/modern';\nimport ChartToolbar from '../Charts/ChartToolbar';\nimport createData from './createData';\n\nExt.require([\n    'Ext.chart.axis.Numeric',\n    'Ext.chart.axis.Time',\n    'Ext.chart.series.CandleStick',\n    'Ext.chart.interactions.Crosshair'\n]);\n\nexport default class OHLCChartExample extends Component {\n\n    constructor() {\n        super();\n        this.refresh();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: ['time', 'open', 'high', 'low', 'close']\n    });\n\n    state = {\n        theme: 'default'\n    };\n\n    refresh = () => {\n        this.store.loadData(createData(1000));\n    }\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') })\n    }\n\n    toggleZoomOnPan = (zoomOnPan) => {\n        this.toggleCrosshair(false);\n        this.panzoom.setZoomOnPan(zoomOnPan);\n    }\n\n    toggleCrosshair = (crosshair) => {\n        this.panzoom.setEnabled(!crosshair);\n        this.crosshair.setEnabled(crosshair)\n    }\n\n    componentDidMount() {\n        const chart = this.refs.chart;\n        this.panzoom = chart.getInteraction('panzoom');\n        this.crosshair = chart.getInteraction('crosshair');\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"fit\">\n                <ChartToolbar\n                    onThemeChange={this.changeTheme}\n                    onToggleZoomOnPan={this.toggleZoomOnPan}\n                    onToggleCrosshair={this.toggleCrosshair}\n                    onRefreshClick={this.refresh}\n                    theme={theme}\n                />\n                <Cartesian\n                    ref=\"chart\"\n                    store={this.store}\n                    theme={theme}\n                    interactions={[{\n                        type: 'panzoom',\n                        axes: {\n                            left: {\n                                allowPan: false,\n                                allowZoom: false\n                            },\n                            bottom: {\n                                allowPan: true,\n                                allowZoom: true\n                            }\n                        }\n                    }, {\n                        type: 'crosshair',\n                        axes: {\n                            label: {\n                                fillStyle: 'white'\n                            },\n                            rect: {\n                                fillStyle: '#344459',\n                                opacity: 0.7,\n                                radius: 5\n                            }\n                        }\n                    }]}\n                    series={{\n                        type: 'candlestick',\n                        xField: 'time',\n                        openField: 'open',\n                        highField: 'high',\n                        lowField: 'low',\n                        closeField: 'close',\n                        style: {\n                            ohlcType: 'ohlc',\n                            barWidth: 10,\n                            opacity: 0.9,\n                            dropStyle: {\n                                fill: 'rgb(237,123,43)',\n                                stroke: 'rgb(237,123,43)'\n                            },\n                            raiseStyle: {\n                                fill: 'rgb(55,153,19)',\n                                stroke: 'rgb(55,153,19)'\n                            }\n                        },\n                        aggregator: {\n                            strategy: 'time'\n                        }\n                    }}\n                    axes={[{\n                        type: 'numeric',\n                        fields: ['open', 'high', 'low', 'close'],\n                        position: 'left',\n                        maximum: 1000,\n                        minimum: 0\n                    }, {\n                        type: 'time',\n                        fields: ['time'],\n                        position: 'bottom',\n                        visibleRange: [0, 0.3],\n                        style: {\n                            axisLine: false\n                        }\n                    }]}\n                />\n            </Panel>            \n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "var seed = 1.4;\n\n// Controllable random.\nfunction random() {\n    seed *= 42.7;\n    seed -= Math.floor(seed);\n    return seed * 2 - 1;\n}\n\nexport default function createData(count) {\n    let data = [], i, record = {\n        time: new Date('Jan 1 2010').getTime(),\n        close: 600\n    };\n    \n    for (i = 0; i < count; i++) {\n        var ohlc = [random() * 25, random() * 25, random() * 25];\n        record = {\n            time: record.time + 3600000,\n            open: record.close,\n            high: record.close + Math.max.apply(Math, ohlc),\n            low: record.close + Math.min.apply(Math, ohlc),\n            close: record.close + ohlc[1]\n        };\n        if (record.open < record.low) {\n            record.low = record.open;\n        } else if (record.open > record.high) {\n            record.high = record.open;\n        }\n        data.push(record);\n    }\n\n    return data;\n}"
		}
	],
	"Panel": [
		{
			"file": "Panel.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel, Button } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nfunction toolHandler(owner, tool) {\n    Ext.toast(`You clicked ${tool.config.type}`);\n}\n\nexport default class PanelExample extends Component {\n\n    render() {\n        return (\n            <Container>\n                <Panel \n                    shadow\n                    title=\"Panel\" \n                    height={300}\n                    width={500}\n                    tools={[\n                        { type: 'minimize', handler: toolHandler },\n                        { type: 'refresh', handler: toolHandler },\n                        { type: 'save', handler: toolHandler },\n                        { type: 'search', handler: toolHandler },\n                        { type: 'close', handler: toolHandler }\n                    ]}\n                >\n                    <p>Panel Body</p>\n                </Panel>\n                <Button ui=\"action\" handler={() => this.refs.modal.show()} margin=\"20 0 0 0\">Show Modal</Button>\n                <Panel \n                    ref=\"modal\"\n                    title=\"Floated Panel\"\n                    modal\n                    floated\n                    centered\n                    hideOnMaskTap\n                    width={Ext.filterPlatform('ie10') ? '100%' : (Ext.os.deviceType == 'Phone') ? 260 : 400}\n                    maxHeight={Ext.filterPlatform('ie10') ? '30%' : (Ext.os.deviceType == 'Phone') ? 220 : 400}\n                    showAnimation={{\n                        type: 'popIn',\n                        duration: 250,\n                        easing: 'ease-out'\n                    }}\n                    hideAnimation={{\n                        type: 'popOut',\n                        duration: 250,\n                        easing: 'ease-out'\n                    }}\n                >\n                    <p>This is a modal, centered and floated panel. hideOnMaskTap is true by default so we can tap anywhere outside the overlay to hide it.</p>\n                </Panel>\n            </Container>\n        )\n    }\n}"
		}
	],
	"PasswordField": [
		{
			"file": "PasswordField.js",
			"content": "import React from 'react';\nimport { FormPanel, PasswordField } from '@extjs/reactor/modern';\n\nexport default function PasswordFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <PasswordField \n                label=\"Password\" \n                required={true} \n                revealable={true}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"Picker": [
		{
			"file": "Picker.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, Picker, Button } from '@extjs/reactor/modern';\n\nexport default class PickerExample extends Component {\n\n    showPicker() {\n        this.refs.picker.show();\n    }\n\n    render() {\n        return (\n            <Panel shadow>\n                <Button handler={this.showPicker.bind(this)}>Show Picker</Button>\n                <Picker \n                    ref=\"picker\"\n                    slots={[\n                        {\n                            name: 'limit_speed',\n                            title: 'Speed',\n                            data: [\n                                {text: '50 KB/s', value: 50},\n                                {text: '100 KB/s', value: 100},\n                                {text: '200 KB/s', value: 200},\n                                {text: '300 KB/s', value: 300}\n                            ]\n                        }\n                    ]}\n                />\n            </Panel>\n        )\n    }\n    \n}"
		}
	],
	"PivotGrid": [
		{
			"file": "PivotGrid.js",
			"content": "import React, {Component} from 'react';\nimport { PivotGrid, Button, Toolbar} from '@extjs/reactor/modern';\nimport model from './model';\nimport './data';\n\nExt.require('Ext.pivot.*');\n\nexport default class PivotGridExample extends Component{\n    constructor(){\n        super();\n\n        this.store = Ext.create('Ext.data.Store', {\n            model,\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                limitParam: null,\n                url: '/KitchenSink/PivotData',\n                reader: {\n                    type: 'json'\n                }\n            },\n        });\n\n        this.pivotConfig = {\n            matrix: {\n                type : 'local',\n                store : this.store,\n                aggregate: [{\n                    dataIndex: 'value',\n                    header: 'Value',\n                    aggregator: 'avg',\n                    width: 120\n                }],\n                leftAxis:[{\n                    dataIndex: 'person',\n                    header: 'Person',\n                    width:120\n                }, {\n                    dataIndex: 'company',\n                    header: 'Company',\n                    sortable: false\n                }],\n                topAxis:[{\n                    dataIndex: 'year',\n                    header: 'Year',\n                    labelRenderer: value => `Year ${value}`\n                }]\n            },\n\n            topAxisCellConfig: {\n                bind: {\n                    userCls: '{cellStyle}'\n                },\n                viewModel: {\n                    type: 'default', \n                    formulas: {\n                        cellStyle: function (get) {\n                            var isGrandTotal = get('record.isRowGrandTotal') || get('column.isColGrandTotal'),\n                                isHeader = get('record.isRowGroupHeader') || get('column.isColGroupTotal'),\n                                isFooter = get('record.isRowGroupTotal'),\n                                value = get('value'),\n                                cls = get('column.topAxisColumn') ? (value >= 500 ? 'pivotCellAbove500' : 'pivotCellUnder500') : '';\n\n                            if (isGrandTotal) {\n                                cls = 'pivotCellGrandTotal';\n                            } else if(isFooter) {\n                                cls = 'pivotCellGroupFooter';\n                            } else if(isHeader) {\n                                cls = 'pivotCellGroupHeader';\n                            }\n\n                            return cls;\n                        }\n                    }\n                }\n            },\n\n            plugins: [{\n                type:'pivotdrilldown'\n            }, {\n                type:'pivotconfigurator',\n                fields:[{\n                    dataIndex: 'quantity',\n                    header: 'Qty',\n                    aggregator: 'min',\n                    formatter: 'number(\"0\")',\n                    settings: {\n                        allowed: ['aggregate'],\n                        style: {\n                            fontWeight: 'bold'\n                        },\n                        formatters: {\n                            '0':'number(\"0\")',\n                            '0%': 'number(\"0%\")'\n                        }\n                    }\n                }, {\n                    dataIndex: 'value',\n                    header: 'Value',\n                    settings: {\n                        allowed: 'aggregate',\n                        aggregators: ['sum', 'avg', 'count'],\n                        style: {\n                            fontWeight: 'bold'\n                        },\n                        renderers: {\n                            'Colored 0,000.00': (v, record, dataIndex, cell, column) => {\n                                cell.setStyle( Ext.String.format('color: {0};', v > 500 ? 'green' : 'red') );\n                                return Ext.util.Format.number(v, '0,000.00');\n                            }\n                        },\n                        formatters: {\n                            '0': 'number(\"0\")',\n                            '0.00': 'number(\"0.00\")',\n                            '0,000.00': 'number(\"0,000.00\")',\n                            '0%': 'number(\"0%\")',\n                            '0.00%': 'number(\"0.00%\")'\n                        }\n                    }\n                }, {\n                    dataIndex: 'company',\n                    header: 'Company',\n                    settings: {\n                        aggregators: ['count']\n                    }\n                }, {\n                    dataIndex: 'country',\n                    header: 'Country',\n                    settings: {\n                        aggregators: ['count']\n                    }\n                }, {\n                    dataIndex: 'person',\n                    header: 'Person',\n                    settings: {\n                        aggregators: 'count'\n                    }\n                }, {\n                    dataIndex: 'year',\n                    header: 'Year',\n                    labelRenderer: value => `Year ${value}`,\n                    settings: {\n                        fixed: ['topAxis']\n                    }\n                }, {\n                    dataIndex: 'month',\n                    header: 'Month',\n                    labelRenderer: value => Ext.Date.monthNames[value],\n                    settings: {\n                        aggregators: ['count'],\n                        allowed: ['leftAxis', 'topAxis']\n                    }\n                }] // end fields\n            }] // end plugins\n        } // end pivotConfig\n    }\n\n    render() {\n        return(\n            <PivotGrid ref=\"grid\" shadow { ...this.pivotConfig }>\n                <Toolbar docked=\"top\">\n                    <Button text=\"Show configurator\" handler={() => this.refs.grid.showConfigurator()}/>\n                    <Button text=\"Expand all\" handler={() => this.refs.grid.expandAll()}/>\n                    <Button text=\"Collapse all\" handler={() => this.refs.grid.collapseAll()}/>\n                </Toolbar>\n            </PivotGrid>\n        )\n    }\n}"
		},
		{
			"file": "model.js",
			"content": "export default Ext.define('Sale', function() {\n    var regions = {\n        \"Belgium\": 'Europe',\n        \"Netherlands\": 'Europe',\n        \"United Kingdom\": 'Europe',\n        \"Canada\": 'North America',\n        \"United States\": 'North America',\n        \"Australia\": 'Australia'\n    };\n    \n    return {\n        extend: 'Ext.data.Model',\n\n        fields: [\n            {name: 'id',        type: 'int'},\n            {name: 'company',   type: 'string'},\n            {name: 'country',   type: 'string'},\n            {name: 'person',    type: 'string'},\n            {name: 'date',      type: 'date', dateFormat: 'c'},\n            {name: 'value',     type: 'float'},\n            {name: 'quantity',  type: 'float'},\n            {\n                name: 'year',\n                calculate: function(data){\n                    return parseInt(Ext.Date.format(data.date, \"Y\"), 10);\n                }\n            },{\n                name: 'month',\n                calculate: function(data){\n                    return parseInt(Ext.Date.format(data.date, \"m\"), 10) - 1;\n                }\n            },{\n                name: 'continent',\n                calculate: function(data){\n                    return regions[data.country];\n                }\n            }\n        ]\n    };\n});"
		}
	],
	"ProgressBar": [
		{
			"file": "ProgressBar.js",
			"content": "import React, { Component } from 'react'\nimport { Panel, Progress } from '@extjs/reactor/modern';\n\nexport default class ProgressBarExample extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            progress: 0\n        } \n    }\n\n    componentDidMount() {\n        this.updateLoop = setInterval(() => { \n            let { progress } = this.state;\n            progress += 1;\n            if (progress > 100) progress = 0;\n            this.setState({ progress });\n        }, 100)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.updateLoop);\n    }\n\n    render() {\n        const { progress } = this.state;\n\n        return (\n            <Panel layout={{ type: 'vbox', align: 'center' }}>\n                <Progress value={progress/100.0} text={`Loading: ${progress}%`} width=\"75%\"/>\n                <div style={{marginTop: '20px'}}>Loading: {progress}%</div>\n                <Progress value={progress/100.0} width=\"75%\"/>\n            </Panel>\n        )\n    }\n\n}"
		}
	],
	"RadioField": [
		{
			"file": "RadioField.js",
			"content": "import React from 'react';\nimport { FormPanel, RadioField, FieldSet } from '@extjs/reactor/modern';\n\nconst radioProps = {\n    name: 'color',\n    labelAlign: 'right',\n    labelWidth: 'auto'\n};\n\nexport default function RadioFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <FieldSet title=\"Favorite Color\" layout={{type: 'vbox', align: 'left'}}>\n                <RadioField {...radioProps} label=\"Red\" value=\"red\"/>\n                <RadioField {...radioProps} label=\"Blue\" value=\"blue\"/>\n                <RadioField {...radioProps} label=\"Green\" value=\"green\"/>\n                <RadioField {...radioProps} label=\"Purple\" value=\"purple\"/>\n            </FieldSet>\n        </FormPanel>\n    )\n}"
		}
	],
	"SalesPerEmployee": [
		{
			"file": "SalesPerEmployee.js",
			"content": "import React, { Component } from 'react';\nimport {D3_Heatmap, Panel, Toolbar, Button} from '@extjs/reactor/modern';\nimport {refreshData, refreshSize} from './createData';\n\nExt.require('Ext.d3.*');\n\nexport default class HeatmapExample extends Component {\n\n    constructor() {\n        super();\n        this.refreshData();\n    }\n\n    store = Ext.create('Ext.data.Store', {\n        fields: [\n            {name: 'employee', type: 'string'},\n            {name: 'dayNumber', type: 'int'},\n            {name: 'day', type: 'string'},\n            {name: 'sales', type: 'number'}\n        ]\n    });\n\n    refreshData = () => {\n        this.store.loadData(refreshData());\n    }\n\n    refreshSize = () => {\n        this.store.loadData(refreshSize());\n    }\n\n    state = {\n        theme: 'default'\n    };\n\n    changeTheme = (select, choice) => {\n        this.setState({ theme: choice.get('value') });\n    }\n\n    render() {\n        const { theme } = this.state;\n\n        return (\n            <Panel shadow layout=\"vbox\">\n                <Toolbar hidden docked=\"top\" platformConfig={{'!phone': {hidden: false}}}>\n                    <Button iconCls=\"x-fa fa-refresh\" text=\"Refresh Data\" handler={this.refreshData}/>\n                    <Button iconCls=\"x-fa fa-table\" text=\"Refresh Size\" handler={this.refreshSize}/>\n                </Toolbar>\n                <D3_Heatmap \n                    store={this.store}\n                    padding=\"30 30 40 100\"\n                    flex={1}\n                    platformConfig={{\n                        '!phone': {\n                            padding: {\n                                top: 40,\n                                right: 30,\n                                bottom: 70,\n                                left: 120\n                            },\n                            legend: {\n                                docked: 'right',\n                                padding: 50,\n                                items: {\n                                    count: 10,\n                                    slice: [1],\n                                    reverse: true,\n                                    size: {\n                                        x: 60,\n                                        y: 30\n                                    }\n                                }\n                            }\n                        }\n                    }}\n                    xAxis={{\n                        platformConfig: {\n                            '!phone': {\n                                title: {\n                                    text: 'Employee',\n                                    attr: {\n                                        'font-size': '14px'\n                                    }\n                                }\n                            }\n                        },\n                        axis: {\n                            orient: 'bottom'\n                        },\n                        scale: {\n                            type: 'band'\n                        },\n                        field: 'employee'\n                    }}\n                    yAxis={{\n                        platformConfig: {\n                            '!phone': {\n                                title: {\n                                    text: 'Day',\n                                    attr: {\n                                        'font-size': '14px'\n                                    }\n                                }\n                            }\n                        },\n                        axis: {\n                            orient: 'left'\n                        },\n                        scale: {\n                            type: 'band'\n                        },\n                        field: 'day'\n                    }}\n                    colorAxis={{\n                        scale: {\n                            type: 'linear',\n                            range: ['#ffffd9', '#49b6c4', '#225ea8']\n                        },\n                        field: 'sales'\n                    }}\n                    tiles={{\n                        attr: {\n                            'stroke': '#081d58',\n                            'stroke-width': 2\n                        }\n                    }}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "createData.js",
			"content": "const employees = [\n        'Alex',\n        'Kevin',\n        'Nige',\n        'Phil',\n        'Don',\n        'Ross',\n        'Vitaly'\n    ],\n    days = [\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday'\n    ];\n\nexport function refreshData(iCount=employees.length, jCount=days.length) {\n    const data = [],\n        min = 20,\n        delta = 20 + Math.floor(Math.random() * 260);\n\n    for(let i=0; i<iCount; i++) {\n        for(let j=0; j<jCount; j++) {\n            data.push({\n                employee: employees[i],\n                dayNumber: j,\n                day: days[j],\n                sales: min + Math.floor(Math.random() * delta)\n            });\n        }\n    }\n\n    console.log(data);\n    return data;\n}\n\nexport function refreshSize() {\n    const minSize = 1;\n\n    return refreshData(\n        minSize + Math.round(Math.random() * (employees.length - minSize)),\n        minSize + Math.round(Math.random() * (days.length - minSize))\n    );\n}"
		}
	],
	"SelectField": [
		{
			"file": "SelectField.js",
			"content": "import React from 'react';\nimport { FormPanel, SelectField, Container } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nexport default function SelectFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <SelectField \n                label=\"Select\"  \n                onChange={value => Ext.toast(`You selected ${value}`)}\n                options={[\n                    { text: 'Option 1', value: 1 },\n                    { text: 'Option 2', value: 2 },\n                    { text: 'Option 3', value: 3 }\n                ]}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"SliderField": [
		{
			"file": "SliderField.js",
			"content": "import React, { Component } from 'react';\nimport { FormPanel, SliderField } from '@extjs/reactor/modern';\n\nexport default class SliderFieldExample extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            singleValue: 20,\n            multipleValue: [10, 70]\n        };\n    }\n\n    onSingleChange(field, value) {\n        this.setState({ singleValue: value });\n    }\n\n    onMultipleChange(field, value) {\n        this.setState({ multipleValue: value });\n    }\n\n    render() {\n        const { singleValue, multipleValue } = this.state;\n\n        return (\n            <FormPanel shadow={true}>\n                <SliderField \n                    onChange={this.onSingleChange.bind(this)}\n                    label=\"Single Thumb\"\n                    value={singleValue}\n                />\n                <div style={{marginBottom: '20px'}}>Value: {singleValue}</div>\n                <SliderField \n                    onChange={this.onMultipleChange.bind(this)}\n                    label=\"Multiple Thumbs\"\n                    values={multipleValue}\n                />\n                <div>Values: {multipleValue.join(', ')}</div>\n            </FormPanel>\n        )\n    }\n\n}"
		}
	],
	"SpinnerField": [
		{
			"file": "SpinnerField.js",
			"content": "import React from 'react';\nimport { FormPanel, SpinnerField } from '@extjs/reactor/modern';\n\nexport default function SpinnerFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <SpinnerField \n                label=\"Spinner\" \n                minValue={0} \n                maxValue={10} \n                stepValue={1} \n                cycle={true}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"TabPanel": [
		{
			"file": "TabPanel.js",
			"content": "import React from 'react';\nimport { TabPanel, Component, Container } from '@extjs/reactor/modern';\n\nexport default function TabPanelExample() {\n    return (\n        <Container layout={{type: 'vbox', align: 'stretch'}}>\n            <TabPanel \n                flex={1}\n                shadow={true} \n            >\n                <Container title=\"Tab 1\" {...tabProps}>\n                    <div>By default, tabs are aligned to the top of a view.</div>\n                </Container>\n                <Container title=\"Tab 2\" {...tabProps}>\n                    <div>A TabPanel can use different animations by setting <code>layout.animation.</code></div>\n                </Container>\n                <Container title=\"Tab 3\" {...tabProps}>\n                    <span className=\"action\">User tapped Tab 3</span>\n                </Container>\n            </TabPanel>\n\n            <TabPanel \n                flex={1}\n                shadow={true}\n                margin=\"20 0 0 0\"\n                tabBar={{ \n                    docked: 'bottom'\n                }}\n            >\n                <Container title=\"Info\" iconCls=\"x-fa fa-info-circle\" {...tabProps}>\n                    <div>Docking tabs to the bottom will automatically change their style.</div>\n                </Container>\n                <Container title=\"Download\" iconCls=\"x-fa fa-download\" badgeText=\"4\" {...tabProps}>\n                    <div>Badges <em>(like the 4, below)</em> can be added by setting <code>badgeText</code> when creating a tab or by using <code>setBadgeText()</code> on the tab later.</div>\n                </Container>\n                <Container title=\"Favorites\" iconCls=\"x-fa fa-star\" badgeText=\"Overflow Test\" {...tabProps}>\n                    <div>Badge labels will truncate if the text is wider than the tab.</div>\n                </Container>\n                <Container title=\"Bookmarks\" iconCls=\"x-fa fa-bookmark\" {...tabProps}>\n                    <div>Tabbars are <code>ui:\"dark\"</code> by default, but also have light variants.</div>\n                </Container>\n                <Container title=\"More\" iconCls=\"x-fa fa-ellipsis-h\" {...tabProps}>\n                    <span className=\"action\">User tapped User</span>\n                </Container>\n            </TabPanel>\n        </Container>\n    )\n}\n\nconst tabProps = {\n    cls: \"card\",\n    layout: { type: 'vbox', align: 'stretch', pack: 'center' }\n};\n\n"
		}
	],
	"TextAreaField": [
		{
			"file": "TextAreaField.js",
			"content": "import React from 'react';\nimport { FormPanel, TextAreaField } from '@extjs/reactor/modern';\n\nexport default function TextAreaFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <TextAreaField \n                label=\"Description\"\n                maxRows={10}\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"TextField": [
		{
			"file": "TextField.js",
			"content": "import React from 'react';\nimport { FormPanel, Container, TextField, FieldSet } from '@extjs/reactor/modern';\n\nexport default function TextFieldExample() {\n    return (\n        <Container layout={{type: 'vbox', align: 'stretch'}}>\n            <FormPanel shadow={true} flex={1} margin=\"0 0 20 0\">\n                <FieldSet title=\"Separate Label and Placeholder\">\n                    <TextField placeHolder=\"Enter Name...\" label=\"Name\" required={true}/>\n                </FieldSet>\n            </FormPanel>\n            <FormPanel shadow={true} flex={1} height={100}>\n                <FieldSet title=\"Label as Placeholder\">\n                    <TextField labelAlign=\"placeholder\" label=\"Name\" required={true}/>\n                </FieldSet>\n            </FormPanel>\n        </Container>\n    )\n}"
		}
	],
	"TitleBar": [
		{
			"file": "TitleBar.js",
			"content": "import React, { Component } from 'react';\nimport { TitleBar, Button, EdgeMenu, Container } from '@extjs/reactor/modern';\n\nexport default class TitleBarExample extends Component {\n\n    render() {\n        return (\n            <TitleBar title=\"App Title\" docked=\"top\">\n                <Button align=\"left\" iconCls=\"x-fa fa-bars\"/>\n                <Button align=\"right\" iconCls=\"x-fa fa-inbox\">Inbox</Button>\n                <Button align=\"right\" iconCls=\"x-fa fa-user\">Profile</Button>\n            </TitleBar>\n        )\n    }\n\n}"
		}
	],
	"Toast": [
		{
			"file": "Toast.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Button } from '@extjs/reactor/modern';\n\nExt.require('Ext.Toast');\n\nexport default function ToastExample() {\n    return (\n        <Container layout={{type: 'vbox', align: 'left'}}>\n            <Button \n                ui=\"action\" \n                handler={() => Ext.toast('Hello World!')}\n            >Show Toast</Button>\n        </Container>\n    )\n}"
		}
	],
	"ToggleField": [
		{
			"file": "ToggleField.js",
			"content": "import React from 'react';\nimport { FormPanel, ToggleField } from '@extjs/reactor/modern';\n\nexport default function ToggleFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <ToggleField \n                label=\"Toggle\"\n            />\n        </FormPanel>\n    )\n}"
		}
	],
	"ToolTip": [
		{
			"file": "ToolTip.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, Button, Container } from '@extjs/reactor/modern';\n\nexport default class ToolTipExample extends Component {\n    render() {\n        const containerDefaults = {\n            margin: '0 0 50 0',\n            layout: {\n                type: 'hbox', \n                align: 'start', \n                pack: 'center' \n            }\n        };\n\n        const buttonDefaults = {\n            margin: '0 15 0 0'\n        };\n\n        return (\n            <Panel layout=\"vbox\" shadow>\n                <Container {...containerDefaults}>\n                    <Button {...buttonDefaults} tooltip=\"A simple tooltip\">Basic Tip</Button>\n                    \n                    <Button {...buttonDefaults} tooltip={{ \n                        autoHide: false, \n                        title: 'Tip Title',\n                        html: 'A simple tooltip',\n                        closable: true \n                    }}>autoHide: false</Button>\n                    \n                    <Button {...buttonDefaults} tooltip={{\n                        title: 'Mouse Track',\n                        html: 'This tip will follow the mouse while it is over the element',\n                        trackMouse: true\n                    }}>Mouse Track</Button>\n                </Container>\n\n                <Container {...containerDefaults}>\n                    <Button {...buttonDefaults} tooltip={{\n                        styleHtmlContent: true,\n                        html: '<ul style=\"margin-bottom: 15px;\">' +\n                                '<li>5 bedrooms</li>' + \n                                '<li>Close to transport</li>' +\n                                '<li>Large backyard</li>' +\n                            '</ul>' +\n                            '<img style=\"width: 400px; height: 300px;\" src=\"resources/images/house.jpg\" />',\n                        align: 'tl-tr',\n                        anchorToTarget: true,\n                        anchor: true,\n                        autoHide: false,\n                        closable: true\n                    }}>Anchor Right, Rich Content</Button>\n\n                    <Button {...buttonDefaults} tooltip={{\n                        html: 'The anchor is centered',\n                        anchorToTarget: true,\n                        align: 'tc-bc',\n                        anchor: true\n                    }}>Anchor Below</Button>\n\n                    <Button {...buttonDefaults} tooltip={{\n                        html: 'Following the mouse with an anchor',\n                        trackMouse: true,\n                        align: 'l-r',\n                        anchor: true\n                    }}>Anchor with Tracking</Button>\n                </Container>\n\n                <Container {...containerDefaults}>\n                    <div style={{...styles.qTipItem, ...styles.color1}} data-qtip=\"This tip is inline\">Inline Tip</div>\n                    <div style={{...styles.qTipItem, ...styles.color2}} data-qtip=\"This tip has a fixed width\" data-qwidth=\"400\">Fixed width inline tip</div>\n                    <div style={{...styles.qTipItem, ...styles.color3}} data-qtip=\"This tip has a title\" data-qtitle=\"The title\">Inline tip with title</div>\n                    <div style={{...styles.qTipItem, ...styles.color4}} data-qtip=\"Aligned top\" data-qalign=\"bl-tl\" data-qanchorToTarget=\"true\">Inline tip align top</div>\n                </Container>\n            </Panel>\n        )\n    }\n}\n\nconst styles = {\n    qTipItem: {\n        width: '150px',\n        margin: '0 15px 0 0',\n        color: 'white',\n        padding: '5px 10px',\n        textAlign: 'center',\n        cursor: 'default'\n    },\n    color1: {\n        backgroundColor: '#e91e63'\n    },\n    color2: {\n        backgroundColor: '#2196f3'\n    },\n    color3: {\n        backgroundColor: '#ff5722'\n    },\n    color4: {\n        backgroundColor: '#607d8b'\n    },\n};"
		}
	],
	"Toolbar": [
		{
			"file": "Toolbar.js",
			"content": "import React, { Component } from 'react';\nimport { Toolbar, Panel, Button, SegmentedButton, Spacer, SearchField } from '@extjs/reactor/modern';\n\nexport default class ToolbarExample extends Component {\n\n    constructor() {\n        super();\n        this.state = { message: '' }\n    }\n\n    buttonHandler(button) {\n        this.setState({ message: `User clicked \"${button.getText()}\"` })\n    }\n\n    render() {\n        const { message } = this.state;\n\n        return (\n            <Panel height={300} width={500} shadow bodyPadding={0}>\n                <Toolbar docked=\"top\">\n                    <Button text=\"Default\" onTap={this.buttonHandler.bind(this)} badgeText=\"2\"/>\n                    <Spacer/>\n                    <SegmentedButton>\n                        <Button text=\"Option 1\" pressed={true} handler={this.buttonHandler.bind(this)}/>\n                        <Button text=\"Option 2\" handler={this.buttonHandler.bind(this)}/>\n                    </SegmentedButton>\n                    <Spacer/>\n                    <Button ui=\"action\" text=\"Action\" handler={this.buttonHandler.bind(this)}/>\n                </Toolbar>\n               <div style={{padding: '20px'}}>{ message }</div>\n            </Panel>\n        )\n    }\n}"
		}
	],
	"TouchEvents": [
		{
			"file": "TouchEvents.js",
			"content": "import React, { Component } from 'react';\nimport { Container, Panel } from '@extjs/reactor/modern';\n\nexport default class TouchEventsExample extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            events: []\n        }\n    }\n\n    componentDidMount() {\n        const fn = this.onTouchEvent.bind(this);\n\n        this.refs.touchpad.el.on({\n            scope: this,\n            touchstart: fn,\n            touchend: fn,\n            touchmove: fn,\n            swipe: fn,\n            dragstart: fn,\n            drag: fn,\n            dragend: fn,\n            tap: fn,\n            singletap: fn,\n            doubletap: fn,\n            longpress: fn,\n            pinch: fn,\n            rotate: fn\n        });\n    }\n\n    onTouchEvent(e, target, options) {\n        this.setState({events: [e.type, ...this.state.events]});\n    }\n\n    render() {\n        const { events } = this.state;\n\n        return (\n            <Container layout={{type: 'hbox', align: 'stretch'}}>\n                <Container flex={1} layout={{type: 'vbox', align: 'stretch'}} margin=\"0 20 0 0\">\n                    <Panel shadow margin=\"0 0 20 0\">\n                        <div>\n                            <p>Ext JS comes with a multitude of touch events available on components. Included touch events that can be used are:</p>\n                            <ul>\n                                <li>touchstart</li>\n                                <li>touchmove</li>\n                                <li>touchend</li>\n                                <li>dragstart</li>\n                                <li>drag</li>\n                                <li>dragend</li>\n                                <li>tap</li>\n                                <li>singletap</li>\n                                <li>doubletap</li>\n                                <li>longpress</li>\n                                <li>swipe</li>\n                                <li>pinch (on iOS and Android 3+)</li>\n                                <li>rotate (on iOS and Android 3+)</li>\n                            </ul>\n                        </div>\n                    </Panel>\n                    <Panel title=\"Event Log\" flex={1} scrollable>\n                        { events.map((e, i) => <div key={i}>{e}</div>) }\n                    </Panel>\n                </Container>\n                <Container ref=\"touchpad\" flex={1} layout={{type: 'vbox', pack: 'center', align: 'stretch'}} style={{border: '8px dashed #d6d6d6', borderRadius: '30px'}}>\n                    <div style={{textAlign: 'center', fontSize: '48px', fontWeight: 'bold', color: '#ccc'}}>Touch Here!</div>\n                </Container>\n            </Container> \n        );\n    }\n}"
		}
	],
	"Tree": [
		{
			"file": "Tree.js",
			"content": "import React, { Component } from 'react';\nimport { Tree } from '@extjs/reactor/modern';\nimport data from './data';\n\nExt.require('Ext.app.ViewModel');\n\nexport default class TreeExample extends Component {\n\n    constructor() {\n        super();\n        this.store = Ext.create('Ext.data.TreeStore', {\n            rootVisible: true,\n            root: data\n        })\n    }\n\n    render() {\n        return (\n            <Tree\n                width={350}\n                height={400}\n                store={this.store}\n                shadow={true}\n            />\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default {\n    expanded: true,\n    text: 'All',\n    iconCls: 'x-fa fa-sitemap',\n    children: [{\n        text: 'Home',\n        iconCls: 'x-fa fa-home',\n        children: [{\n            text: 'Messages',\n            iconCls: 'x-fa fa-inbox',\n            leaf: true\n        }, {\n            text: 'Archive',\n            iconCls: 'x-fa fa-database',\n            children: [{\n                text: 'First',\n                iconCls: 'x-fa fa-sliders',\n                leaf: true\n            }, {\n                text: 'No Icon',\n                iconCls: null,\n                leaf: true\n            }]\n        }, {\n            text: 'Music',\n            iconCls: 'x-fa fa-music',\n            leaf: true\n        }, {\n            text: 'Video',\n            iconCls: 'x-fa fa-film',\n            leaf: true\n        }]\n    }, {\n        text: 'Users',\n        iconCls: 'x-fa fa-user',\n        children: [{\n            text: 'Tagged',\n            iconCls: 'x-fa fa-tag',\n            leaf: true\n        }, {\n            text: 'Inactive',\n            iconCls: 'x-fa fa-trash',\n            leaf: true\n        }]\n    }, {\n        text: 'Groups',\n        iconCls: 'x-fa fa-group',\n        leaf: true\n    }, {\n        text: 'Settings',\n        iconCls: 'x-fa fa-wrench',\n        children: [{\n            text: 'Sharing',\n            iconCls: 'x-fa fa-share-alt',\n            leaf: true\n        }, {\n            text: 'Notifications',\n            iconCls: 'x-fa fa-flag',\n            leaf: true\n        }, {\n            text: 'Network',\n            iconCls: 'x-fa fa-signal',\n            leaf: true\n        }]\n    }]\n};"
		}
	],
	"TreeList": [
		{
			"file": "TreeList.js",
			"content": "import React, { Component } from 'react';\nimport { Panel, TreeList, Toolbar, SegmentedButton, Button } from '@extjs/reactor/modern';\nimport data from './data';\n\nexport default class TreeListExample extends Component {\n\n    constructor() {\n        super();\n\n        this.store = Ext.create('Ext.data.TreeStore', {\n            rootVisible: true,\n            root: data\n        });\n\n        this.state = {\n            nav: false,\n            micro: false,\n            width: undefined\n        };\n    }\n\n    toggleNav(button, nav) {\n        this.setState({ nav });\n    }\n\n    toggleMicro(button, micro) {\n        this.setState({ \n            micro, \n            nav: micro || this.state.nav,\n            width: micro ? 56 : undefined\n        });\n    }\n\n    render() {\n        const { micro, nav, width } = this.state;\n\n        return (\n            <Panel shadow={true} layout=\"fit\">\n                <Toolbar docked=\"top\">\n                    <SegmentedButton allowMultiple={true}>\n                        <Button text=\"Nav\" pressed={nav} onPressedChange={this.toggleNav.bind(this)} disabled={micro}/>\n                        <Button text=\"Micro\" pressed={micro} onPressedChange={this.toggleMicro.bind(this)}/>\n                    </SegmentedButton>\n                </Toolbar>\n\n                <TreeList      \n                    ref=\"tree\"  \n                    width={width}\n                    expanderOnly={false}\n                    store={this.store}\n                    micro={micro}\n                    expanderFirst={!nav}\n                    ui={nav ? 'nav' : null}\n                />\n            </Panel>\n        )\n    }\n}"
		},
		{
			"file": "data.js",
			"content": "export default {\n    expanded: true,\n    text: 'All',\n    iconCls: 'x-fa fa-sitemap',\n    children: [{\n        text: 'Home',\n        iconCls: 'x-fa fa-home',\n        children: [{\n            text: 'Messages',\n            iconCls: 'x-fa fa-inbox',\n            leaf: true\n        }, {\n            text: 'Archive',\n            iconCls: 'x-fa fa-database',\n            children: [{\n                text: 'First',\n                iconCls: 'x-fa fa-sliders',\n                leaf: true\n            }, {\n                text: 'No Icon',\n                iconCls: null,\n                leaf: true\n            }]\n        }, {\n            text: 'Music',\n            iconCls: 'x-fa fa-music',\n            leaf: true\n        }, {\n            text: 'Video',\n            iconCls: 'x-fa fa-film',\n            leaf: true\n        }]\n    }, {\n        text: 'Users',\n        iconCls: 'x-fa fa-user',\n        children: [{\n            text: 'Tagged',\n            iconCls: 'x-fa fa-tag',\n            leaf: true\n        }, {\n            text: 'Inactive',\n            iconCls: 'x-fa fa-trash',\n            leaf: true\n        }]\n    }, {\n        text: 'Groups',\n        iconCls: 'x-fa fa-group',\n        leaf: true\n    }, {\n        text: 'Settings',\n        iconCls: 'x-fa fa-wrench',\n        children: [{\n            text: 'Sharing',\n            iconCls: 'x-fa fa-share-alt',\n            leaf: true\n        }, {\n            text: 'Notifications',\n            iconCls: 'x-fa fa-flag',\n            leaf: true\n        }, {\n            text: 'Network',\n            iconCls: 'x-fa fa-signal',\n            leaf: true\n        }]\n    }]\n};"
		}
	],
	"UrlField": [
		{
			"file": "UrlField.js",
			"content": "import React from 'react';\nimport { FormPanel, UrlField } from '@extjs/reactor/modern';\n\nexport default function UrlFieldExample() {\n    return (\n        <FormPanel shadow={true}>\n            <UrlField placeHolder=\"http://www.sencha.com\" label=\"URL\"/>\n        </FormPanel>\n    )\n} "
		}
	],
	"Video": [
		{
			"file": "Video.js",
			"content": "import React, { Component } from 'react'\nimport { Panel, Video } from '@extjs/reactor/modern';\n\nexport default function VideoExample() {\n    return (\n        <Panel shadow={true} layout=\"fit\">\n            <Video \n                loop={true} \n                url={['resources/video/BigBuck.m4v', 'resources/video/BigBuck.webm']}\n                posterUrl=\"resources/images/cover.jpg\"\n            />\n        </Panel>\n    );\n}"
		}
	]
}